{"version":3,"file":"938.bundle.js","mappings":"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","sources":["webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/amazon/button.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/amazon/utils.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/amazon/session.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/amazon/amazon.ts"],"sourcesContent":["import {Environment} from '../../reducers/environmentReducer';\nimport {type LoadingMode} from '../../models/IEnvironment';\nimport {PaymentConfiguration} from '../../reducers/paymentConfigurationReducer';\nimport {store} from '../../store';\nimport {Carts} from '../../reducers/cartReducer';\nimport {$qsAll} from '../../../../@shared/ts/dom';\n\nexport function setupAmazonPayButton() {\n\tstore.subscribe(() => {\n\t\trenderAmazonPayButtonDisplay(\n\t\t\tPaymentConfiguration.selectedGateway(),\n\t\t\tEnvironment.modalUI.loadingMode(),\n\t\t\tCarts.total(),\n\t\t\tCarts.subscriptionPresent(),\n\t\t);\n\t});\n}\n\nfunction renderAmazonPayButtonDisplay(gatewayId: string, loadingMode: LoadingMode, allCartsTotal: number, hasSubscription: boolean) {\n\t// Currently our amazon pay integration lacks subscriptions support, don't render button if hasSubscription\n\tif (gatewayId.includes('peachpay_amazonpay') && loadingMode === 'finished' && !hasSubscription && allCartsTotal > 0) {\n\t\t$qsAll('.amazon-pay-payment-container').forEach(element => {\n\t\t\telement.classList.remove('hide');\n\t\t});\n\t} else {\n\t\t$qsAll('.amazon-pay-payment-container').forEach(element => {\n\t\t\telement.classList.add('hide');\n\t\t});\n\t}\n}\n","import {PeachPayCustomer} from '../../reducers/peachPayCustomerReducer';\n\n/**\n * Returns an object containing address details for Amazon Pay\n * @returns addressObj Object containing address details\n */\nfunction amazonCustomerAddress() {\n\tconst {\n\t\tfirstName,\n\t\tlastName,\n\t\taddress1,\n\t\taddress2,\n\t\tcity,\n\t\tstate,\n\t\tpostal,\n\t\tcountry,\n\t\tphone,\n\t} = PeachPayCustomer.shipping;\n\tconst additionalData = address2().length === 0 ? {} : {addressLine1: address2()};\n\treturn {\n\t\tname: firstName() + ' ' + lastName(),\n\t\taddressLine1: address1(),\n\t\tcity: city(),\n\t\tstateOrRegion: state(),\n\t\tpostalCode: postal(),\n\t\tcountryCode: country(),\n\t\tphoneNumber: phone(),\n\t\t...additionalData,\n\t};\n}\n\nfunction getAmazonPayCheckoutScript(country: string) {\n\tswitch (country) {\n\t\tcase 'US':\n\t\t\treturn 'https://static-na.payments-amazon.com/checkout.js';\n\t\tcase 'JP':\n\t\t\treturn 'https://static-fe.payments-amazon.com/checkout.js';\n\t\tcase 'GB':\n\t\tcase 'DK':\n\t\tcase 'FR':\n\t\tcase 'DE':\n\t\tcase 'HU':\n\t\tcase 'IT':\n\t\tcase 'LU':\n\t\tcase 'AW':\n\t\tcase 'PT':\n\t\tcase 'ES':\n\t\tcase 'SE':\n\t\t\treturn 'https://static-eu.payments-amazon.com/checkout.js';\n\t\tdefault:\n\t\t\treturn undefined;\n\t}\n}\n\n/**\n * Creates and returns a popup window centered on the screen\n * @param url URL for popup\n * @param windowName Name for popup window\n * @param win Current window object\n * @param w Width of popup\n * @param h Height of popup\n * @returns popup The created popup window object\n */\n// eslint-disable-next-line max-params\nfunction createPopupWindow(url: string | URL, windowName: string, win: Window, w: number, h: number) {\n\tif (win?.top !== null) {\n\t\tconst y = (win.top.outerHeight / 2) + win.top.screenY - (h / 2);\n\t\tconst x = (win.top.outerWidth / 2) + win.top.screenX - (w / 2);\n\t\treturn win.open(url, windowName, `toolbar=no, location=no, directories=no, status=yes, menubar=no, scrollbars=yes, resizable=yes, copyhistory=no, width=${w}, height=${h}, top=${y}, left=${x}`);\n\t}\n\n\treturn null;\n}\n\nexport {amazonCustomerAddress, createPopupWindow, getAmazonPayCheckoutScript};\n","import {FeatureFlag} from '../../../../@type/features';\nimport {type IAmazonPaySession, type IAmazonSessionPayload} from '../../models/IAmazon';\nimport {Carts, DefaultCart} from '../../reducers/cartReducer';\nimport {Environment, Feature} from '../../reducers/environmentReducer';\nimport {MerchantConfiguration} from '../../reducers/merchantConfigurationReducer';\nimport {PeachPayOrder} from '../../reducers/peachPayOrderReducer';\nimport {getBaseURL} from '../../util/environment';\nimport {amazonCustomerAddress} from './utils';\n\n/**\n * Used to generate the amazon pay signature required for rendering an amazon pay buttons\n * @param payload\n * @param sandbox\n * @returns Signature string\n */\nasync function generateAmazonPaySignature(payload: IAmazonSessionPayload, sandbox: boolean): Promise<string> {\n\tconst response = await fetch(\n\t\tgetBaseURL(MerchantConfiguration.hostName(), Environment.testMode())\n\t\t\t+ 'api/v1/amazonpay/signature',\n\t\t{\n\t\t\tmethod: 'POST',\n\t\t\theaders: {'Content-Type': 'application/json'},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tsession: {\n\t\t\t\t\tid: PeachPayOrder.sessionId(),\n\t\t\t\t\tmerchant_id: MerchantConfiguration.id(),\n\t\t\t\t\tmerchant_url: MerchantConfiguration.hostName(),\n\t\t\t\t\tmerchant_name: MerchantConfiguration.name(),\n\t\t\t\t\tplugin_version: Environment.plugin.version(),\n\t\t\t\t\tplatform: 'woocommerce',\n\t\t\t\t},\n\t\t\t\ttransaction: {\n\t\t\t\t\tamazonpay: {\n\t\t\t\t\t\tpayload,\n\t\t\t\t\t\tsandbox,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}),\n\t\t},\n\t);\n\n\tif (!response.ok) {\n\t\treturn '';\n\t}\n\n\tconst result = await response.json() as {signature: string};\n\treturn result.signature;\n}\n\n/**\n * Builds a data object containing all related values for an amazon session.\n * @param returnURL URL the checkout session will return to when completed\n * @returns\n */\nasync function AmazonPaySession(returnURL: string): Promise<IAmazonPaySession> {\n\tconst publicKeyId = Feature.metadata<string>(FeatureFlag.AMAZON_GATEWAY, 'public_key_id') ?? '';\n\tconst storeId = Feature.metadata<string>(FeatureFlag.AMAZON_GATEWAY, 'store_id') ?? '';\n\tconst merchantId = Feature.metadata<string>(FeatureFlag.AMAZON_GATEWAY, 'merchant_id') ?? '';\n\tconst sandbox = Environment.isTestOrDevSite();\n\tconst toFixed = MerchantConfiguration.currency.configuration().number_of_decimals;\n\tconst addressDetails = Carts.virtual() ? {} : {addressDetails: amazonCustomerAddress()};\n\n\tconst payload: IAmazonSessionPayload = {\n\t\twebCheckoutDetails: {\n\t\t\tcheckoutResultReturnUrl: returnURL,\n\t\t\tcheckoutMode: 'ProcessOrder',\n\t\t},\n\t\tstoreId,\n\t\tscopes: ['name', 'email', 'phoneNumber', 'billingAddress'],\n\t\tpaymentDetails: {\n\t\t\tpaymentIntent: 'AuthorizeWithCapture',\n\t\t\tchargeAmount: {\n\t\t\t\tamount: (DefaultCart.total()).toFixed(toFixed),\n\t\t\t\tcurrencyCode: MerchantConfiguration.currency.code(),\n\t\t\t},\n\t\t\tpresentmentCurrency: MerchantConfiguration.currency.code(),\n\t\t},\n\t\t...addressDetails,\n\t};\n\tconst signature = await generateAmazonPaySignature(payload, sandbox);\n\n\treturn {\n\t\tpublicKeyId,\n\t\tstoreId,\n\t\tmerchantId,\n\t\tsandbox,\n\t\taddressDetails,\n\t\tpayload,\n\t\tsignature,\n\t};\n}\n\nexport {AmazonPaySession};\n","import {type WCOrder} from './../../../../@type/woocommerce/order';\nimport {type AmazonGateway, type IAmazonInstance, type IAmazonPaySession, type IAmazonWindowMessage} from '../../models/IAmazon';\nimport {store} from '../../store';\nimport {PaymentConfiguration, registerGatewayBatch} from '../../reducers/paymentConfigurationReducer';\nimport {Environment, startModalProcessing, stopModalLoading} from '../../reducers/environmentReducer';\nimport {MerchantConfiguration} from '../../reducers/merchantConfigurationReducer';\nimport {type ITransactionService, type OrderService} from '../order';\nimport {setupAmazonPayButton} from './button';\nimport {getBaseURL} from '../../util/environment';\nimport {DefaultCart} from '../../reducers/cartReducer';\nimport {PeachPayCustomer, updateCustomerPreferredGateway} from '../../reducers/peachPayCustomerReducer';\nimport {Carts} from '../../reducers/cartReducer';\nimport {updateCustomerDataInBrowser} from '../../features/customer';\nimport {clearLocalSession} from '../session';\nimport {PeachPayOrder} from '../../reducers/peachPayOrderReducer';\nimport {AmazonPaySession} from './session';\nimport {createPopupWindow, getAmazonPayCheckoutScript} from './utils';\nimport {loadScript, $qsAll, $qs, onWindowDataFetch, onWindowMessage} from '../../../../@shared/ts/dom';\nimport amazonBadgeURL from '../../../img/badge/amazon.svg';\nimport amazonImageURL from '../../../img/marks/amazon-pay-card.svg';\nimport {captureSentryException} from '../../../../@shared/ts/sentry';\nimport {GLOBAL} from '../../deprecated/global';\nimport {type GatewayConfiguration} from '../../models/GatewayConfiguration';\n\ndeclare const amazon: IAmazonInstance;\n\nexport default async function initAmazonPaymentIntegration(orderService: OrderService) {\n\tawait loadScript('https://static-na.payments-amazon.com/checkout.js', 'amazon', () => {\n\t\tregisterAmazonGateways();\n\t\tsetupAmazonPayButton();\n\n\t\tlet previousGateway = '';\n\t\tlet previousPage = Environment.modalUI.page();\n\t\tstore.subscribe(async () => {\n\t\t\tif (DefaultCart.total() === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t(PaymentConfiguration.selectedGateway() === 'peachpay_amazonpay' && previousGateway !== 'peachpay_amazonpay')\n\t\t\t\t|| (PaymentConfiguration.selectedGateway() === 'peachpay_amazonpay' && Environment.modalUI.page() === 'payment' && previousPage !== 'payment')\n\t\t\t) {\n\t\t\t\tpreviousGateway = 'peachpay_amazonpay';\n\t\t\t\tpreviousPage = 'payment';\n\t\t\t\tawait initAmazonPayPaymentFlow(orderService);\n\t\t\t}\n\n\t\t\tif (PaymentConfiguration.selectedGateway() !== previousGateway) {\n\t\t\t\tpreviousGateway = PaymentConfiguration.selectedGateway();\n\t\t\t}\n\n\t\t\tif (Environment.modalUI.page() !== previousPage) {\n\t\t\t\tpreviousPage = Environment.modalUI.page();\n\t\t\t}\n\t\t});\n\t});\n}\n\nfunction initAmazonPayMethod(): AmazonGateway {\n\treturn {\n\t\tconfig: {\n\t\t\tname: 'Amazon Pay',\n\t\t\tgatewayId: 'peachpay_amazonpay',\n\t\t\tdescription: 'Please click the Amazon Pay button to complete your checkout.',\n\t\t\tassets: {\n\t\t\t\ttitle: {src: amazonImageURL},\n\t\t\t\tbadge: {src: amazonBadgeURL},\n\t\t\t},\n\t\t},\n\t};\n}\n\nfunction registerAmazonGateways(): Record<string, AmazonGateway> {\n\tconst gatewayImplementations: Record<string, AmazonGateway> = {};\n\tconst gatewayConfigurations: Record<string, GatewayConfiguration> = {};\n\n\tconst method = initAmazonPayMethod();\n\tgatewayImplementations[method.config.gatewayId] = method;\n\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\n\tstore.dispatch(registerGatewayBatch(gatewayConfigurations));\n\n\treturn gatewayImplementations;\n}\n\nasync function initAmazonPayPaymentFlow(orderService: OrderService) {\n\tif (!GLOBAL.phpData?.plugin_asset_url) {\n\t\treturn;\n\t}\n\n\t/**\n\t * Clear old instances of aPay button since they contain customer shipping data which might have changed\n\t * when modal state change\n\t */\n\t$qsAll('.pp-amazon-pay-btn-container', $el => {\n\t\tconst elId = $el.id;\n\t\tconst $parentEl = $el.parentElement;\n\t\t$parentEl?.replaceChildren();\n\t\tif ($parentEl !== null) {\n\t\t\t$parentEl.innerHTML = '';\n\t\t}\n\n\t\tconst htmlString = `<div id=\"${elId}\" class=\"\"></div>`;\n\t\t$parentEl?.insertAdjacentHTML('beforeend', htmlString);\n\t});\n\n\t$qs('#amazon-pay-btn-container')?.classList.add('pp-amazon-pay-btn-container');\n\t$qs('#amazon-pay-btn-container-mobile')?.classList.add('pp-amazon-pay-btn-container');\n\n\t// The URL Amazon Pay redirects to once the customer has completed checkout\n\tconst returnURL = `${GLOBAL.phpData.plugin_asset_url}public/amazon-checkout.html`;\n\t// eslint-disable-next-line new-cap\n\tconst amazonSession = await AmazonPaySession(returnURL);\n\n\t['#amazon-pay-btn-container', '#amazon-pay-btn-container-mobile'].forEach(elementID => {\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\tconst amazonPayButton = amazon.Pay.renderButton(elementID, {\n\t\t\tmerchantId: amazonSession.merchantId,\n\t\t\tpublicKeyId: amazonSession.publicKeyId,\n\t\t\tledgerCurrency: MerchantConfiguration.currency.code(),\n\t\t\tcheckoutLanguage: 'en_US',\n\t\t\tproductType: Carts.virtual() ? 'PayOnly' : 'PayAndShip',\n\t\t\tplacement: 'Cart',\n\t\t\tbuttonColor: 'Gold',\n\t\t\tsandbox: amazonSession.sandbox,\n\t\t});\n\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-call\n\t\tamazonPayButton.onClick(async () => {\n\t\t\tif (!GLOBAL.phpData?.plugin_asset_url) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$qs('body')?.classList.add('pp-disabled');\n\n\t\t\tconst popupURL = `${GLOBAL.phpData.plugin_asset_url}public/amazon-checkout.html`;\n\t\t\tawait openAmazonPayPopup(amazonSession, popupURL, orderService);\n\t\t});\n\t});\n}\n\nasync function openAmazonPayPopup(amazonSession: IAmazonPaySession, popupURL: string, orderService: OrderService) {\n\tconst toFixed = MerchantConfiguration.currency.configuration().number_of_decimals;\n\tconst amazonWindowDataBase64 = btoa(JSON.stringify({\n\t\tbuttonData: {\n\t\t\tmerchantId: amazonSession.merchantId,\n\t\t\tpublicKeyId: amazonSession.publicKeyId,\n\t\t\tledgerCurrency: MerchantConfiguration.currency.code(),\n\t\t\tcheckoutLanguage: Environment.language().replace('-', '_'),\n\t\t\tproductType: Carts.virtual() ? 'PayOnly' : 'PayAndShip',\n\t\t\tplacement: 'Cart',\n\t\t\tbuttonColor: 'Gold',\n\t\t\tsandbox: amazonSession.sandbox,\n\t\t},\n\t\tinitCheckoutData: {\n\t\t\tcreateCheckoutSessionConfig: {\n\t\t\t\tpayloadJSON: JSON.stringify(amazonSession.payload),\n\t\t\t\tsignature: amazonSession.signature,\n\t\t\t\tpublicKeyId: amazonSession.publicKeyId,\n\t\t\t},\n\t\t},\n\t\tscriptLink: getAmazonPayCheckoutScript(PeachPayCustomer.billing.country()),\n\t}));\n\n\tconst popupWindow = createPopupWindow(`${popupURL}?amazon_data=${amazonWindowDataBase64}`, 'amazonPayPopup', window, 550, 515);\n\n\tconst closedCheck = setInterval(() => {\n\t\tif (popupWindow?.closed) {\n\t\t\tclearInterval(closedCheck);\n\t\t\t$qs('body')?.classList.remove('pp-disabled');\n\t\t}\n\t}, 1000);\n\n\tif (popupWindow !== null) {\n\t\tconst transaction = await orderService.startTransaction('peachpay_amazonpay');\n\t\tconst orderResponse = await orderService.placeOrder(transaction);\n\t\tif (!transaction || orderResponse.result !== 'success') {\n\t\t\treturn;\n\t\t}\n\n\t\tonWindowDataFetch('pp-amazon-popup-closed', () => {\n\t\t\t$qs('body')?.classList.remove('pp-disabled');\n\t\t});\n\n\t\tonWindowMessage('pp-amazon-checkout-failed', winMessage => {\n\t\t\tstore.dispatch(stopModalLoading());\n\n\t\t\t// eslint-disable-next-line no-alert, @typescript-eslint/restrict-template-expressions\n\t\t\twindow.alert(`Amazon Pay was unable to proceed with checkout due to the following:\\n${winMessage.message}`);\n\t\t\tcaptureSentryException(new Error(winMessage.message), {\n\t\t\t\tamazonpay_session: amazonSession,\n\t\t\t});\n\t\t});\n\n\t\tonWindowMessage('pp-amazon-checkout-complete', async message => {\n\t\t\tconst checkoutSessionId = (message as IAmazonWindowMessage).sessionId;\n\t\t\tpopupWindow.postMessage({event: 'pp-amazon-received-session-id'}, location.origin);\n\n\t\t\tconst request = {\n\t\t\t\tsession: {\n\t\t\t\t\tid: PeachPayOrder.sessionId(),\n\t\t\t\t\tmerchant_id: MerchantConfiguration.id(),\n\t\t\t\t\tmerchant_url: MerchantConfiguration.hostName(),\n\t\t\t\t\tmerchant_name: MerchantConfiguration.name(),\n\t\t\t\t\tplugin_version: Environment.plugin.version(),\n\t\t\t\t\tplatform: 'woocommerce',\n\t\t\t\t},\n\t\t\t\ttransaction: {\n\t\t\t\t\tamazonpay: {\n\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\tchargeAmount: {\n\t\t\t\t\t\t\t\tamount: (DefaultCart.total()).toFixed(toFixed),\n\t\t\t\t\t\t\t\tcurrencyCode: MerchantConfiguration.currency.code(),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsession_id: checkoutSessionId,\n\t\t\t\t\t\tsandbox: amazonSession.sandbox,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\torder: {\n\t\t\t\t\tid: String(orderResponse.order_id),\n\t\t\t\t\tamount: (DefaultCart.total()).toFixed(toFixed),\n\t\t\t\t\tcurrency: MerchantConfiguration.currency.code(),\n\t\t\t\t\tdata: orderResponse,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst response = await fetch(\n\t\t\t\tgetBaseURL(MerchantConfiguration.hostName(), Environment.testMode())\n\t\t\t\t\t+ 'api/v1/amazonpay/checkout',\n\t\t\t\t{\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: {'Content-Type': 'application/json'},\n\t\t\t\t\tbody: JSON.stringify(request),\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tcaptureSentryException(new Error('Call to PeachPay API /amazonpay/checkout failed'), {\n\t\t\t\t\tamazonpay_session: amazonSession,\n\t\t\t\t\trequest,\n\t\t\t\t\tresponse,\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\tconst result = await response.json();\n\n\t\t\tstore.dispatch(startModalProcessing());\n\t\t\tawait handleAmazonCompletion(result, checkoutSessionId, orderService, transaction, orderResponse);\n\t\t});\n\t}\n}\n\n// eslint-disable-next-line max-params\nasync function handleAmazonCompletion(\n\tresult: any, // See https://developer.amazon.com/docs/amazon-pay-api-v2/checkout-session.html#response-3 for type\n\tcheckoutSessionId: string,\n\torderService: OrderService,\n\ttransaction: ITransactionService,\n\torder: WCOrder,\n) {\n\t// eslint-disable-next-line no-negated-condition\n\tif (result.data.statusDetails.state !== 'Completed') {\n\t\tstore.dispatch(stopModalLoading());\n\t} else {\n\t\tawait orderService.setOrderStatus(order, transaction, {\n\t\t\tamazonpay: {session_id: checkoutSessionId},\n\t\t\tpaymentStatus: 'success',\n\t\t\torderStatus: 'success',\n\t\t});\n\n\t\tstore.dispatch(updateCustomerPreferredGateway(PaymentConfiguration.selectedGateway()));\n\n\t\tupdateCustomerDataInBrowser();\n\t\tclearLocalSession();\n\n\t\tif (window.top) {\n\t\t\twindow.top.location = order.redirect;\n\t\t}\n\t}\n}\n"],"names":["setupAmazonPayButton","store","gatewayId","loadingMode","allCartsTotal","hasSubscription","includes","forEach","element","classList","remove","add","amazonCustomerAddress","firstName","lastName","address1","address2","city","state","postal","country","phone","additionalData","length","addressLine1","name","stateOrRegion","postalCode","countryCode","phoneNumber","getAmazonPayCheckoutScript","generateAmazonPaySignature","payload","sandbox","fetch","method","headers","body","JSON","stringify","session","id","merchant_id","merchant_url","merchant_name","plugin_version","platform","transaction","amazonpay","response","ok","json","signature","AmazonPaySession","returnURL","publicKeyId","storeId","merchantId","toFixed","number_of_decimals","addressDetails","webCheckoutDetails","checkoutResultReturnUrl","checkoutMode","scopes","paymentDetails","paymentIntent","chargeAmount","amount","currencyCode","presentmentCurrency","initAmazonPaymentIntegration","orderService","gatewayConfigurations","config","description","assets","title","src","badge","previousGateway","previousPage","initAmazonPayPaymentFlow","plugin_asset_url","$el","elId","$parentEl","parentElement","replaceChildren","innerHTML","htmlString","insertAdjacentHTML","amazonSession","elementID","amazon","Pay","renderButton","ledgerCurrency","checkoutLanguage","productType","placement","buttonColor","onClick","popupURL","openAmazonPayPopup","amazonWindowDataBase64","btoa","buttonData","replace","initCheckoutData","createCheckoutSessionConfig","payloadJSON","scriptLink","popupWindow","url","windowName","win","w","h","top","y","outerHeight","screenY","x","outerWidth","screenX","open","createPopupWindow","window","closedCheck","setInterval","closed","clearInterval","startTransaction","placeOrder","result","winMessage","alert","message","Error","amazonpay_session","checkoutSessionId","sessionId","postMessage","event","location","origin","request","session_id","order","String","order_id","currency","data","handleAmazonCompletion","statusDetails","setOrderStatus","paymentStatus","orderStatus","c","redirect"],"sourceRoot":""}