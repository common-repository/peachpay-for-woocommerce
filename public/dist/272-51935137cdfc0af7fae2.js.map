{"version":3,"file":"272-51935137cdfc0af7fae2.js","mappings":"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","sources":["webpack://peachpay-for-woocommerce/./node_modules/@stripe/stripe-js/dist/stripe.esm.js","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/stripe/button.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/stripe/setup-intent.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/stripe/gateways/achDebit.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/stripe/gateways/afterpay.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/stripe/payment-request.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/stripe/stripe.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/stripe/gateways/card.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/stripe/gateways/affirm.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/stripe/gateways/klarna.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/stripe/gateways/sofort.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/stripe/gateways/eps.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/stripe/gateways/p24.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/stripe/gateways/sepaDebit.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/stripe/gateways/bancontact.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/stripe/gateways/giropay.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/stripe/gateways/ideal.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/stripe/gateways/applepay.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/stripe/gateways/googlepay.ts"],"sourcesContent":["var V3_URL = 'https://js.stripe.com/v3';\nvar V3_URL_REGEX = /^https:\\/\\/js\\.stripe\\.com\\/v3\\/?(\\?.*)?$/;\nvar EXISTING_SCRIPT_MESSAGE = 'loadStripe.setLoadParameters was called but an existing Stripe.js script already exists in the document; existing script parameters will be used';\nvar findScript = function findScript() {\n  var scripts = document.querySelectorAll(\"script[src^=\\\"\".concat(V3_URL, \"\\\"]\"));\n\n  for (var i = 0; i < scripts.length; i++) {\n    var script = scripts[i];\n\n    if (!V3_URL_REGEX.test(script.src)) {\n      continue;\n    }\n\n    return script;\n  }\n\n  return null;\n};\n\nvar injectScript = function injectScript(params) {\n  var queryString = params && !params.advancedFraudSignals ? '?advancedFraudSignals=false' : '';\n  var script = document.createElement('script');\n  script.src = \"\".concat(V3_URL).concat(queryString);\n  var headOrBody = document.head || document.body;\n\n  if (!headOrBody) {\n    throw new Error('Expected document.body not to be null. Stripe.js requires a <body> element.');\n  }\n\n  headOrBody.appendChild(script);\n  return script;\n};\n\nvar registerWrapper = function registerWrapper(stripe, startTime) {\n  if (!stripe || !stripe._registerWrapper) {\n    return;\n  }\n\n  stripe._registerWrapper({\n    name: 'stripe-js',\n    version: \"1.44.1\",\n    startTime: startTime\n  });\n};\n\nvar stripePromise = null;\nvar loadScript = function loadScript(params) {\n  // Ensure that we only attempt to load Stripe.js at most once\n  if (stripePromise !== null) {\n    return stripePromise;\n  }\n\n  stripePromise = new Promise(function (resolve, reject) {\n    if (typeof window === 'undefined') {\n      // Resolve to null when imported server side. This makes the module\n      // safe to import in an isomorphic code base.\n      resolve(null);\n      return;\n    }\n\n    if (window.Stripe && params) {\n      console.warn(EXISTING_SCRIPT_MESSAGE);\n    }\n\n    if (window.Stripe) {\n      resolve(window.Stripe);\n      return;\n    }\n\n    try {\n      var script = findScript();\n\n      if (script && params) {\n        console.warn(EXISTING_SCRIPT_MESSAGE);\n      } else if (!script) {\n        script = injectScript(params);\n      }\n\n      script.addEventListener('load', function () {\n        if (window.Stripe) {\n          resolve(window.Stripe);\n        } else {\n          reject(new Error('Stripe.js not available'));\n        }\n      });\n      script.addEventListener('error', function () {\n        reject(new Error('Failed to load Stripe.js'));\n      });\n    } catch (error) {\n      reject(error);\n      return;\n    }\n  });\n  return stripePromise;\n};\nvar initStripe = function initStripe(maybeStripe, args, startTime) {\n  if (maybeStripe === null) {\n    return null;\n  }\n\n  var stripe = maybeStripe.apply(undefined, args);\n  registerWrapper(stripe, startTime);\n  return stripe;\n}; // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\n// own script injection.\n\nvar stripePromise$1 = Promise.resolve().then(function () {\n  return loadScript(null);\n});\nvar loadCalled = false;\nstripePromise$1[\"catch\"](function (err) {\n  if (!loadCalled) {\n    console.warn(err);\n  }\n});\nvar loadStripe = function loadStripe() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  loadCalled = true;\n  var startTime = Date.now();\n  return stripePromise$1.then(function (maybeStripe) {\n    return initStripe(maybeStripe, args, startTime);\n  });\n};\n\nexport { loadStripe };\n","import {$qsAll} from '../../../../@shared/ts/dom';\nimport {type ModalPage, type LoadingMode} from '../../models/IEnvironment';\nimport {DefaultCart} from '../../reducers/cartReducer';\nimport {Environment} from '../../reducers/environmentReducer';\nimport {PaymentConfiguration} from '../../reducers/paymentConfigurationReducer';\nimport {store} from '../../store';\nimport {formatCurrencyString} from '../../util/currency';\nimport {getLocaleText} from '../../util/translation';\n\nexport function setupStripeButton() {\n\tstore.subscribe(() => {\n\t\trenderStripeButtonDisplay(\n\t\t\tPaymentConfiguration.selectedGateway(),\n\t\t\tEnvironment.modalUI.page(),\n\t\t\tEnvironment.modalUI.loadingMode(),\n\t\t);\n\n\t\trenderStripeButtonLoading(\n\t\t\tEnvironment.modalUI.loadingMode(),\n\t\t);\n\t});\n}\n\n/**\n * Renders the stripe button display state.\n */\nfunction renderStripeButtonDisplay(gatewayId: string, page: ModalPage, loadingMode: LoadingMode) {\n\t// Show/hide Stripe button container\n\tif (gatewayId.startsWith('peachpay_stripe_') && page === 'payment') {\n\t\t$qsAll('.stripe-btn-container', $element => {\n\t\t\t$element.classList.remove('hide');\n\t\t});\n\t} else {\n\t\t$qsAll('.stripe-btn-container', $element => {\n\t\t\t$element.classList.add('hide');\n\t\t});\n\t}\n\n\t// Hide/Show button\n\tif (loadingMode === 'loading') {\n\t\t$qsAll('.stripe-btn', $element => {\n\t\t\t$element.classList.add('hide');\n\t\t});\n\t} else {\n\t\t$qsAll('.stripe-btn', $element => {\n\t\t\t$element.classList.remove('hide');\n\t\t});\n\t}\n}\n\n/**\n * Renders the stripe button loading state.\n */\nfunction renderStripeButtonLoading(mode: LoadingMode) {\n\t// Show/hide the external spinner\n\tif (mode === 'loading') {\n\t\t$qsAll('.stripe-spinner-container', $element => {\n\t\t\t$element.classList.remove('hide');\n\t\t});\n\t} else {\n\t\t$qsAll('.stripe-spinner-container', $element => {\n\t\t\t$element.classList.add('hide');\n\t\t});\n\t}\n\n\t// Show/hide the internal spinner\n\tif (mode === 'processing') {\n\t\t$qsAll('.stripe-btn-spinner', $element => {\n\t\t\t$element.classList.remove('hide');\n\t\t});\n\t} else {\n\t\t$qsAll('.stripe-btn-spinner', $element => {\n\t\t\t$element.classList.add('hide');\n\t\t});\n\t}\n\n\t// Show/hide processing message\n\tif (mode === 'processing') {\n\t\t$qsAll('.stripe-btn > .button-text', $element => {\n\t\t\t$element.innerHTML = getLocaleText('Processing');\n\t\t});\n\t} else {\n\t\t$qsAll('.stripe-btn > .button-text', $element => {\n\t\t\t$element.innerHTML = `${getLocaleText('Pay')} ${formatCurrencyString(DefaultCart.total())}`;\n\t\t});\n\t}\n\n\t// Enable/disable the stripe button\n\tif (mode === 'finished') {\n\t\t$qsAll<HTMLInputElement>('.stripe-btn', $element => {\n\t\t\t$element.disabled = false;\n\t\t});\n\t} else {\n\t\t$qsAll<HTMLInputElement>('.stripe-btn', $element => {\n\t\t\t$element.disabled = true;\n\t\t});\n\t}\n}\n","import {FeatureFlag} from '../../../../@type/features';\nimport {type IResponse} from '../../../../@type/response';\nimport {Feature} from '../../reducers/environmentReducer';\n\nasync function createSetupIntent(sessionId: string, paymentMethodType: string, paymentMethodId?: string): Promise<string | null> {\n\tconst url = Feature.metadata<string>(FeatureFlag.STRIPE_GATEWAYS, 'setup_intent_url');\n\tconst security = Feature.metadata<string>(FeatureFlag.STRIPE_GATEWAYS, 'setup_intent_nonce');\n\n\tif (!url || !security) {\n\t\treturn null;\n\t}\n\n\tconst formData = new FormData();\n\tformData.append('security', security);\n\tformData.append('session_id', sessionId);\n\tformData.append('payment_method_type', paymentMethodType);\n\tif (paymentMethodId) {\n\t\tformData.append('payment_method', paymentMethodId);\n\t}\n\n\tconst response = await fetch(url, {\n\t\tmethod: 'POST',\n\t\tbody: formData,\n\t});\n\n\tconst data = await response.json() as IResponse<{setup_intent_details: {client_secret: string}}>;\n\n\tif (!data.success) {\n\t\treturn null;\n\t}\n\n\treturn data.data.setup_intent_details.client_secret;\n}\n\nexport {createSetupIntent};\n","import {$qs} from '../../../../../@shared/ts/dom';\nimport {type StripeGateway, type IStripeContext} from '../../../models/stripe';\nimport {MerchantConfiguration} from '../../../reducers/merchantConfigurationReducer';\nimport {PeachPayCustomer} from '../../../reducers/peachPayCustomerReducer';\nimport {getLocaleText} from '../../../util/translation';\nimport {createSetupIntent} from '../setup-intent';\nimport bankImageURL from '../../../../img/marks/bank.svg';\nimport {Feature} from '../../../reducers/environmentReducer';\nimport {FeatureFlag} from '../../../../../@type/features';\n\n// https://stripe.com/docs/payments/ach-debit/accept-a-payment\nfunction initStripeACHDebitMethod(): StripeGateway {\n\treturn {\n\t\tconfig: {\n\t\t\tname: Feature.metadata<string>(FeatureFlag.STRIPE_ACHDEBIT_GATEWAY, 'title') ?? getLocaleText('US bank account'),\n\t\t\tdescription: /* html */ `<p style=\"margin: 0;\">${getLocaleText('After selecting <b>Pay</b> a prompt will appear to select a bank account.')}</p><hr><p class=\"muted\" style=\"margin: 0;\">${\n\t\t\t\tgetLocaleText('Note: Payments may take up to 5 days to complete.')\n\t\t\t}</p>`,\n\t\t\tgatewayId: 'peachpay_stripe_achdebit',\n\t\t\tassets: {\n\t\t\t\ttitle: {src: bankImageURL},\n\t\t\t\tbadge: {src: bankImageURL},\n\t\t\t},\n\t\t},\n\t\tasync tokenize(context: IStripeContext, sessionId: string) {\n\t\t\tconst {stripe} = context;\n\n\t\t\tconst clientSecret = await createSetupIntent(sessionId, 'us_bank_account');\n\t\t\tif (!clientSecret) {\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: 'Failed to create setup intent.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tconst {error: collectError, setupIntent: collectIntent} = await stripe.collectBankAccountForSetup({\n\t\t\t\tclientSecret,\n\t\t\t\tparams: {\n\t\t\t\t\tpayment_method_type: 'us_bank_account',\n\t\t\t\t\tpayment_method_data: {\n\t\t\t\t\t\tbilling_details: {\n\t\t\t\t\t\t\temail: PeachPayCustomer.billing.email(),\n\t\t\t\t\t\t\tname: PeachPayCustomer.billing.firstName() + ' ' + PeachPayCustomer.billing.lastName(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\t\t\tif (!collectIntent || collectError) {\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: collectError?.message ?? 'Failed to collect bank account for setup intent.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (collectIntent.status !== 'requires_confirmation') {\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: 'The customer canceled choosing a bank account.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tconst mandateResponse = await displayMandate({\n\t\t\t\tfullName: PeachPayCustomer.billing.fullName(),\n\t\t\t\tclientName: MerchantConfiguration.name(),\n\t\t\t});\n\t\t\tif (!mandateResponse) {\n\t\t\t\tconst message = getLocaleText('The required mandate was not accepted. Payment canceled.');\n\t\t\t\treturn [null, {note: message}];\n\t\t\t}\n\n\t\t\tconst {error: confirmError, setupIntent: confirmIntent} = await stripe.confirmUsBankAccountSetup(clientSecret);\n\t\t\tif (!confirmIntent || confirmError) {\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: confirmError?.message ?? 'Failed to confirm setup intent.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (confirmIntent.status !== 'succeeded') {\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: `Setup intent resulted in invalid status(${confirmIntent.status})`,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\treturn [confirmIntent.payment_method as string, {}];\n\t\t},\n\t\tasync confirm(context: IStripeContext, clientSecret: string) {\n\t\t\tconst {stripe} = context;\n\n\t\t\tconst {paymentIntent, error} = await stripe.retrievePaymentIntent(clientSecret);\n\n\t\t\tif (!paymentIntent || error) {\n\t\t\t\tconst message = error?.message ?? 'Failed to retrieve payment intent.';\n\t\t\t\treturn [null, {\n\t\t\t\t\tnote: message,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (paymentIntent.status === 'succeeded' || paymentIntent.status === 'processing') {\n\t\t\t\treturn ['success', {}];\n\t\t\t}\n\n\t\t\treturn [null, {\n\t\t\t\tnote: `Failed to confirm payment intent with status(${paymentIntent.status})`,\n\t\t\t}];\n\t\t},\n\t};\n}\n\nasync function displayMandate(options: IMandateOptions): Promise<boolean> {\n\treturn new Promise((res, rej) => {\n\t\t$qs('body', $el => {\n\t\t\t$el.insertAdjacentHTML('beforeend', mandateTemplate(options));\n\t\t});\n\n\t\tconst $container = $qs<HTMLDivElement>('#ach-mandate-container');\n\t\tconst $acceptButton = $qs<HTMLButtonElement>('#ach-button-accept');\n\t\tconst $cancelButton = $qs<HTMLButtonElement>('#ach-button-cancel');\n\t\tconst $xButton = $qs<HTMLButtonElement>('#ach-button-x');\n\n\t\tif (!$container || !$acceptButton || !$cancelButton || !$xButton) {\n\t\t\t$container?.remove();\n\t\t\trej(new Error('Developer error: Mandate was not mounted.'));\n\t\t\treturn;\n\t\t}\n\n\t\t$acceptButton.addEventListener('click', () => {\n\t\t\t$container.remove();\n\t\t\tres(true);\n\t\t});\n\n\t\t$cancelButton.addEventListener('click', () => {\n\t\t\t$container.remove();\n\t\t\tres(false);\n\t\t});\n\n\t\t$xButton.addEventListener('click', () => {\n\t\t\t$container.remove();\n\t\t\tres(false);\n\t\t});\n\t});\n}\n\ninterface IMandateOptions {\n\tfullName: string;\n\tclientName: string;\n}\n\nfunction mandateTemplate(options: IMandateOptions): string {\n\tconst date = new Date().toLocaleDateString();\n\tconst nameHtml = options.fullName === ' ' ? '' : `<p>Name: ${options.fullName}</p>`;\n\n\tconst template = /* html */ `\n<div id=\"ach-mandate-container\">\n    <div id=\"ach-mandate-modal\">\n        <div id=\"ach-mandate-header\">\n            <button type=\"button\" id=\"ach-button-x\" class=\"txt-btn\" style=\"font-size: 2rem;\">×</button>\n        </div>\n        <div id=\"ach-mandate-body\">\n            <span>\n                ${nameHtml}\n                <p>Date: ${date}</p>\n            </span>\n            <br>\n            <p>\n                <!-- Note this text is only applicable to non recurring orders! -->\n                ${getLocaleText('By clicking <b>Accept</b>, you authorize')} <span class=\"client\">${options.clientName}</span> \n                ${getLocaleText('to debit the bank account specified above for any amount owed for charges arising from your use of')}\n                <span class=\"client\">${options.clientName}'s</span> ${getLocaleText('services and/or purchase of products from ')}\n                <span class=\"client\">${options.clientName}</span>, ${getLocaleText('pursuant to')} <span class=\"client\">${options.clientName}'s</span> ${\n\tgetLocaleText('website and terms, until this authorization is revoked. You may amend or cancel this authorization at any time by providing notice to ')\n}\n                <span class=\"client\">${options.clientName}</span> ${getLocaleText('with 30 (thirty) days notice.')}\n            </p>\n            <br>\n            <div style=\"text-align: center;\">\n                <button type=\"button\" id=\"ach-button-accept\" class=\"btn\" style=\"padding: 9px; width: 7rem;\">${getLocaleText('Accept')}</button>\n                <button type=\"button\" id=\"ach-button-cancel\" class=\"txt-btn\">${getLocaleText('Cancel')}</button>\n            </div>\n        </div>\n    </div>\n    <style>\n        #ach-mandate-container{\n            position: fixed;\n            left: 0;\n            right: 0;\n            top: 0;\n            bottom: 0;\n            background-color: rgba(0,0,0,0.5);\n            animation-name: fadein;\n            animation-duration: 0.4s;\n        }\n\n        @keyframes fadein{\n            from {\n                background-color: rgba(0,0,0,0);\n            }\n            to {\n                background-color: rgba(0,0,0,0.5);\n            }\n        }\n\n        #ach-mandate-container .client{\n            border: 1px solid #e6e6e6;\n            border-radius: 0.2rem;\n            background-color: #e6e6e6;\n            padding: 0 4px;\n            margin-bottom: 1px;\n            display: inline-block;\n        }\n\n        #ach-mandate-modal{\n            position: absolute;\n            background-color: white;\n            border-radius: 0.4rem;\n            z-index: 10000000000;\n            width: 50vw;\n            box-shadow:  2px 8px 20px 3px rgb(0 0 0 / 20%);\n            margin: 0 calc(49vw / 2);\n            top: 10vh;\n        }\n\n        #ach-mandate-header{\n            padding: 0 0.5rem;\n            text-align: right;\n            border-bottom: 1px solid #e6e6e6;\n        }\n\n        #ach-mandate-body{\n            padding: 1.5rem;\n        }\n\n        #ach-mandate-body p {\n            margin: 0;\n            padding: 0;\n        }\n        \n        #ach-mandate-modal .txt-btn{\n            border: none;\n            background: none;\n            color: grey;\n            font-weight: 400;\n        }\n\n        #ach-mandate-modal .txt-btn:hover{\n            cursor: pointer;\n            color: red;\n        } \n\n        @media screen and (max-width: 768px) {\n\n            \n            #ach-mandate-modal{\n                width: 100%;\n                margin: 0;\n                left: 0;\n                right: 0;\n\n                animation-duration: 0.8s;\n                animation-name: slideup;\n                top: unset;\n                bottom: 0;\n                border-bottom-left-radius: 0;\n                border-bottom-right-radius: 0;\n            }\n\n            @keyframes slideup{\n                from {\n                    bottom: -100%\n                }\n                to {\n                    bottom: 0;\n                }\n            }\n\n        }\n\n        /*This prevents the background from being scrollable*/\n        body{\n            overflow: hidden !important;\n            touch-action: none !important;\n        }\n    </style>\n</div>`;\n\n\treturn template;\n}\n\nexport {initStripeACHDebitMethod};\n","import {type StripeGateway, type IStripeContext} from '../../../models/stripe';\nimport {$qs} from '../../../../../@shared/ts/dom';\nimport {PeachPayCustomer} from '../../../reducers/peachPayCustomerReducer';\nimport {MerchantConfiguration} from '../../../reducers/merchantConfigurationReducer';\nimport {getLocaleText} from '../../../util/translation';\nimport imageBadge from '../../../../img/marks/afterpay-logo.svg';\nimport afterpayImageURL from '../../../../img/marks/afterpay.svg';\nimport clearpayImageURL from '../../../../img/marks/clearpay.svg';\nimport {Feature} from '../../../reducers/environmentReducer';\nimport {FeatureFlag} from '../../../../../@type/features';\nimport {type GatewayConfiguration} from '../../../models/GatewayConfiguration';\n\nfunction initStripeAfterPayMethod(): StripeGateway {\n\tconst config: GatewayConfiguration = {\n\t\tname: getLocaleTitle(),\n\t\tgatewayId: 'peachpay_stripe_afterpay',\n\t\tdescription: getLocaleText('After selecting pay you will be redirected to complete your payment.'),\n\t\tassets: {\n\t\t\ttitle: {src: getLocaleImage()},\n\t\t\tbadge: {src: imageBadge},\n\t\t},\n\t};\n\n\twindow.addEventListener('pp-update-afterpay-branding', async () => {\n\t\tconst afterpayLocale = updateAfterpayBranding();\n\n\t\tconfig.name = afterpayLocale.name;\n\t\tif (config.assets.title) {\n\t\t\tconfig.assets.title.src = afterpayLocale.titleImage.length\n\t\t\t\t? afterpayLocale.titleImage : config.assets.title.src;\n\t\t}\n\t});\n\n\treturn {\n\t\tconfig,\n\t\tasync tokenize(context) {\n\t\t\tconst {stripe} = context;\n\n\t\t\tconst {paymentMethod, error} = await stripe.createPaymentMethod({\n\t\t\t\ttype: 'afterpay_clearpay',\n\t\t\t\tbilling_details: PeachPayCustomer.stripeBillingDetails(),\n\t\t\t});\n\n\t\t\tif (error) {\n\t\t\t\tconst message = error.message ?? 'Failed to tokenize payment method.';\n\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: message,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (!paymentMethod?.id) {\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: 'Failed to tokenize payment method.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\treturn [paymentMethod.id, {}];\n\t\t},\n\t\tasync confirm(context: IStripeContext, clientSecret: string, intermediateURL: string) {\n\t\t\tconst {stripe} = context;\n\n\t\t\tconst {paymentIntent, error} = await stripe.confirmAfterpayClearpayPayment(clientSecret, {return_url: intermediateURL});\n\n\t\t\tif (error) {\n\t\t\t\tconst message = error.message ?? 'Failed to confirm payment.';\n\t\t\t\treturn [null, {\n\t\t\t\t\tnote: message,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (paymentIntent) {\n\t\t\t\treturn ['success', {}];\n\t\t\t}\n\n\t\t\treturn [null, {}];\n\t\t},\n\t};\n}\n\nfunction getLocaleTitle(countryOverride: string | null = null): string {\n\tconst title = Feature.metadata<string>(FeatureFlag.STRIPE_AFTERPAY_GATEWAY, 'title');\n\tif (title && !(title === 'Afterpay' || title === 'Clearpay')) {\n\t\treturn title;\n\t}\n\n\tif (countryOverride) {\n\t\treturn countryOverride;\n\t}\n\n\tlet country: string | undefined = PeachPayCustomer.billing.country();\n\tif (!country && MerchantConfiguration.general.wcLocationInfoData) {\n\t\tcountry = MerchantConfiguration.general.wcLocationInfoData()?.store_country;\n\t}\n\n\tswitch (country) {\n\t\tcase 'GB':\n\t\tcase 'ES':\n\t\tcase 'FR':\n\t\tcase 'IT': {\n\t\t\treturn 'Clearpay';\n\t\t}\n\n\t\tdefault: {\n\t\t\treturn 'Afterpay';\n\t\t}\n\t}\n}\n\nfunction getLocaleImage(countryOverride: string | null = null): string {\n\tif (countryOverride) {\n\t\treturn countryOverride;\n\t}\n\n\tlet country: string | undefined = PeachPayCustomer.billing.country();\n\tif (!country && MerchantConfiguration.general.wcLocationInfoData) {\n\t\tcountry = MerchantConfiguration.general.wcLocationInfoData()?.store_country;\n\t}\n\n\tswitch (country) {\n\t\tcase 'GB':\n\t\tcase 'ES':\n\t\tcase 'FR':\n\t\tcase 'IT': {\n\t\t\treturn clearpayImageURL;\n\t\t}\n\n\t\tdefault: {\n\t\t\treturn afterpayImageURL;\n\t\t}\n\t}\n}\n\nfunction updateAfterpayBranding(countryOverride: string | null = null): {name: string; titleImage: string} {\n\tconst title = getLocaleTitle(countryOverride);\n\n\t$qs('#pp-pms-new .pp-pm-type[data-gateway=\"peachpay_stripe_afterpay\"] > span', el => {\n\t\tel.innerHTML = title;\n\t});\n\t$qs('#pp-pms-new .pp-pm-more li[data-gateway=\"peachpay_stripe_afterpay\"] > span', el => {\n\t\tel.innerHTML = title;\n\t});\n\n\tconst imageURL = getLocaleImage(countryOverride);\n\n\treturn {\n\t\tname: title,\n\t\ttitleImage: imageURL,\n\t};\n}\n\nexport {initStripeAfterPayMethod};\n","import {type PaymentRequestOptions, type PaymentRequestUpdateOptions, type PaymentRequest, type PaymentRequestPaymentMethodEvent} from '@stripe/stripe-js';\nimport {FeatureFlag} from '../../../../@type/features';\nimport {type TokenResult} from '../../../../@type/stripe';\nimport {Feature} from '../../reducers/environmentReducer';\nimport {MerchantConfiguration} from '../../reducers/merchantConfigurationReducer';\nimport {store} from '../../store';\nimport {getLocaleText} from '../../util/translation';\n\nconst SUPPORTED_ZERO_DECIMAL_CURRENCIES = [\n\t'BIF',\n\t'CLP',\n\t'DJF',\n\t'GNF',\n\t'JPY',\n\t'KMF',\n\t'KRW',\n\t'MGA',\n\t'PYG',\n\t'RWF',\n\t'UGX',\n\t'VND',\n\t'VUV',\n\t'XAF',\n\t'XOF',\n\t'XPF',\n];\n\nfunction createPaymentRequestOptions(): PaymentRequestOptions {\n\tconst {cart} = store.getState().calculatedCarts[0];\n\tconst {summary} = store.getState().calculatedCarts[0];\n\n\tconst data: PaymentRequestOptions = {\n\t\tcountry: Feature.metadata<string>(FeatureFlag.STRIPE_GATEWAYS, 'country') ?? 'US',\n\t\tcurrency: MerchantConfiguration.currency.code().toLowerCase(),\n\t\ttotal: {\n\t\t\tlabel: getLocaleText('Total'),\n\t\t\tamount: formatCurrency(summary.total, MerchantConfiguration.currency.code()),\n\t\t},\n\t\tdisplayItems: cart.map(l => ({\n\t\t\tlabel: l.name,\n\t\t\tamount: formatCurrency(Number.parseFloat(l.total) * Number.parseInt(l.quantity, 10), MerchantConfiguration.currency.code()),\n\t\t})),\n\t};\n\n\treturn data;\n}\n\nfunction updatePaymentRequestOptions(): PaymentRequestUpdateOptions {\n\tconst {cart} = store.getState().calculatedCarts[0];\n\tconst {summary} = store.getState().calculatedCarts[0];\n\n\tconst data: PaymentRequestUpdateOptions = {\n\t\tcurrency: MerchantConfiguration.currency.code().toLowerCase(),\n\t\ttotal: {\n\t\t\tlabel: getLocaleText('Total'),\n\t\t\tamount: formatCurrency(summary.total, MerchantConfiguration.currency.code()),\n\t\t},\n\t\tdisplayItems: cart.map(l => ({\n\t\t\tlabel: l.name,\n\t\t\tamount: formatCurrency(Number.parseFloat(l.total) * Number.parseInt(l.quantity, 10), MerchantConfiguration.currency.code()),\n\t\t})),\n\t};\n\n\treturn data;\n}\n\nfunction tokenizePaymentRequest(paymentRequest: PaymentRequest | null): Promise<TokenResult> | TokenResult {\n\treturn new Promise(resolve => {\n\t\tpaymentRequest?.on('paymentmethod', (event: PaymentRequestPaymentMethodEvent) => {\n\t\t\tpaymentRequest = null;\n\n\t\t\tevent.complete('success');\n\t\t\tresolve([event.paymentMethod.id, {}]);\n\t\t});\n\n\t\tpaymentRequest?.on('cancel', () => {\n\t\t\tpaymentRequest = null;\n\t\t\tresolve([null, {\n\t\t\t\tnote: 'Payment was canceled by customer',\n\t\t\t}]);\n\t\t});\n\n\t\tpaymentRequest?.show();\n\t});\n}\n\nfunction formatCurrency(amount: string | number, currencyCode: string): number {\n\tlet total = Number.parseFloat(String(amount));\n\n\tif (!SUPPORTED_ZERO_DECIMAL_CURRENCIES.includes(currencyCode)) {\n\t\ttotal *= 100;\n\t}\n\n\treturn Math.round(total);\n}\n\nexport {createPaymentRequestOptions, tokenizePaymentRequest, updatePaymentRequestOptions};\n","import {loadStripe} from '@stripe/stripe-js';\nimport {$qsAll} from '../../../../@shared/ts/dom';\nimport {FeatureFlag} from '../../../../@type/features';\nimport {type PaymentData} from '../../../../@type/stripe';\nimport {checkRequiredFields} from '../../features/additionalFields';\nimport {updateCustomerDataInBrowser} from '../../features/customer';\nimport {type IStripeContext, type StripeGateway} from '../../models/stripe';\nimport {Feature, startModalProcessing, stopModalLoading} from '../../reducers/environmentReducer';\nimport {PaymentConfiguration, registerGatewayBatch} from '../../reducers/paymentConfigurationReducer';\nimport {updateCustomerPreferredGateway} from '../../reducers/peachPayCustomerReducer';\nimport {PeachPayOrder} from '../../reducers/peachPayOrderReducer';\nimport {store} from '../../store';\nimport {clearLocalSession} from '../session';\nimport {setupStripeButton} from './button';\nimport {initStripeACHDebitMethod} from './gateways/achDebit';\nimport {initStripeAffirmMethod} from './gateways/affirm';\nimport {initStripeAfterPayMethod} from './gateways/afterpay';\nimport {initStripeApplepayMethod} from './gateways/applepay';\nimport {initStripeBancontactMethod} from './gateways/bancontact';\nimport {initStripeCardMethod} from './gateways/card';\nimport {initStripeEPSMethod} from './gateways/eps';\nimport {initStripeGiropayMethod} from './gateways/giropay';\nimport {initStripeGooglepayMethod} from './gateways/googlepay';\nimport {initStripeIdealMethod} from './gateways/ideal';\nimport {initStripeKlarnaMethod} from './gateways/klarna';\nimport {initStripeP24Method} from './gateways/p24';\nimport {initStripeSepaDebitMethod} from './gateways/sepaDebit';\nimport {initStripeSofortMethod} from './gateways/sofort';\nimport {displayPaymentErrorMessage, requestCartCalculation, type OrderService} from '../order';\nimport {type GatewayConfiguration} from '../../models/GatewayConfiguration';\nimport {getErrorString} from '../../../../@shared/ts/error';\nimport {getLocaleText} from '../../util/translation';\n\nexport default async function initStripePaymentIntegration(orderService: OrderService) {\n\tconst publicKey = Feature.metadata<string>(FeatureFlag.STRIPE_GATEWAYS, 'public_key');\n\tconst connectId = Feature.metadata<string>(FeatureFlag.STRIPE_GATEWAYS, 'connect_id');\n\n\tif (!publicKey || !connectId) {\n\t\treturn;\n\t}\n\n\tconst stripe = await loadStripe(publicKey, {stripeAccount: connectId, locale: 'auto'});\n\tif (!stripe) {\n\t\treturn;\n\t}\n\n\tconst elements = stripe.elements();\n\n\tconst context: IStripeContext = {\n\t\tstripe,\n\t\telements,\n\t};\n\n\t// Internal Payment Methods\n\tconst gateways = registerStripeGateways();\n\tawait activateStripeGateways(context, gateways, orderService);\n\tsetupStripeButton();\n}\n\n/**\n * Sets up each stripe payment gateway\n */\nfunction registerStripeGateways(): Record<string, StripeGateway> {\n\tconst gatewayImplementations: Record<string, StripeGateway> = {};\n\tconst gatewayConfigurations: Record<string, GatewayConfiguration> = {};\n\n\tif (Feature.enabled(FeatureFlag.STRIPE_CARD_GATEWAY)) {\n\t\tconst method = initStripeCardMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tif (Feature.enabled(FeatureFlag.STRIPE_AFFIRM_GATEWAY)) {\n\t\tconst method = initStripeAffirmMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tif (Feature.enabled(FeatureFlag.STRIPE_KLARNA_GATEWAY)) {\n\t\tconst method = initStripeKlarnaMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tif (Feature.enabled(FeatureFlag.STRIPE_AFTERPAY_GATEWAY)) {\n\t\tconst method = initStripeAfterPayMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tif (Feature.enabled(FeatureFlag.STRIPE_SOFORT_GATEWAY)) {\n\t\tconst method = initStripeSofortMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tif (Feature.enabled(FeatureFlag.STRIPE_ACHDEBIT_GATEWAY)) {\n\t\tconst method = initStripeACHDebitMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tif (Feature.enabled(FeatureFlag.STRIPE_EPS_GATEWAY)) {\n\t\tconst method = initStripeEPSMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tif (Feature.enabled(FeatureFlag.STRIPE_P24_GATEWAY)) {\n\t\tconst method = initStripeP24Method();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tif (Feature.enabled(FeatureFlag.STRIPE_SEPADEBIT_GATEWAY)) {\n\t\tconst method = initStripeSepaDebitMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tif (Feature.enabled(FeatureFlag.STRIPE_BANCONTACT_GATEWAY)) {\n\t\tconst method = initStripeBancontactMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tif (Feature.enabled(FeatureFlag.STRIPE_GIROPAY_GATEWAY)) {\n\t\tconst method = initStripeGiropayMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tif (Feature.enabled(FeatureFlag.STRIPE_IDEAL_GATEWAY)) {\n\t\tconst method = initStripeIdealMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tif (Feature.enabled(FeatureFlag.STRIPE_APPLEPAY_GATEWAY)) {\n\t\tconst method = initStripeApplepayMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tif (Feature.enabled(FeatureFlag.STRIPE_GOOGLEPAY_GATEWAY)) {\n\t\tconst method = initStripeGooglepayMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tstore.dispatch(registerGatewayBatch(gatewayConfigurations));\n\n\treturn gatewayImplementations;\n}\n\nasync function activateStripeGateways(context: IStripeContext, gateways: Record<string, StripeGateway>, orderService: OrderService) {\n\tconst activations = [];\n\tfor (const [_, method] of Object.entries(gateways)) {\n\t\tif (method.init) {\n\t\t\tactivations.push(method.init(context));\n\t\t}\n\t}\n\n\tawait Promise.all(activations);\n\n\tconst confirm = (event: MouseEvent) => {\n\t\tconst requiredFieldsVerification = checkRequiredFields();\n\t\tif (!requiredFieldsVerification) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst $target = event.target as HTMLElement | null;\n\t\tconst $button = $target?.closest<HTMLButtonElement>('button');\n\t\tif (!$button) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst gatewayId = PaymentConfiguration.selectedGateway();\n\t\tconst gateway = gateways[gatewayId];\n\t\tif (!gateway) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn paymentFlow(context, gateway, orderService);\n\t};\n\n\t$qsAll<HTMLElement>('.stripe-btn', $el => {\n\t\t$el.addEventListener('click', event => confirm(event));\n\t});\n}\n\nasync function paymentFlow(context: IStripeContext, gateway: StripeGateway, orderService: OrderService): Promise<void> {\n\tstore.dispatch(startModalProcessing());\n\n\tconst [paymentId, update] = await gateway.tokenize(context, PeachPayOrder.sessionId());\n\n\tif (!paymentId && update.note) {\n\t\tdisplayPaymentErrorMessage(update.note ?? '');\n\t}\n\n\tconst {error: transactionError, result: transaction} = await orderService.startTransaction(gateway.config.gatewayId);\n\tif (transactionError || !transaction) {\n\t\tconst errorMessage = transactionError ? getErrorString(transactionError) : getLocaleText('An unknown error occured while starting the transaction. Please refresh the page and try again.');\n\t\tdisplayPaymentErrorMessage(errorMessage);\n\n\t\tstore.dispatch(stopModalLoading());\n\t\treturn;\n\t}\n\n\tif (!paymentId) {\n\t\tawait transaction.complete(update);\n\t\tstore.dispatch(stopModalLoading());\n\t\treturn;\n\t}\n\n\tconst {error: orderError, result: orderResult} = await orderService.placeOrder(transaction, {\n\t\tpeachpay_stripe_payment_method_id: paymentId,\n\t});\n\n\tif (orderError || !orderResult || orderResult.result !== 'success') {\n\t\tstore.dispatch(stopModalLoading());\n\t\treturn;\n\t}\n\n\tconst dataURL = new URL(orderResult.redirect);\n\n\tif (dataURL.hash === '') {\n\t\tawait transaction.complete();\n\n\t\tstore.dispatch(updateCustomerPreferredGateway(PaymentConfiguration.selectedGateway()));\n\n\t\tupdateCustomerDataInBrowser();\n\t\tclearLocalSession();\n\n\t\t// @ts-expect-error: window.top is always existent\n\t\twindow.top.location.href = dataURL;\n\t}\n\n\tconst [name, data] = dataURL.hash.split('=');\n\tif (name !== '#payment_data' || !data) {\n\t\tawait transaction.complete();\n\n\t\t// Any failure after an order risks invalid nonces in the case of a user being logged in. To prevent\n\t\t// possible problems we will get a new cart calculation.\n\t\tawait requestCartCalculation();\n\n\t\tstore.dispatch(stopModalLoading());\n\t\treturn;\n\t}\n\n\tconst paymentData = JSON.parse(atob(decodeURIComponent(data))) as PaymentData;\n\n\tconst clientSecret = paymentData.data.client_secret;\n\tconst intermediateURL = paymentData.intermediate_url;\n\tconst successURL = paymentData.success_url;\n\n\ttry {\n\t\tconst [status, update] = await gateway.confirm(context, clientSecret, intermediateURL);\n\n\t\tif (status !== 'success') {\n\t\t\tif (update.note) {\n\t\t\t\tdisplayPaymentErrorMessage(update.note ?? '');\n\t\t\t}\n\n\t\t\tawait transaction.complete(update);\n\t\t\t// Any failure after an order risks invalid nonces in the case of a user being logged in. To prevent\n\t\t\t// possible problems we will get a new cart calculation.\n\t\t\tawait requestCartCalculation();\n\n\t\t\tstore.dispatch(stopModalLoading());\n\t\t\treturn;\n\t\t}\n\n\t\tstore.dispatch(updateCustomerPreferredGateway(PaymentConfiguration.selectedGateway()));\n\n\t\tupdateCustomerDataInBrowser();\n\t\tclearLocalSession();\n\n\t\t// @ts-expect-error: window.top is always existent\n\t\twindow.top.location.href = successURL;\n\t} catch (error) {\n\t\tif (error instanceof Error) {\n\t\t\tawait transaction.complete({\n\t\t\t\tnote: error.message,\n\t\t\t\tpaymentStatus: 'failed',\n\t\t\t});\n\t\t}\n\n\t\t// Any failure after an order risks invalid nonces in the case of a user being logged in. To prevent\n\t\t// possible problems we will get a new cart calculation.\n\t\tawait requestCartCalculation();\n\n\t\tstore.dispatch(stopModalLoading());\n\t}\n}\n","import {$qsAll} from '../../../../../@shared/ts/dom';\nimport {type TokenResult, type ConfirmResult} from '../../../../../@type/stripe';\nimport {type GatewayConfiguration} from '../../../models/GatewayConfiguration';\nimport {type StripeGateway, type IStripeContext} from '../../../models/stripe';\nimport {Feature} from '../../../reducers/environmentReducer';\nimport {PeachPayCustomer} from '../../../reducers/peachPayCustomerReducer';\nimport {DefaultCart} from '../../../reducers/cartReducer';\nimport {getLocaleText} from '../../../util/translation';\nimport {createSetupIntent} from '../setup-intent';\nimport cardBadgeURL from '../../../../img/badge/card.svg';\nimport cardImageURL from '../../../../img/marks/credit-card-regular.svg';\nimport {FeatureFlag} from '../../../../../@type/features';\n\nfunction initStripeCardMethod(): StripeGateway {\n\tconst config: GatewayConfiguration = {\n\t\tgatewayId: 'peachpay_stripe_card',\n\t\tname: Feature.metadata<string>(FeatureFlag.STRIPE_CARD_GATEWAY, 'title') ?? getLocaleText('Card'),\n\t\tdescription: '', // Not applicable\n\t\tassets: {\n\t\t\ttitle: {src: cardImageURL},\n\t\t\tbadge: {src: cardBadgeURL},\n\t\t},\n\t};\n\n\treturn {\n\t\tconfig,\n\t\tinit(context: IStripeContext) {\n\t\t\tconst {elements} = context;\n\n\t\t\tconst style = {\n\t\t\t\tbase: {\n\t\t\t\t\tcolor: '#333',\n\t\t\t\t\tfontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\n\t\t\t\t\tfontSmoothing: 'antialiased',\n\t\t\t\t\tfontSize: '18px',\n\t\t\t\t\t'::placeholder': {\n\t\t\t\t\t\tcolor: '#999',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tinvalid: {\n\t\t\t\t\tcolor: '#fa755a',\n\t\t\t\t\ticonColor: '#fa755a',\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst cardElement = elements.create('card', {style, hidePostalCode: false});\n\t\t\t$qsAll('div.pp-pm-saved-option[data-gateway=\"peachpay_stripe_card\"]', $el => {\n\t\t\t\t$el.innerHTML = '';\n\t\t\t});\n\n\t\t\tcardElement.mount('#pp-pms-new div.pp-pm-saved-option[data-gateway=\"peachpay_stripe_card\"]');\n\t\t},\n\t\tasync tokenize(context: IStripeContext, sessionId: string): Promise<TokenResult> {\n\t\t\tconst {stripe, elements} = context;\n\n\t\t\tconst $card = elements.getElement('card');\n\t\t\tif (!$card) {\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: 'Failed to locate valid card element.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tconst {paymentMethod, error} = await stripe.createPaymentMethod({\n\t\t\t\ttype: 'card',\n\t\t\t\tcard: $card,\n\t\t\t\tbilling_details: PeachPayCustomer.stripeBillingDetails(),\n\t\t\t});\n\n\t\t\tif (error) {\n\t\t\t\tconst message = error.message ?? 'Failed to tokenize payment method.';\n\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: message,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (!paymentMethod?.id) {\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: 'Failed to tokenize payment method.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\t// Check for a cart total of 0. If it's more than zero, we do not need setupIntent.\n\t\t\t// See https://www.notion.so/peachpay/Stripe-3D-Secure-card-payments-sometimes-fail-01fae4e0b8694e3680f8d6f6733770df.\n\t\t\tif (DefaultCart.total() > 0) {\n\t\t\t\treturn [paymentMethod.id, {}];\n\t\t\t}\n\n\t\t\tconst clientSecret = await createSetupIntent(sessionId, 'card', paymentMethod.id);\n\t\t\tif (!clientSecret) {\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: 'Failed to create setup intent.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tconst {error: confirmError, setupIntent: confirmIntent} = await stripe.confirmCardSetup(clientSecret);\n\t\t\tif (!confirmIntent || confirmError) {\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: confirmError?.message ?? 'Failed to confirm setup intent.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (confirmIntent.status !== 'succeeded') {\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: `Setup intent resulted in invalid status(${confirmIntent.status})`,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\treturn [confirmIntent.payment_method as string, {}];\n\t\t},\n\t\tasync confirm(context: IStripeContext, clientSecret: string): Promise<ConfirmResult> {\n\t\t\tconst {stripe} = context;\n\t\t\tconst {paymentIntent, error} = await stripe.retrievePaymentIntent(clientSecret);\n\n\t\t\tif (!paymentIntent || error) {\n\t\t\t\tconst message = error?.message ?? 'Failed to retrieve payment intent.';\n\t\t\t\treturn [null, {\n\t\t\t\t\tnote: message,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (paymentIntent.status === 'succeeded' || paymentIntent.status === 'requires_capture') {\n\t\t\t\treturn ['success', {}];\n\t\t\t}\n\n\t\t\tif (paymentIntent.status === 'requires_action') {\n\t\t\t\tconst {paymentIntent, error} = await stripe.confirmCardPayment(clientSecret);\n\t\t\t\tif (!paymentIntent || error) {\n\t\t\t\t\tconst message = error?.message ?? 'Failed to confirm payment intent.';\n\t\t\t\t\treturn [null, {\n\t\t\t\t\t\tnote: message,\n\t\t\t\t\t}];\n\t\t\t\t}\n\n\t\t\t\tif (paymentIntent.status === 'succeeded' || paymentIntent.status === 'requires_capture') {\n\t\t\t\t\treturn ['success', {}];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn [null, {\n\t\t\t\tnote: `Failed to confirm payment intent with status(${paymentIntent.status})`,\n\t\t\t}];\n\t\t},\n\t};\n}\n\nexport {initStripeCardMethod};\n","import {type StripeGateway, type IStripeContext} from '../../../models/stripe';\nimport {PeachPayCustomer} from '../../../reducers/peachPayCustomerReducer';\nimport {getLocaleText} from '../../../util/translation';\nimport affirmImageURL from '../../../../img/marks/affirm.svg';\nimport {Feature} from '../../../reducers/environmentReducer';\nimport {FeatureFlag} from '../../../../../@type/features';\nimport affirmBadgeURL from '../../../../img/badge/affirm.svg';\n\nfunction initStripeAffirmMethod(): StripeGateway {\n\treturn {\n\t\tconfig: {\n\t\t\tname: Feature.metadata<string>(FeatureFlag.STRIPE_AFFIRM_GATEWAY, 'title') ?? 'Affirm',\n\t\t\tgatewayId: 'peachpay_stripe_affirm',\n\t\t\tdescription: getLocaleText('After selecting pay you will be redirected to complete your payment.'),\n\t\t\tassets: {\n\t\t\t\ttitle: {src: affirmImageURL},\n\t\t\t\tbadge: {src: affirmBadgeURL},\n\t\t\t},\n\t\t},\n\t\tasync tokenize(context) {\n\t\t\tconst {stripe} = context;\n\n\t\t\tconst {paymentMethod, error} = await stripe.createPaymentMethod({\n\t\t\t\ttype: 'affirm',\n\t\t\t\tbilling_details: PeachPayCustomer.stripeBillingDetails(),\n\t\t\t});\n\n\t\t\tif (error) {\n\t\t\t\tconst message = error.message ?? 'Failed to tokenize payment method.';\n\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: message,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (!paymentMethod?.id) {\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: 'Failed to tokenize payment method.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\treturn [paymentMethod.id, {}];\n\t\t},\n\t\tasync confirm(context: IStripeContext, clientSecret: string, intermediateURL: string) {\n\t\t\tconst {stripe} = context;\n\n\t\t\tconst {paymentIntent, error} = await stripe.confirmAffirmPayment(clientSecret, {return_url: intermediateURL});\n\n\t\t\tif (error) {\n\t\t\t\tconst message = error.message ?? 'Failed to confirm payment.';\n\t\t\t\treturn [null, {\n\t\t\t\t\tnote: message,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (paymentIntent) {\n\t\t\t\treturn ['success', {}];\n\t\t\t}\n\n\t\t\treturn [null, {}];\n\t\t},\n\t};\n}\n\nexport {initStripeAffirmMethod};\n","import {type CreatePaymentMethodKlarnaData} from '@stripe/stripe-js';\nimport {type StripeGateway, type IStripeContext} from '../../../models/stripe';\nimport {PeachPayCustomer} from '../../../reducers/peachPayCustomerReducer';\nimport {getLocaleText} from '../../../util/translation';\nimport klarnaBadgeURL from '../../../../img/badge/klarna.svg';\nimport klarnaImageURL from '../../../../img/marks/klarna.svg';\nimport {Feature} from '../../../reducers/environmentReducer';\nimport {FeatureFlag} from '../../../../../@type/features';\n\nfunction initStripeKlarnaMethod(): StripeGateway {\n\treturn {\n\t\tconfig: {\n\t\t\tname: Feature.metadata<string>(FeatureFlag.STRIPE_KLARNA_GATEWAY, 'title') ?? 'Klarna',\n\t\t\tgatewayId: 'peachpay_stripe_klarna',\n\t\t\tdescription: getLocaleText('After selecting pay you will be redirected to complete your payment.'),\n\t\t\tassets: {\n\t\t\t\ttitle: {src: klarnaImageURL},\n\t\t\t\tbadge: {src: klarnaBadgeURL},\n\t\t\t},\n\t\t},\n\t\tasync tokenize(context) {\n\t\t\tconst {stripe} = context;\n\n\t\t\tconst {paymentMethod, error} = await stripe.createPaymentMethod({\n\t\t\t\ttype: 'klarna',\n\t\t\t\tbilling_details: PeachPayCustomer.stripeBillingDetails(),\n\t\t\t} as CreatePaymentMethodKlarnaData);\n\n\t\t\tif (error) {\n\t\t\t\tconst message = error.message ?? 'Failed to tokenize payment method.';\n\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: message,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (!paymentMethod?.id) {\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: 'Failed to tokenize payment method.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\treturn [paymentMethod.id, {}];\n\t\t},\n\t\tasync confirm(context: IStripeContext, clientSecret: string, intermediateURL: string) {\n\t\t\tconst {stripe} = context;\n\n\t\t\tconst {paymentIntent, error} = await stripe.confirmKlarnaPayment(clientSecret, {return_url: intermediateURL});\n\n\t\t\tif (error) {\n\t\t\t\tconst message = error.message ?? 'Failed to confirm payment.';\n\t\t\t\treturn [null, {\n\t\t\t\t\tnote: message,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (paymentIntent) {\n\t\t\t\treturn ['success', {}];\n\t\t\t}\n\n\t\t\treturn [null, {}];\n\t\t},\n\t};\n}\n\nexport {initStripeKlarnaMethod};\n","import {type StripeGateway, type IStripeContext} from '../../../models/stripe';\nimport {PeachPayCustomer} from '../../../reducers/peachPayCustomerReducer';\nimport {getLocaleText} from '../../../util/translation';\nimport sofortBadgeURL from '../../../../img/badge/klarna.svg';\nimport {Feature} from '../../../reducers/environmentReducer';\nimport {FeatureFlag} from '../../../../../@type/features';\n\nfunction initStripeSofortMethod(): StripeGateway {\n\treturn {\n\t\tconfig: {\n\t\t\tname: Feature.metadata<string>(FeatureFlag.STRIPE_SOFORT_GATEWAY, 'title') ?? 'Sofort',\n\t\t\tgatewayId: 'peachpay_stripe_sofort',\n\t\t\tdescription: getLocaleText('After selecting <b>Pay</b> you will be redirected to complete your payment.'),\n\t\t\tassets: {\n\t\t\t\ttitle: {src: sofortBadgeURL},\n\t\t\t\tbadge: {src: sofortBadgeURL},\n\t\t\t},\n\t\t},\n\t\tasync tokenize(context) {\n\t\t\tconst {stripe} = context;\n\n\t\t\tconst {error, paymentMethod} = await stripe.createPaymentMethod({\n\t\t\t\ttype: 'sofort',\n\t\t\t\tsofort: {\n\t\t\t\t\tcountry: PeachPayCustomer.billing.country(),\n\t\t\t\t},\n\t\t\t\tbilling_details: PeachPayCustomer.stripeBillingDetails(),\n\t\t\t});\n\n\t\t\tif (error) {\n\t\t\t\tconst message = error.message ?? 'Failed to tokenize payment method.';\n\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: message,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (!paymentMethod?.id) {\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: 'Failed to tokenize payment method.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\treturn [paymentMethod.id, {}];\n\t\t},\n\t\tasync confirm(context: IStripeContext, clientSecret: string, intermediateURL: string) {\n\t\t\tconst {stripe} = context;\n\n\t\t\tconst {paymentIntent, error} = await stripe.confirmSofortPayment(clientSecret, {return_url: intermediateURL});\n\n\t\t\tif (error) {\n\t\t\t\tconst message = error.message ?? 'Failed to confirm payment.';\n\t\t\t\treturn [null, {\n\t\t\t\t\tnote: message,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (paymentIntent) {\n\t\t\t\treturn ['success', {}];\n\t\t\t}\n\n\t\t\treturn [null, {}];\n\t\t},\n\t};\n}\n\nexport {initStripeSofortMethod};\n","import {type CreatePaymentMethodEpsData} from '@stripe/stripe-js';\nimport {type IStripeContext, type StripeGateway} from '../../../models/stripe';\nimport {PeachPayCustomer} from '../../../reducers/peachPayCustomerReducer';\nimport {getLocaleText} from '../../../util/translation';\nimport epsBadgeURL from '../../../../img/badge/eps.svg';\nimport epsImageURL from '../../../../img/marks/eps.svg';\nimport {Feature} from '../../../reducers/environmentReducer';\nimport {FeatureFlag} from '../../../../../@type/features';\n\nfunction initStripeEPSMethod(): StripeGateway {\n\treturn {\n\t\tconfig: {\n\t\t\tname: Feature.metadata<string>(FeatureFlag.STRIPE_EPS_GATEWAY, 'title') ?? 'EPS',\n\t\t\tgatewayId: 'peachpay_stripe_eps',\n\t\t\tdescription: getLocaleText('After selecting <b>Pay</b> you will be redirected to complete your payment.'),\n\t\t\tassets: {\n\t\t\t\ttitle: {src: epsImageURL},\n\t\t\t\tbadge: {src: epsBadgeURL},\n\t\t\t},\n\t\t},\n\t\tasync tokenize(context) {\n\t\t\tconst {stripe} = context;\n\n\t\t\tconst {paymentMethod, error} = await stripe.createPaymentMethod({\n\t\t\t\ttype: 'eps',\n\t\t\t\tbilling_details: PeachPayCustomer.stripeBillingDetails(),\n\t\t\t} as CreatePaymentMethodEpsData);\n\n\t\t\tif (error) {\n\t\t\t\tconst message = error.message ?? 'Failed to tokenize payment method.';\n\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: message,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (!paymentMethod?.id) {\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: 'Failed to tokenize payment method.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\treturn [paymentMethod.id, {}];\n\t\t},\n\t\tasync confirm(context: IStripeContext, clientSecret: string, intermediateURL: string) {\n\t\t\tconst {stripe} = context;\n\n\t\t\tconst {paymentIntent, error} = await stripe.confirmEpsPayment(clientSecret, {return_url: intermediateURL});\n\n\t\t\tif (error) {\n\t\t\t\tconst message = error.message ?? 'Failed to confirm payment.';\n\t\t\t\treturn [null, {\n\t\t\t\t\tnote: message,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (paymentIntent) {\n\t\t\t\treturn ['success', {}];\n\t\t\t}\n\n\t\t\treturn [null, {}];\n\t\t},\n\t};\n}\n\nexport {initStripeEPSMethod};\n","import {type CreatePaymentMethodP24Data} from '@stripe/stripe-js';\nimport {type StripeGateway, type IStripeContext} from '../../../models/stripe';\nimport {PeachPayCustomer} from '../../../reducers/peachPayCustomerReducer';\nimport {getLocaleText} from '../../../util/translation';\nimport p24BadgeURL from '../../../../img/badge/p24.svg';\nimport p24ImageURL from '../../../../img/marks/p24.svg';\nimport {Feature} from '../../../reducers/environmentReducer';\nimport {FeatureFlag} from '../../../../../@type/features';\n\nfunction initStripeP24Method(): StripeGateway {\n\treturn {\n\t\tconfig: {\n\t\t\tname: Feature.metadata<string>(FeatureFlag.STRIPE_P24_GATEWAY, 'title') ?? 'Przelewy24',\n\t\t\tgatewayId: 'peachpay_stripe_p24',\n\t\t\tdescription: getLocaleText('After selecting <b>Pay</b> you will be redirected to complete your payment.'),\n\t\t\tassets: {\n\t\t\t\ttitle: {src: p24ImageURL},\n\t\t\t\tbadge: {src: p24BadgeURL},\n\t\t\t},\n\t\t},\n\t\tasync tokenize(context) {\n\t\t\tconst {stripe} = context;\n\n\t\t\tconst {paymentMethod, error} = await stripe.createPaymentMethod({\n\t\t\t\ttype: 'p24',\n\t\t\t\tbilling_details: PeachPayCustomer.stripeBillingDetails(),\n\t\t\t} as unknown as CreatePaymentMethodP24Data);\n\n\t\t\tif (error) {\n\t\t\t\tconst message = error.message ?? 'Failed to tokenize payment method.';\n\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: message,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (!paymentMethod?.id) {\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: 'Failed to tokenize payment method.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\treturn [paymentMethod.id, {}];\n\t\t},\n\t\tasync confirm(context: IStripeContext, clientSecret: string, intermediateURL: string) {\n\t\t\tconst {stripe} = context;\n\n\t\t\tconst {paymentIntent, error} = await stripe.confirmP24Payment(clientSecret, {return_url: intermediateURL});\n\n\t\t\tif (error) {\n\t\t\t\tconst message = error.message ?? 'Failed to confirm payment.';\n\t\t\t\treturn [null, {\n\t\t\t\t\tnote: message,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (paymentIntent) {\n\t\t\t\treturn ['success', {}];\n\t\t\t}\n\n\t\t\treturn [null, {}];\n\t\t},\n\t};\n}\n\nexport {initStripeP24Method};\n","import {$qsAll} from '../../../../../@shared/ts/dom';\nimport {type StripeGateway, type IStripeContext} from '../../../models/stripe';\nimport {type CreatePaymentMethodSepaDebitData} from '@stripe/stripe-js';\nimport {PeachPayCustomer} from '../../../reducers/peachPayCustomerReducer';\nimport {getLocaleText} from '../../../util/translation';\nimport bankImageURL from '../../../../img/marks/bank.svg';\nimport {FeatureFlag} from '../../../../../@type/features';\nimport {Feature} from '../../../reducers/environmentReducer';\nimport {MerchantConfiguration} from '../../../reducers/merchantConfigurationReducer';\nimport {createSetupIntent} from '../setup-intent';\nimport {DefaultCart} from '../../../reducers/cartReducer';\nimport {type ConfirmResult} from '../../../../../@type/stripe';\n\n// https://stripe.com/docs/payments/sepa-debit/accept-a-payment\nfunction initStripeSepaDebitMethod(): StripeGateway {\n\tconst sepaDebitDescription = /* html */ `<p style=\"margin: 0;font-size: smaller; text-align: justify\">${getLocaleText('After clicking <b>Pay</b> your payment will be submitted immediately.')}</p>\n\t<hr><p class=\"muted\" style=\"margin: 0;\">${getLocaleText('Payments typically take 5 days to complete.')}\n\t${getLocaleText('By providing your IBAN and confirming this payment, you are authorizing ') + MerchantConfiguration.name() + getLocaleText(' and Stripe, our payment service provider, to send instructions to your bank to debit your account and your bank to debit your account in accordance with those instructions. You are entitled to a refund from your bank under the terms and conditions of your agreement with your bank. A refund must be claimed within 8 weeks starting from the date on which your account was debited.')}</p>`;\n\n\treturn {\n\t\tconfig: {\n\t\t\tname: Feature.metadata<string>(FeatureFlag.STRIPE_SEPADEBIT_GATEWAY, 'title') ?? getLocaleText('SEPA Debit'),\n\t\t\tdescription: sepaDebitDescription,\n\t\t\tgatewayId: 'peachpay_stripe_sepadebit',\n\t\t\tassets: {\n\t\t\t\ttitle: {src: bankImageURL},\n\t\t\t\tbadge: {src: bankImageURL},\n\t\t\t},\n\t\t},\n\t\tinit(context: IStripeContext) {\n\t\t\tconst {elements} = context;\n\n\t\t\tconst options = {\n\t\t\t\tstyle: {\n\t\t\t\t\tbase: {\n\t\t\t\t\t\tcolor: '#32325d',\n\t\t\t\t\t\tfontSize: '16px',\n\t\t\t\t\t},\n\t\t\t\t},\n\n\t\t\t\tsupportedCountries: ['SEPA'],\n\t\t\t};\n\n\t\t\tconst $iban = elements.create('iban', options);\n\n\t\t\tconst description = /* html */ `<div class=\"pp-stripe-sepadebit-iban-mount\"></div><hr>${sepaDebitDescription}</div>`;\n\n\t\t\t$qsAll('div.pp-pm-saved-option[data-gateway=\"peachpay_stripe_sepadebit\"]', $el => {\n\t\t\t\t$el.innerHTML = description;\n\t\t\t});\n\n\t\t\t$iban.mount('#pp-pms-new div.pp-pm-saved-option[data-gateway=\"peachpay_stripe_sepadebit\"] div.pp-stripe-sepadebit-iban-mount');\n\t\t},\n\t\tasync tokenize(context: IStripeContext, sessionId: string) {\n\t\t\tconst {stripe, elements} = context;\n\n\t\t\tconst $iban = elements.getElement('iban');\n\t\t\tif (!$iban) {\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: 'Failed to find IBAN element.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tconst billingDetails = PeachPayCustomer.stripeBillingDetails() as CreatePaymentMethodSepaDebitData['billing_details'];\n\n\t\t\tif (!billingDetails.email || billingDetails.name === ' ') {\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: 'Billing name and billing email are required fields.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tconst {paymentMethod, error} = await stripe.createPaymentMethod({\n\t\t\t\ttype: 'sepa_debit',\n\t\t\t\tsepa_debit: $iban,\n\t\t\t\tbilling_details: billingDetails,\n\t\t\t});\n\n\t\t\tif (error) {\n\t\t\t\tconst message = error.message ?? 'Failed to tokenize payment method.';\n\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: message,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (!paymentMethod?.id) {\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: 'Failed to tokenize payment method.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\t// Check for a cart total of 0. If it's more than zero, we do not need setupIntent.\n\t\t\t// See https://www.notion.so/peachpay/Stripe-3D-Secure-card-payments-sometimes-fail-01fae4e0b8694e3680f8d6f6733770df.\n\t\t\tif (DefaultCart.total() > 0) {\n\t\t\t\treturn [paymentMethod.id, {}];\n\t\t\t}\n\n\t\t\tconst clientSecret = await createSetupIntent(sessionId, 'sepa_debit');\n\t\t\tif (!clientSecret) {\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: 'Failed to create setup intent.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tconst {error: confirmError, setupIntent: confirmIntent} = await stripe.confirmSepaDebitSetup(\n\t\t\t\tclientSecret,\n\t\t\t\t{\n\t\t\t\t\tpayment_method: {\n\t\t\t\t\t\tsepa_debit: $iban,\n\t\t\t\t\t\tbilling_details: {\n\t\t\t\t\t\t\tname: billingDetails.name,\n\t\t\t\t\t\t\temail: billingDetails.email,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (!confirmIntent || confirmError) {\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: confirmError?.message ?? 'Failed to confirm IBAN setup intent.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (confirmIntent.status !== 'succeeded') {\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: `Setup intent resulted in invalid status(${confirmIntent.status})`,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\treturn [confirmIntent.payment_method as string, {}];\n\t\t},\n\t\tasync confirm(context: IStripeContext, clientSecret: string): Promise<ConfirmResult> {\n\t\t\tconst {stripe} = context;\n\t\t\tconst {paymentIntent, error} = await stripe.retrievePaymentIntent(clientSecret);\n\n\t\t\tif (!paymentIntent || error) {\n\t\t\t\tconst message = error?.message ?? 'Failed to retrieve payment intent.';\n\t\t\t\treturn [null, {\n\t\t\t\t\tnote: message,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (paymentIntent.status === 'succeeded'\n\t\t\t\t|| paymentIntent.status === 'requires_capture'\n\t\t\t\t|| paymentIntent.status === 'processing') {\n\t\t\t\treturn ['success', {}];\n\t\t\t}\n\n\t\t\tif (paymentIntent.status === 'requires_action') {\n\t\t\t\tconst {paymentIntent, error} = await stripe.confirmSepaDebitPayment(clientSecret);\n\t\t\t\tif (!paymentIntent || error) {\n\t\t\t\t\tconst message = error?.message ?? 'Failed to confirm payment intent.';\n\t\t\t\t\treturn [null, {\n\t\t\t\t\t\tnote: message,\n\t\t\t\t\t}];\n\t\t\t\t}\n\n\t\t\t\tif (paymentIntent.status === 'succeeded'\n\t\t\t\t\t|| paymentIntent.status === 'requires_capture'\n\t\t\t\t\t|| paymentIntent.status === 'processing') {\n\t\t\t\t\treturn ['success', {}];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn [null, {\n\t\t\t\tnote: `Failed to confirm payment intent with status(${paymentIntent.status})`,\n\t\t\t}];\n\t\t},\n\t};\n}\n\nexport {initStripeSepaDebitMethod};\n","import {type CreatePaymentMethodBancontactData} from '@stripe/stripe-js';\nimport {type StripeGateway, type IStripeContext} from '../../../models/stripe';\nimport {PeachPayCustomer} from '../../../reducers/peachPayCustomerReducer';\nimport {getLocaleText} from '../../../util/translation';\nimport bancontactBadgeURL from '../../../../img/badge/bancontact.svg';\nimport bancontactImageURL from '../../../../img/marks/bancontact.svg';\nimport {Feature} from '../../../reducers/environmentReducer';\nimport {FeatureFlag} from '../../../../../@type/features';\n\nfunction initStripeBancontactMethod(): StripeGateway {\n\treturn {\n\t\tconfig: {\n\t\t\tname: Feature.metadata<string>(FeatureFlag.STRIPE_BANCONTACT_GATEWAY, 'title') ?? 'Bancontact',\n\t\t\tgatewayId: 'peachpay_stripe_bancontact',\n\t\t\tdescription: getLocaleText('After selecting <b>Pay</b> you will be redirected to complete your payment.'),\n\t\t\tassets: {\n\t\t\t\ttitle: {src: bancontactImageURL},\n\t\t\t\tbadge: {src: bancontactBadgeURL},\n\t\t\t},\n\t\t},\n\t\tasync tokenize(context) {\n\t\t\tconst {stripe} = context;\n\n\t\t\tconst {paymentMethod, error} = await stripe.createPaymentMethod({\n\t\t\t\ttype: 'bancontact',\n\t\t\t\tbilling_details: PeachPayCustomer.stripeBillingDetails(),\n\t\t\t} as CreatePaymentMethodBancontactData);\n\n\t\t\tif (error) {\n\t\t\t\tconst message = error.message ?? 'Failed to tokenize payment method.';\n\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: message,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (!paymentMethod?.id) {\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: 'Failed to tokenize payment method.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\treturn [paymentMethod.id, {}];\n\t\t},\n\t\tasync confirm(context: IStripeContext, clientSecret: string, intermediateURL: string) {\n\t\t\tconst {stripe} = context;\n\n\t\t\tconst {paymentIntent, error} = await stripe.confirmBancontactPayment(clientSecret, {return_url: intermediateURL});\n\n\t\t\tif (error) {\n\t\t\t\tconst message = error.message ?? 'Failed to confirm payment.';\n\t\t\t\treturn [null, {\n\t\t\t\t\tnote: message,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (paymentIntent) {\n\t\t\t\treturn ['success', {}];\n\t\t\t}\n\n\t\t\treturn [null, {}];\n\t\t},\n\t};\n}\n\nexport {initStripeBancontactMethod};\n","import {type CreatePaymentMethodGiropayData} from '@stripe/stripe-js';\nimport {type StripeGateway, type IStripeContext} from '../../../models/stripe';\nimport {PeachPayCustomer} from '../../../reducers/peachPayCustomerReducer';\nimport {getLocaleText} from '../../../util/translation';\nimport giropayBadgeURL from '../../../../img/badge/giropay.svg';\nimport giropayImageURL from '../../../../img/marks/giropay.svg';\nimport {Feature} from '../../../reducers/environmentReducer';\nimport {FeatureFlag} from '../../../../../@type/features';\n\nfunction initStripeGiropayMethod(): StripeGateway {\n\treturn {\n\t\tconfig: {\n\t\t\tname: Feature.metadata<string>(FeatureFlag.STRIPE_GIROPAY_GATEWAY, 'title') ?? 'giropay',\n\t\t\tgatewayId: 'peachpay_stripe_giropay',\n\t\t\tdescription: getLocaleText('After selecting <b>Pay</b> you will be redirected to complete your payment.'),\n\t\t\tassets: {\n\t\t\t\ttitle: {src: giropayImageURL},\n\t\t\t\tbadge: {src: giropayBadgeURL},\n\t\t\t},\n\t\t},\n\t\tasync tokenize(context) {\n\t\t\tconst {stripe} = context;\n\n\t\t\tconst {paymentMethod, error} = await stripe.createPaymentMethod({\n\t\t\t\ttype: 'giropay',\n\t\t\t\tbilling_details: PeachPayCustomer.stripeBillingDetails(),\n\t\t\t} as CreatePaymentMethodGiropayData);\n\n\t\t\tif (error) {\n\t\t\t\tconst message = error.message ?? 'Failed to tokenize payment method.';\n\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: message,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (!paymentMethod?.id) {\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: 'Failed to tokenize payment method.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\treturn [paymentMethod.id, {}];\n\t\t},\n\t\tasync confirm(context: IStripeContext, clientSecret: string, intermediateURL: string) {\n\t\t\tconst {stripe} = context;\n\n\t\t\tconst {error, paymentIntent} = await stripe.confirmGiropayPayment(clientSecret, {return_url: intermediateURL});\n\n\t\t\tif (error) {\n\t\t\t\tconst message = error.message ?? 'Failed to confirm payment.';\n\t\t\t\treturn [null, {\n\t\t\t\t\tnote: message,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (paymentIntent) {\n\t\t\t\treturn ['success', {}];\n\t\t\t}\n\n\t\t\treturn [null, {}];\n\t\t},\n\t};\n}\n\nexport {initStripeGiropayMethod};\n","import {$qsAll} from '../../../../../@shared/ts/dom';\nimport {type StripeGateway, type IStripeContext} from '../../../models/stripe';\nimport {Feature} from '../../../reducers/environmentReducer';\nimport {PeachPayCustomer} from '../../../reducers/peachPayCustomerReducer';\nimport {getLocaleText} from '../../../util/translation';\nimport idealBadgeURL from '../../../../img/badge/ideal.svg';\nimport idealImageURL from '../../../../img/marks/ideal.svg';\nimport {FeatureFlag} from '../../../../../@type/features';\n\nfunction initStripeIdealMethod(): StripeGateway {\n\treturn {\n\t\tconfig: {\n\t\t\tname: Feature.metadata<string>(FeatureFlag.STRIPE_IDEAL_GATEWAY, 'title') ?? 'iDEAL',\n\t\t\tgatewayId: 'peachpay_stripe_ideal',\n\t\t\tdescription: getLocaleText('After selecting <b>Pay</b> you will be redirected to complete your payment.'),\n\t\t\tassets: {\n\t\t\t\ttitle: {src: idealImageURL},\n\t\t\t\tbadge: {src: idealBadgeURL},\n\t\t\t},\n\t\t},\n\t\tinit(context: IStripeContext) {\n\t\t\tconst {elements} = context;\n\t\t\tconst options = {\n\t\t\t\tstyle: {\n\t\t\t\t\tbase: {\n\t\t\t\t\t\tpadding: '5px 0',\n\t\t\t\t\t\tcolor: '#32325d',\n\t\t\t\t\t\tfontSize: '16px',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst $idealBank = elements.create('idealBank', options);\n\t\t\t$qsAll('div.pp-pm-saved-option[data-gateway=\"peachpay_stripe_ideal\"]', $el => {\n\t\t\t\t$el.innerHTML = /* html */ `\n<div style=\"text-align: left; display: flex; flex-direction: column;\">\n    <label>\n        <span style=\"font-weight: 600;\">${getLocaleText('Account name')}</span>\n    </label>\n    <span class=\"ideal-accountholder-name\" style=\"margin-bottom: 1rem;\">${PeachPayCustomer.billing.fullName()}</span>\n    <div style=\"border-radius: 4px; background-color: #f4f4f4; padding: 0.1rem 0.5rem;\">\n        <label style=\"font-weight: 600; font-size: 13px; color: #707070;\">${getLocaleText('iDEAL Bank')}</label>\n        <div class=\"ideal-container-element\"></div>\n    </div>\n    <hr>\n    <p class=\"muted\" style=\"text-align: center; margin: 0.5rem 0\">${getLocaleText('After selecting <b>Pay</b> you will be redirected to complete your payment.')}</p>\n</div>\n`;\n\t\t\t});\n\n\t\t\t// Always update customer full name\n\t\t\t$qsAll('.ideal-accountholder-name', $el => {\n\t\t\t\t$el.innerHTML = PeachPayCustomer.billing.fullName();\n\t\t\t});\n\n\t\t\t$idealBank.mount('#pp-pms-new div.pp-pm-saved-option[data-gateway=\"peachpay_stripe_ideal\"] .ideal-container-element');\n\t\t},\n\t\tasync tokenize(context) {\n\t\t\tconst {stripe, elements} = context;\n\n\t\t\tconst $idealBank = elements.getElement('idealBank');\n\t\t\tif (!$idealBank) {\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: 'Failed to find the required Stripe element.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tconst {paymentMethod, error} = await stripe.createPaymentMethod({\n\t\t\t\ttype: 'ideal',\n\t\t\t\tideal: $idealBank,\n\t\t\t\tbilling_details: PeachPayCustomer.stripeBillingDetails(),\n\t\t\t});\n\n\t\t\tif (error) {\n\t\t\t\tconst message = error.message ?? 'Failed to tokenize payment method.';\n\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: message,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (!paymentMethod?.id) {\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: 'Failed to tokenize payment method.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\treturn [paymentMethod.id, {}];\n\t\t},\n\t\tasync confirm(context: IStripeContext, clientSecret: string, intermediateURL: string) {\n\t\t\tconst {stripe} = context;\n\n\t\t\tconst {paymentIntent, error} = await stripe.confirmIdealPayment(clientSecret, {return_url: intermediateURL});\n\n\t\t\tif (error) {\n\t\t\t\tconst message = error.message ?? 'Failed to confirm payment.';\n\t\t\t\treturn [null, {\n\t\t\t\t\tnote: message,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (paymentIntent) {\n\t\t\t\treturn ['success', {}];\n\t\t\t}\n\n\t\t\treturn [null, {}];\n\t\t},\n\t};\n}\n\nexport {initStripeIdealMethod};\n","import {render} from './../../../reducers/rootReducer';\nimport {type Stripe, type PaymentRequest} from '@stripe/stripe-js';\nimport {type TokenResult, type ConfirmResult} from '../../../../../@type/stripe';\nimport {type GatewayConfiguration} from '../../../models/GatewayConfiguration';\nimport {type StripeGateway, type IStripeContext} from '../../../models/stripe';\nimport {DefaultCart} from '../../../reducers/cartReducer';\nimport {store} from '../../../store';\nimport {getLocaleText} from '../../../util/translation';\nimport {createPaymentRequestOptions, tokenizePaymentRequest, updatePaymentRequestOptions} from '../payment-request';\nimport {createSetupIntent} from '../setup-intent';\nimport applepayBadgeURL from '../../../../img/badge/apple-pay.svg';\nimport applepayImageURL from '../../../../img/marks/apple-pay.svg';\nimport {Feature} from '../../../reducers/environmentReducer';\nimport {FeatureFlag} from '../../../../../@type/features';\n\nfunction initStripeApplepayMethod(): StripeGateway {\n\tlet paymentRequest: PaymentRequest | null = null;\n\n\tconst config: GatewayConfiguration = {\n\t\tname: Feature.metadata<string>(FeatureFlag.STRIPE_APPLEPAY_GATEWAY, 'title') ?? getLocaleText('Apple Pay'),\n\t\tgatewayId: 'peachpay_stripe_applepay',\n\t\tdescription: getDescription(),\n\t\tassets: {\n\t\t\ttitle: {src: applepayImageURL},\n\t\t\tbadge: {src: applepayBadgeURL},\n\t\t},\n\t\tbrowser: (window as any)['ApplePaySession'] !== undefined,\n\t};\n\n\tstore.subscribe(() => {\n\t\tpaymentRequest?.update(updatePaymentRequestOptions());\n\t});\n\n\tconst init = async (stripe: Stripe) => {\n\t\ttry {\n\t\t\tpaymentRequest = stripe.paymentRequest(createPaymentRequestOptions());\n\n\t\t\tconst result = await paymentRequest.canMakePayment();\n\n\t\t\tif (!result?.['applePay']) {\n\t\t\t\tconfig.browser = false;\n\t\t\t\tconfig.initialized = false;\n\t\t\t\tstore.dispatch(render());\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t};\n\n\treturn {\n\t\tconfig,\n\t\tinit(context: IStripeContext) {\n\t\t\tconst {stripe} = context;\n\n\t\t\tlet initialized = false;\n\t\t\tstore.subscribe(() => {\n\t\t\t\tif (DefaultCart.contents().length > 0 && !initialized) {\n\t\t\t\t\tinitialized = true;\n\t\t\t\t\tinit(stripe).catch(() => {/**/});\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tasync tokenize(context: IStripeContext, sessionId: string): Promise<TokenResult> {\n\t\t\tconst {stripe} = context;\n\t\t\tif (!paymentRequest) {\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: 'Failed to tokenize payment method because paymentRequest object is not initialized.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tconst localPaymentRequest = paymentRequest;\n\t\t\tpaymentRequest = null;\n\n\t\t\tconst [paymentMethodId, update] = await tokenizePaymentRequest(localPaymentRequest);\n\t\t\tif (!paymentMethodId) {\n\t\t\t\tawait init(stripe);\n\t\t\t\treturn [null, update];\n\t\t\t}\n\n\t\t\t// Check for a cart total of 0. If it's more than zero, we do not need setupIntent.\n\t\t\t// See https://www.notion.so/peachpay/Stripe-3D-Secure-card-payments-sometimes-fail-01fae4e0b8694e3680f8d6f6733770df.\n\t\t\tif (DefaultCart.total() > 0) {\n\t\t\t\treturn [paymentMethodId, {}];\n\t\t\t}\n\n\t\t\tconst clientSecret = await createSetupIntent(sessionId, 'card', paymentMethodId);\n\t\t\tif (!clientSecret) {\n\t\t\t\tawait init(stripe);\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: 'Failed to create setup intent.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tconst {error: confirmError, setupIntent: confirmIntent} = await stripe.confirmCardSetup(clientSecret);\n\t\t\tif (confirmError ?? !confirmIntent) {\n\t\t\t\tawait init(stripe);\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: confirmError?.message ?? 'Failed to confirm setup intent.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (confirmIntent.status !== 'succeeded') {\n\t\t\t\tawait init(stripe);\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: `Setup intent resulted in invalid status(${confirmIntent.status})`,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tawait init(stripe);\n\t\t\treturn [confirmIntent.payment_method as string, {}];\n\t\t},\n\t\tasync confirm(context: IStripeContext, clientSecret: string): Promise<ConfirmResult> {\n\t\t\tconst {stripe} = context;\n\t\t\tconst {paymentIntent, error} = await stripe.retrievePaymentIntent(clientSecret);\n\n\t\t\tif (!paymentIntent || error) {\n\t\t\t\tconst message = error?.message ?? 'Failed to retrieve payment intent.';\n\t\t\t\treturn [null, {\n\t\t\t\t\tnote: message,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (paymentIntent.status === 'succeeded' || paymentIntent.status === 'requires_capture') {\n\t\t\t\treturn ['success', {}];\n\t\t\t}\n\n\t\t\tif (paymentIntent.status === 'requires_action') {\n\t\t\t\tconst {paymentIntent, error} = await stripe.confirmCardPayment(clientSecret);\n\t\t\t\tif (!paymentIntent || error) {\n\t\t\t\t\tconst message = error?.message ?? 'Failed to confirm payment intent.';\n\t\t\t\t\treturn [null, {\n\t\t\t\t\t\tnote: message,\n\t\t\t\t\t}];\n\t\t\t\t}\n\n\t\t\t\tif (paymentIntent.status === 'succeeded' || paymentIntent.status === 'requires_capture') {\n\t\t\t\t\treturn ['success', {}];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn [null, {\n\t\t\t\tnote: `Failed to confirm payment intent with status(${paymentIntent.status})`,\n\t\t\t}];\n\t\t},\n\t};\n}\n\nexport {initStripeApplepayMethod};\n\nfunction getDescription(): string {\n\treturn /* html */ `\n<img style=\"display: block; text-align: left; height: 1.5rem; \" src=\"${applepayImageURL}\">\n<p style=\"text-align: left; margin: 0.5rem 0;\">${getLocaleText('Apple Pay selected for checkout.')}</p>\n<hr/>\n<p style=\"text-align: left; margin: 0.5rem 0 0;\" class=\"muted\">${getLocaleText('Another step will appear after submitting your order to complete your purchase details.')}<p>\n    `;\n}\n","import {type Stripe, type PaymentRequest} from '@stripe/stripe-js';\nimport {type ConfirmResult, type TokenResult} from '../../../../../@type/stripe';\nimport {type GatewayConfiguration} from '../../../models/GatewayConfiguration';\nimport {type StripeGateway, type IStripeContext} from '../../../models/stripe';\nimport {DefaultCart} from '../../../reducers/cartReducer';\nimport {store} from '../../../store';\nimport {getLocaleText} from '../../../util/translation';\nimport {createPaymentRequestOptions, tokenizePaymentRequest, updatePaymentRequestOptions} from '../payment-request';\nimport {createSetupIntent} from '../setup-intent';\nimport googlepayBadgeURL from '../../../../img/badge/google-pay.svg';\nimport googlepayImageURL from '../../../../img/marks/google-pay.svg';\nimport {render} from '../../../reducers/rootReducer';\nimport {Feature} from '../../../reducers/environmentReducer';\nimport {FeatureFlag} from '../../../../../@type/features';\n\nfunction initStripeGooglepayMethod(): StripeGateway {\n\tlet paymentRequest: PaymentRequest | null = null;\n\n\tconst config: GatewayConfiguration = {\n\t\tname: Feature.metadata<string>(FeatureFlag.STRIPE_GOOGLEPAY_GATEWAY, 'title') ?? getLocaleText('Google Pay'),\n\t\tgatewayId: 'peachpay_stripe_googlepay',\n\t\tdescription: getDescription(),\n\t\tassets: {\n\t\t\ttitle: {src: googlepayImageURL},\n\t\t\tbadge: {src: googlepayBadgeURL},\n\t\t},\n\t};\n\n\tconst init = async (stripe: Stripe) => {\n\t\ttry {\n\t\t\tpaymentRequest = stripe.paymentRequest(createPaymentRequestOptions());\n\n\t\t\tconst result = await paymentRequest.canMakePayment();\n\n\t\t\tif (!result?.['googlePay']) {\n\t\t\t\tconfig.browser = false;\n\t\t\t\tconfig.initialized = false;\n\t\t\t\tstore.dispatch(render());\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t};\n\n\tstore.subscribe(() => {\n\t\tpaymentRequest?.update(updatePaymentRequestOptions());\n\t});\n\n\treturn {\n\t\tconfig,\n\t\tinit(context: IStripeContext) {\n\t\t\tconst {stripe} = context;\n\n\t\t\tlet initialized = false;\n\t\t\tstore.subscribe(() => {\n\t\t\t\tif (DefaultCart.contents().length > 0 && !initialized) {\n\t\t\t\t\tinitialized = true;\n\t\t\t\t\tinit(stripe).catch(() => {/**/});\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tasync tokenize(context: IStripeContext, sessionId: string): Promise<TokenResult> {\n\t\t\tconst {stripe} = context;\n\t\t\tif (!paymentRequest) {\n\t\t\t\tawait init(stripe);\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: 'Failed to tokenize payment method because paymentRequest object is not initialized.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tconst localPaymentRequest = paymentRequest;\n\t\t\tpaymentRequest = null;\n\n\t\t\tconst [paymentMethodId, update] = await tokenizePaymentRequest(localPaymentRequest);\n\t\t\tif (!paymentMethodId) {\n\t\t\t\tawait init(stripe);\n\t\t\t\treturn [null, update];\n\t\t\t}\n\n\t\t\t// Check for a cart total of 0. If it's more than zero, we do not need setupIntent.\n\t\t\t// See https://www.notion.so/peachpay/Stripe-3D-Secure-card-payments-sometimes-fail-01fae4e0b8694e3680f8d6f6733770df.\n\t\t\tif (DefaultCart.total() > 0) {\n\t\t\t\treturn [paymentMethodId, {}];\n\t\t\t}\n\n\t\t\tconst clientSecret = await createSetupIntent(sessionId, 'card', paymentMethodId);\n\t\t\tif (!clientSecret) {\n\t\t\t\tawait init(stripe);\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: 'Failed to create setup intent.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tconst {error: confirmError, setupIntent: confirmIntent} = await stripe.confirmCardSetup(clientSecret);\n\t\t\tif (confirmError ?? !confirmIntent) {\n\t\t\t\tawait init(stripe);\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: confirmError?.message ?? 'Failed to confirm setup intent.',\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (confirmIntent.status !== 'succeeded') {\n\t\t\t\tawait init(stripe);\n\t\t\t\treturn [null, {\n\t\t\t\t\tpaymentStatus: 'creationfailed',\n\t\t\t\t\tnote: `Setup intent resulted in invalid status(${confirmIntent.status})`,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tawait init(stripe);\n\t\t\treturn [confirmIntent.payment_method as string, {}];\n\t\t},\n\t\tasync confirm(context: IStripeContext, clientSecret: string): Promise<ConfirmResult> {\n\t\t\tconst {stripe} = context;\n\t\t\tconst {paymentIntent, error} = await stripe.retrievePaymentIntent(clientSecret);\n\n\t\t\tif (!paymentIntent || error) {\n\t\t\t\tconst message = error?.message ?? 'Failed to retrieve payment intent.';\n\t\t\t\treturn [null, {\n\t\t\t\t\tnote: message,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tif (paymentIntent.status === 'succeeded' || paymentIntent.status === 'requires_capture') {\n\t\t\t\treturn ['success', {}];\n\t\t\t}\n\n\t\t\tif (paymentIntent.status === 'requires_action') {\n\t\t\t\tconst {paymentIntent, error} = await stripe.confirmCardPayment(clientSecret);\n\t\t\t\tif (!paymentIntent || error) {\n\t\t\t\t\tconst message = error?.message ?? 'Failed to confirm payment intent.';\n\t\t\t\t\treturn [null, {\n\t\t\t\t\t\tnote: message,\n\t\t\t\t\t}];\n\t\t\t\t}\n\n\t\t\t\tif (paymentIntent.status === 'succeeded' || paymentIntent.status === 'requires_capture') {\n\t\t\t\t\treturn ['success', {}];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn [null, {\n\t\t\t\tnote: `Failed to confirm payment intent with status(${paymentIntent.status})`,\n\t\t\t}];\n\t\t},\n\t};\n}\n\nexport {initStripeGooglepayMethod};\n\nfunction getDescription(): string {\n\treturn /* html */ `\n<img style=\"display: block; text-align: left; height: 1.7rem; \" src=\"${googlepayImageURL}\">\n<p style=\"text-align: left; margin: 0.5rem 0;\">${getLocaleText('Google Pay selected for checkout.')}</p>\n<hr/>\n<p style=\"text-align: left; margin: 0.5rem 0 0;\" class=\"muted\">${getLocaleText('Another step will appear after submitting your order to complete your purchase details.')}<p>\n    `;\n}\n"],"names":["V3_URL","V3_URL_REGEX","EXISTING_SCRIPT_MESSAGE","stripePromise","loadScript","params","Promise","resolve","reject","window","Stripe","console","warn","script","scripts","document","querySelectorAll","concat","i","length","test","src","findScript","queryString","advancedFraudSignals","createElement","headOrBody","head","body","Error","appendChild","injectScript","addEventListener","error","initStripe","maybeStripe","args","startTime","stripe","apply","undefined","_registerWrapper","name","version","registerWrapper","stripePromise$1","then","loadCalled","err","loadStripe","_len","arguments","Array","_key","Date","now","setupStripeButton","store","gatewayId","page","loadingMode","startsWith","$element","classList","remove","add","renderStripeButtonDisplay","mode","innerHTML","disabled","renderStripeButtonLoading","createSetupIntent","sessionId","paymentMethodType","paymentMethodId","url","security","formData","FormData","append","fetch","method","json","data","success","setup_intent_details","client_secret","displayMandate","options","res","rej","$el","insertAdjacentHTML","date","toLocaleDateString","nameHtml","fullName","clientName","mandateTemplate","$container","$acceptButton","$cancelButton","$xButton","initStripeAfterPayMethod","config","getLocaleTitle","description","assets","title","getLocaleImage","badge","afterpayLocale","countryOverride","el","imageURL","titleImage","updateAfterpayBranding","tokenize","context","createPaymentMethod","type","billing_details","paymentMethod","paymentStatus","note","message","id","confirm","clientSecret","intermediateURL","confirmAfterpayClearpayPayment","return_url","paymentIntent","country","store_country","afterpay","SUPPORTED_ZERO_DECIMAL_CURRENCIES","createPaymentRequestOptions","cart","calculatedCarts","summary","currency","toLowerCase","total","label","amount","formatCurrency","displayItems","map","l","Number","parseFloat","parseInt","quantity","updatePaymentRequestOptions","tokenizePaymentRequest","paymentRequest","on","event","complete","show","currencyCode","String","includes","Math","round","initStripePaymentIntegration","orderService","publicKey","connectId","stripeAccount","locale","elements","gateways","gatewayImplementations","gatewayConfigurations","card","init","cardElement","create","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","hidePostalCode","mount","$card","getElement","confirmCardSetup","confirmError","confirmIntent","status","payment_method","retrievePaymentIntent","confirmCardPayment","initStripeCardMethod","confirmAffirmPayment","initStripeAffirmMethod","confirmKlarnaPayment","initStripeKlarnaMethod","sofort","confirmSofortPayment","initStripeSofortMethod","bank","collectBankAccountForSetup","payment_method_type","payment_method_data","email","collectError","collectIntent","confirmUsBankAccountSetup","initStripeACHDebitMethod","confirmEpsPayment","initStripeEPSMethod","confirmP24Payment","initStripeP24Method","sepaDebitDescription","$iban","supportedCountries","billingDetails","sepa_debit","confirmSepaDebitSetup","confirmSepaDebitPayment","initStripeSepaDebitMethod","confirmBancontactPayment","initStripeBancontactMethod","confirmGiropayPayment","initStripeGiropayMethod","$idealBank","padding","ideal","confirmIdealPayment","initStripeIdealMethod","browser","update","canMakePayment","result","initialized","catch","localPaymentRequest","initStripeApplepayMethod","initStripeGooglepayMethod","registerStripeGateways","activateStripeGateways","activations","Object","entries","push","all","$target","target","closest","gateway","paymentId","startTransaction","transactionError","transaction","errorMessage","placeOrder","peachpay_stripe_payment_method_id","orderError","orderResult","dataURL","URL","redirect","hash","c","top","location","href","split","paymentData","JSON","parse","atob","decodeURIComponent","intermediate_url","successURL","success_url","paymentFlow"],"sourceRoot":""}