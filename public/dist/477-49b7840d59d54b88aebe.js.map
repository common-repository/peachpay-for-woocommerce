{"version":3,"file":"477-49b7840d59d54b88aebe.js","mappings":"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","sources":["webpack://peachpay-for-woocommerce/./node_modules/@paypal/paypal-js/dist/esm/paypal-js.js","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/paypal/button.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/paypal/class-paypal-payment.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/paypal/paypal.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/paypal/paypal-wallet.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/paypal/paypal-venmo.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/paypal/paypal-paylater.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/paypal/paypal-credit.ts"],"sourcesContent":["/*!\n * paypal-js v5.1.4 (2022-11-29T23:08:21.847Z)\n * Copyright 2020-present, PayPal, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction findScript(url, attributes) {\n    var currentScript = document.querySelector(\"script[src=\\\"\".concat(url, \"\\\"]\"));\n    if (currentScript === null)\n        return null;\n    var nextScript = createScriptElement(url, attributes);\n    // ignore the data-uid-auto attribute that gets auto-assigned to every script tag\n    var currentScriptClone = currentScript.cloneNode();\n    delete currentScriptClone.dataset.uidAuto;\n    // check if the new script has the same number of data attributes\n    if (Object.keys(currentScriptClone.dataset).length !==\n        Object.keys(nextScript.dataset).length) {\n        return null;\n    }\n    var isExactMatch = true;\n    // check if the data attribute values are the same\n    Object.keys(currentScriptClone.dataset).forEach(function (key) {\n        if (currentScriptClone.dataset[key] !== nextScript.dataset[key]) {\n            isExactMatch = false;\n        }\n    });\n    return isExactMatch ? currentScript : null;\n}\nfunction insertScriptElement(_a) {\n    var url = _a.url, attributes = _a.attributes, onSuccess = _a.onSuccess, onError = _a.onError;\n    var newScript = createScriptElement(url, attributes);\n    newScript.onerror = onError;\n    newScript.onload = onSuccess;\n    document.head.insertBefore(newScript, document.head.firstElementChild);\n}\nfunction processOptions(options) {\n    var sdkBaseURL = \"https://www.paypal.com/sdk/js\";\n    if (options.sdkBaseURL) {\n        sdkBaseURL = options.sdkBaseURL;\n        delete options.sdkBaseURL;\n    }\n    processMerchantID(options);\n    var _a = Object.keys(options)\n        .filter(function (key) {\n        return (typeof options[key] !== \"undefined\" &&\n            options[key] !== null &&\n            options[key] !== \"\");\n    })\n        .reduce(function (accumulator, key) {\n        var value = options[key].toString();\n        if (key.substring(0, 5) === \"data-\") {\n            accumulator.dataAttributes[key] = value;\n        }\n        else {\n            accumulator.queryParams[key] = value;\n        }\n        return accumulator;\n    }, {\n        queryParams: {},\n        dataAttributes: {},\n    }), queryParams = _a.queryParams, dataAttributes = _a.dataAttributes;\n    return {\n        url: \"\".concat(sdkBaseURL, \"?\").concat(objectToQueryString(queryParams)),\n        dataAttributes: dataAttributes,\n    };\n}\nfunction objectToQueryString(params) {\n    var queryString = \"\";\n    Object.keys(params).forEach(function (key) {\n        if (queryString.length !== 0)\n            queryString += \"&\";\n        queryString += key + \"=\" + params[key];\n    });\n    return queryString;\n}\n/**\n * Parse the error message code received from the server during the script load.\n * This function search for the occurrence of this specific string \"/* Original Error:\".\n *\n * @param message the received error response from the server\n * @returns the content of the message if the string string was found.\n *          The whole message otherwise\n */\nfunction parseErrorMessage(message) {\n    var originalErrorText = message.split(\"/* Original Error:\")[1];\n    return originalErrorText\n        ? originalErrorText.replace(/\\n/g, \"\").replace(\"*/\", \"\").trim()\n        : message;\n}\nfunction createScriptElement(url, attributes) {\n    if (attributes === void 0) { attributes = {}; }\n    var newScript = document.createElement(\"script\");\n    newScript.src = url;\n    Object.keys(attributes).forEach(function (key) {\n        newScript.setAttribute(key, attributes[key]);\n        if (key === \"data-csp-nonce\") {\n            newScript.setAttribute(\"nonce\", attributes[\"data-csp-nonce\"]);\n        }\n    });\n    return newScript;\n}\nfunction processMerchantID(options) {\n    var merchantID = options[\"merchant-id\"], dataMerchantID = options[\"data-merchant-id\"];\n    var newMerchantID = \"\";\n    var newDataMerchantID = \"\";\n    if (Array.isArray(merchantID)) {\n        if (merchantID.length > 1) {\n            newMerchantID = \"*\";\n            newDataMerchantID = merchantID.toString();\n        }\n        else {\n            newMerchantID = merchantID.toString();\n        }\n    }\n    else if (typeof merchantID === \"string\" && merchantID.length > 0) {\n        newMerchantID = merchantID;\n    }\n    else if (typeof dataMerchantID === \"string\" &&\n        dataMerchantID.length > 0) {\n        newMerchantID = \"*\";\n        newDataMerchantID = dataMerchantID;\n    }\n    options[\"merchant-id\"] = newMerchantID;\n    options[\"data-merchant-id\"] = newDataMerchantID;\n    return options;\n}\n\n/**\n * Load the Paypal JS SDK script asynchronously.\n *\n * @param {Object} options - used to configure query parameters and data attributes for the JS SDK.\n * @param {PromiseConstructor} [PromisePonyfill=window.Promise] - optional Promise Constructor ponyfill.\n * @return {Promise<Object>} paypalObject - reference to the global window PayPal object.\n */\nfunction loadScript(options, PromisePonyfill) {\n    if (PromisePonyfill === void 0) { PromisePonyfill = getDefaultPromiseImplementation(); }\n    validateArguments(options, PromisePonyfill);\n    // resolve with null when running in Node\n    if (typeof window === \"undefined\")\n        return PromisePonyfill.resolve(null);\n    var _a = processOptions(options), url = _a.url, dataAttributes = _a.dataAttributes;\n    var namespace = dataAttributes[\"data-namespace\"] || \"paypal\";\n    var existingWindowNamespace = getPayPalWindowNamespace(namespace);\n    // resolve with the existing global paypal namespace when a script with the same params already exists\n    if (findScript(url, dataAttributes) && existingWindowNamespace) {\n        return PromisePonyfill.resolve(existingWindowNamespace);\n    }\n    return loadCustomScript({\n        url: url,\n        attributes: dataAttributes,\n    }, PromisePonyfill).then(function () {\n        var newWindowNamespace = getPayPalWindowNamespace(namespace);\n        if (newWindowNamespace) {\n            return newWindowNamespace;\n        }\n        throw new Error(\"The window.\".concat(namespace, \" global variable is not available.\"));\n    });\n}\n/**\n * Load a custom script asynchronously.\n *\n * @param {Object} options - used to set the script url and attributes.\n * @param {PromiseConstructor} [PromisePonyfill=window.Promise] - optional Promise Constructor ponyfill.\n * @return {Promise<void>} returns a promise to indicate if the script was successfully loaded.\n */\nfunction loadCustomScript(options, PromisePonyfill) {\n    if (PromisePonyfill === void 0) { PromisePonyfill = getDefaultPromiseImplementation(); }\n    validateArguments(options, PromisePonyfill);\n    var url = options.url, attributes = options.attributes;\n    if (typeof url !== \"string\" || url.length === 0) {\n        throw new Error(\"Invalid url.\");\n    }\n    if (typeof attributes !== \"undefined\" && typeof attributes !== \"object\") {\n        throw new Error(\"Expected attributes to be an object.\");\n    }\n    return new PromisePonyfill(function (resolve, reject) {\n        // resolve with undefined when running in Node\n        if (typeof window === \"undefined\")\n            return resolve();\n        insertScriptElement({\n            url: url,\n            attributes: attributes,\n            onSuccess: function () { return resolve(); },\n            onError: function () {\n                var defaultError = new Error(\"The script \\\"\".concat(url, \"\\\" failed to load.\"));\n                if (!window.fetch) {\n                    return reject(defaultError);\n                }\n                // Fetch the error reason from the response body for validation errors\n                return fetch(url)\n                    .then(function (response) {\n                    if (response.status === 200) {\n                        reject(defaultError);\n                    }\n                    return response.text();\n                })\n                    .then(function (message) {\n                    var parseMessage = parseErrorMessage(message);\n                    reject(new Error(parseMessage));\n                })\n                    .catch(function (err) {\n                    reject(err);\n                });\n            },\n        });\n    });\n}\nfunction getDefaultPromiseImplementation() {\n    if (typeof Promise === \"undefined\") {\n        throw new Error(\"Promise is undefined. To resolve the issue, use a Promise polyfill.\");\n    }\n    return Promise;\n}\nfunction getPayPalWindowNamespace(namespace) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return window[namespace];\n}\nfunction validateArguments(options, PromisePonyfill) {\n    if (typeof options !== \"object\" || options === null) {\n        throw new Error(\"Expected an options object.\");\n    }\n    if (typeof PromisePonyfill !== \"undefined\" &&\n        typeof PromisePonyfill !== \"function\") {\n        throw new Error(\"Expected PromisePonyfill to be a function.\");\n    }\n}\n\n// replaced with the package.json version at build time\nvar version = \"5.1.4\";\n\nexport { loadCustomScript, loadScript, version };\n","import {$qsAll} from '../../../../@shared/ts/dom';\nimport {type LoadingMode} from '../../models/IEnvironment';\nimport {DefaultCart} from '../../reducers/cartReducer';\nimport {Environment} from '../../reducers/environmentReducer';\nimport {PaymentConfiguration} from '../../reducers/paymentConfigurationReducer';\nimport {store} from '../../store';\nimport {type PayPalGateway} from './paypal';\n\nfunction setupPayPalButtonRendering(gateways: Record<string, PayPalGateway>) {\n\tstore.subscribe(() => {\n\t\trenderPayPalDisplayState(\n\t\t\tPaymentConfiguration.selectedGateway(),\n\t\t\tEnvironment.modalUI.loadingMode(),\n\t\t);\n\n\t\tcontrolPayPalButtonMounts(gateways);\n\t});\n}\n\n/**\n * Renders the paypal button loading state.\n */\nfunction renderPayPalDisplayState(gatewayId: string, mode: LoadingMode) {\n\t// Enable/Disable button\n\tif (gatewayId.startsWith('peachpay_paypal_') && mode === 'finished' && DefaultCart.contents().length > 0) {\n\t\t$qsAll('.paypal-btn-container', $element => {\n\t\t\t$element.classList.remove('hide');\n\t\t});\n\t\t$qsAll('.paypal-spinner-container', $element => {\n\t\t\t$element.classList.add('hide');\n\t\t});\n\t} else if (gatewayId.startsWith('peachpay_paypal_') && DefaultCart.contents().length > 0) {\n\t\t$qsAll('.paypal-btn-container', $element => {\n\t\t\t$element.classList.add('hide');\n\t\t});\n\t\t$qsAll('.paypal-spinner-container', $element => {\n\t\t\t$element.classList.remove('hide');\n\t\t});\n\t} else {\n\t\t$qsAll('.paypal-btn-container', $element => {\n\t\t\t$element.classList.add('hide');\n\t\t});\n\t\t$qsAll('.paypal-spinner-container', $element => {\n\t\t\t$element.classList.add('hide');\n\t\t});\n\t}\n}\n\nfunction controlPayPalButtonMounts(gateways: Record<string, PayPalGateway>) {\n\tif (!PaymentConfiguration.selectedGateway().startsWith('peachpay_paypal_')) {\n\t\treturn;\n\t}\n\n\t// Sorting the methods makes sure the last active method is always detached before the new method is\n\t// attached because they may share some containers.\n\tfor (const [_, gateway] of Object.entries(gateways).sort(([_, m1], [__, m2]) => (m2.state?.mountTarget?.length ?? 0) - (m1.state?.mountTarget.length ?? 0))) {\n\t\tif (!gateway.state) {\n\t\t\tgateway.state = {\n\t\t\t\tmountTarget: '',\n\t\t\t};\n\t\t}\n\n\t\tconst newMountTarget = customButtonMountTarget();\n\t\tif (gateway.state.mountTarget && gateway.state.mountTarget !== newMountTarget) {\n\t\t\tgateway?.detach?.();\n\t\t\tgateway.state.mountTarget = '';\n\t\t}\n\n\t\tif (PaymentConfiguration.selectedGateway() === gateway.config.gatewayId) {\n\t\t\tif (gateway.state.mountTarget) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tgateway?.attach?.(newMountTarget);\n\n\t\t\tgateway.state.mountTarget = newMountTarget;\n\t\t} else {\n\t\t\tif (!gateway.state.mountTarget) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tgateway?.detach?.();\n\n\t\t\tgateway.state.mountTarget = '';\n\t\t}\n\t}\n}\n\nfunction customButtonMountTarget(): string {\n\tif (Environment.customer.mobile()) {\n\t\treturn '#mobile-customer-pay-button .paypal-btn-container';\n\t}\n\n\treturn '#pay-button .paypal-btn-container';\n}\n\nexport {\n\tsetupPayPalButtonRendering,\n};\n","import {setOrderError} from './../../reducers/peachPayOrderReducer';\nimport {startModalProcessing, stopModalLoading} from './../../reducers/environmentReducer';\nimport {type Transaction, type OrderService, displayPaymentErrorMessage, requestCartCalculation} from './../order';\nimport {type PayPalNamespace, type PayPalButtonsComponent, type CreateOrderData, type CreateOrderActions, type OnApproveData, type OnApproveActions, type FUNDING_SOURCE, type PayPalButtonsComponentOptions, type OnCancelledActions} from '@paypal/paypal-js';\nimport {$qs} from '../../../../@shared/ts/dom';\nimport {getErrorString} from '../../../../@shared/ts/error';\nimport {FeatureFlag} from '../../../../@type/features';\nimport {Feature} from '../../reducers/environmentReducer';\nimport {type PayPalPaymentData} from './paypal';\nimport {store} from '../../store';\nimport {updateCustomerDataInBrowser} from '../../features/customer';\nimport {clearLocalSession} from '../session';\nimport {PaymentConfiguration} from '../../reducers/paymentConfigurationReducer';\nimport {updateCustomerPreferredGateway} from '../../reducers/peachPayCustomerReducer';\nimport {getLocaleText} from '../../util/translation';\n\nclass PayPalPaymentButton {\n\tprivate readonly paypal: PayPalNamespace;\n\tprivate readonly orderService: OrderService;\n\tprivate readonly gatewayId: string;\n\tprivate readonly buttonStyle: PayPalButtonsComponentOptions['style'];\n\tprivate readonly fundingType: FUNDING_SOURCE;\n\n\tprivate button: PayPalButtonsComponent | null;\n\tprivate mountContainer: HTMLDivElement | null;\n\tprivate isMounted: boolean;\n\n\tprivate currentPaymentDetails: PayPalPaymentData | null;\n\tprivate currentTransaction: Transaction | null;\n\n\tconstructor(paypal: PayPalNamespace, orderService: OrderService, options: {\n\t\tgatewayId: string;\n\t\tfundingType: FUNDING_SOURCE;\n\t\tbuttonStyle: PayPalButtonsComponentOptions['style'];\n\t}) {\n\t\tthis.paypal = paypal;\n\t\tthis.orderService = orderService;\n\t\tthis.gatewayId = options.gatewayId;\n\t\tthis.fundingType = options.fundingType;\n\t\tthis.buttonStyle = options.buttonStyle;\n\n\t\tthis.isMounted = false;\n\t\tthis.mountContainer = null;\n\n\t\tthis.currentPaymentDetails = null;\n\t\tthis.currentTransaction = null;\n\n\t\tthis.button = this.createButtonComponent();\n\t}\n\n\tpublic isEligible(): boolean {\n\t\treturn this.button?.isEligible() ?? false;\n\t}\n\n\tpublic mount(selector: string) {\n\t\tif (this.isMounted) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst $container = $qs(selector);\n\t\tif (!$container) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.button) {\n\t\t\tthis.button = this.createButtonComponent();\n\t\t}\n\n\t\tif (this.mountContainer) {\n\t\t\tthis.mountContainer?.classList.remove('hide');\n\t\t} else {\n\t\t\tthis.mountContainer = document.createElement('div');\n\t\t\t$container.insertAdjacentElement('beforeend', this.mountContainer);\n\t\t\tthis.button?.render(this.mountContainer).catch(() => { /**/});\n\t\t}\n\n\t\tthis.isMounted = true;\n\t}\n\n\tpublic unmount() {\n\t\tif (!this.isMounted) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.mountContainer?.remove();\n\t\tthis.mountContainer = null;\n\t\tthis.button = null;\n\t\tthis.isMounted = false;\n\t}\n\n\tprivate createButtonComponent(): PayPalButtonsComponent | null {\n\t\tconst {orderService} = this;\n\t\tconst gateway = this;\n\t\t// eslint-disable-next-line new-cap\n\t\treturn this.paypal?.Buttons?.({\n\t\t\tfundingSource: this.fundingType,\n\t\t\tstyle: this.buttonStyle,\n\t\t\tonClick() {\n\t\t\t\tstore.dispatch(startModalProcessing());\n\t\t\t},\n\t\t\tasync createOrder(_data: CreateOrderData, _actions: CreateOrderActions) {\n\t\t\t\ttry {\n\t\t\t\t\tconst {error: transactionError, result: transaction} = await orderService.startTransaction(gateway.gatewayId);\n\t\t\t\t\tif (transactionError || !transaction) {\n\t\t\t\t\t\tconst errorMessage = transactionError ? getErrorString(transactionError) : getLocaleText('An unknown error occured while starting the transaction. Please refresh the page and try again.');\n\t\t\t\t\t\tdisplayPaymentErrorMessage(errorMessage);\n\n\t\t\t\t\t\tstore.dispatch(stopModalLoading());\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\n\t\t\t\t\tgateway.currentTransaction = transaction;\n\n\t\t\t\t\tconst {error: orderError, result: orderResult} = await orderService.placeOrder(gateway.currentTransaction);\n\n\t\t\t\t\tif (orderError || !orderResult || orderResult.result !== 'success') {\n\t\t\t\t\t\tstore.dispatch(stopModalLoading());\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\n\t\t\t\t\tconst dataURL = new URL(orderResult.redirect);\n\t\t\t\t\tconst [name, data] = dataURL.hash.split('=');\n\t\t\t\t\tif (name !== '#payment_data' || !data) {\n\t\t\t\t\t\tawait gateway.currentTransaction.complete({\n\t\t\t\t\t\t\tnote: 'Failed to retrieve paypal payment details from url: ' + orderResult.redirect,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// Any failure after an order risks invalid nonces in the case of a user being logged in. To prevent\n\t\t\t\t\t\t// possible problems we will get a new cart calculation.\n\t\t\t\t\t\tawait requestCartCalculation();\n\n\t\t\t\t\t\tstore.dispatch(stopModalLoading());\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\n\t\t\t\t\tconst paymentData = JSON.parse(atob(decodeURIComponent(data))) as PayPalPaymentData;\n\n\t\t\t\t\tgateway.currentPaymentDetails = paymentData;\n\t\t\t\t\treturn paymentData.data.id;\n\t\t\t\t} catch (error) {\n\t\t\t\t\tawait gateway.currentTransaction?.complete({\n\t\t\t\t\t\tnote: 'Failed creating paypal order: ' + getErrorString(error),\n\t\t\t\t\t});\n\n\t\t\t\t\t// Any failure after an order risks invalid nonces in the case of a user being logged in. To prevent\n\t\t\t\t\t// possible problems we will get a new cart calculation.\n\t\t\t\t\tawait requestCartCalculation();\n\n\t\t\t\t\tstore.dispatch(stopModalLoading());\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t},\n\t\t\tasync onApprove(_data: OnApproveData, actions: OnApproveActions) {\n\t\t\t\tif (!gateway.currentPaymentDetails?.order_id) {\n\t\t\t\t\tawait gateway.currentTransaction?.complete({\n\t\t\t\t\t\tnote: 'Failed approving paypal order: \"Missing payment details\"',\n\t\t\t\t\t});\n\t\t\t\t\tactions.restart();\n\n\t\t\t\t\t// Any failure after an order risks invalid nonces in the case of a user being logged in. To prevent\n\t\t\t\t\t// possible problems we will get a new cart calculation.\n\t\t\t\t\tawait requestCartCalculation();\n\n\t\t\t\t\tstore.dispatch(stopModalLoading());\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst approveURL = Feature.metadata<string>(FeatureFlag.PAYPAL_GATEWAYS, 'approve_order_url');\n\n\t\t\t\tif (!approveURL) {\n\t\t\t\t\tawait gateway.currentTransaction?.complete({\n\t\t\t\t\t\tnote: 'Failed approving paypal order: \"Missing required approve URL or approve URL security nonce\"',\n\t\t\t\t\t});\n\t\t\t\t\tactions.restart();\n\n\t\t\t\t\t// Any failure after an order risks invalid nonces in the case of a user being logged in. To prevent\n\t\t\t\t\t// possible problems we will get a new cart calculation.\n\t\t\t\t\tawait requestCartCalculation();\n\n\t\t\t\t\tstore.dispatch(stopModalLoading());\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst formData = new FormData();\n\t\t\t\tformData.append('order_id', gateway.currentPaymentDetails.order_id);\n\n\t\t\t\tconst response = await fetch(approveURL, {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\tbody: formData,\n\t\t\t\t});\n\n\t\t\t\ttry {\n\t\t\t\t\tconst json = await response.json() as IResponse<void>;\n\t\t\t\t\tif (!json.success) {\n\t\t\t\t\t\tawait gateway.currentTransaction?.complete({\n\t\t\t\t\t\t\tnote: json.message,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tactions.restart();\n\n\t\t\t\t\t\t// Any failure after an order risks invalid nonces in the case of a user being logged in. To prevent\n\t\t\t\t\t\t// possible problems we will get a new cart calculation.\n\t\t\t\t\t\tawait requestCartCalculation();\n\n\t\t\t\t\t\tstore.dispatch(stopModalLoading());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconst paypalOrder = await actions.order?.get();\n\t\t\t\t\tif (paypalOrder?.status !== 'APPROVED' && paypalOrder?.status !== 'COMPLETED') {\n\t\t\t\t\t\tstore.dispatch(setOrderError(getLocaleText('PayPal order failed to finish.')));\n\t\t\t\t\t\tawait gateway.currentTransaction?.complete({\n\t\t\t\t\t\t\tnote: `PayPal order failed to finish: ${getErrorString(error)}`,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tactions.restart();\n\n\t\t\t\t\t\t// Any failure after an order risks invalid nonces in the case of a user being logged in. To prevent\n\t\t\t\t\t\t// possible problems we will get a new cart calculation.\n\t\t\t\t\t\tawait requestCartCalculation();\n\n\t\t\t\t\t\tstore.dispatch(stopModalLoading());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tstore.dispatch(updateCustomerPreferredGateway(PaymentConfiguration.selectedGateway()));\n\n\t\t\t\tupdateCustomerDataInBrowser();\n\t\t\t\tclearLocalSession();\n\n\t\t\t\tif (window.top) {\n\t\t\t\t\twindow.top.location.href = gateway.currentPaymentDetails.success_url;\n\t\t\t\t} else {\n\t\t\t\t\tactions.redirect(gateway.currentPaymentDetails.success_url);\n\t\t\t\t}\n\t\t\t},\n\t\t\tasync onCancel(_data: Record<string, unknown>, _actions: OnCancelledActions) {\n\t\t\t\tif (!gateway.currentPaymentDetails) {\n\t\t\t\t\tawait gateway.currentTransaction?.complete({\n\t\t\t\t\t\tpaymentStatus: 'CANCELED',\n\t\t\t\t\t\torderStatus: 'unknown',\n\t\t\t\t\t\tnote: 'Payment canceled by customer. Order status \"unknown\" because of missing payment details.',\n\t\t\t\t\t});\n\n\t\t\t\t\t// Any failure after an order risks invalid nonces in the case of a user being logged in. To prevent\n\t\t\t\t\t// possible problems we will get a new cart calculation.\n\t\t\t\t\tawait requestCartCalculation();\n\n\t\t\t\t\tstore.dispatch(stopModalLoading());\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tawait gateway?.currentTransaction?.complete({\n\t\t\t\t\tpaymentStatus: 'CANCELED',\n\t\t\t\t\torderStatus: 'canceled',\n\t\t\t\t});\n\n\t\t\t\tcancelOrder(gateway.currentPaymentDetails.cancel_url);\n\n\t\t\t\tstore.dispatch(stopModalLoading());\n\t\t\t},\n\t\t\tasync onError(error: Record<string, unknown>) {\n\t\t\t\tawait gateway.currentTransaction?.complete({\n\t\t\t\t\tnote: getErrorString(error),\n\t\t\t\t});\n\n\t\t\t\tgateway.currentTransaction = null;\n\t\t\t\tgateway.currentPaymentDetails = null;\n\n\t\t\t\t// Any failure after an order risks invalid nonces in the case of a user being logged in. To prevent\n\t\t\t\t// possible problems we will get a new cart calculation.\n\t\t\t\tawait requestCartCalculation();\n\n\t\t\t\tstore.dispatch(stopModalLoading());\n\t\t\t},\n\t\t}) ?? null;\n\t}\n}\n\nfunction cancelOrder(url: string) {\n\ttry {\n\t\tconst xhr = new XMLHttpRequest();\n\t\txhr.open('GET', url);\n\t\txhr.send();\n\t} catch {\n\t\t// Do no harm\n\t}\n}\n\nexport {\n\tPayPalPaymentButton,\n};\n","import {MerchantConfiguration} from './../../reducers/merchantConfigurationReducer';\nimport {loadScript, type PayPalNamespace} from '@paypal/paypal-js';\nimport {FeatureFlag} from '../../../../@type/features';\nimport {type IPaymentData} from '../../../../native-checkout/ts/checkout';\nimport {type GatewayConfiguration} from '../../models/GatewayConfiguration';\nimport {Feature} from '../../reducers/environmentReducer';\nimport {registerGatewayBatch} from '../../reducers/paymentConfigurationReducer';\nimport {store} from '../../store';\nimport {getLocaleText} from '../../util/translation';\nimport {type OrderService} from '../order';\nimport {setupPayPalButtonRendering} from './button';\nimport {initPayPalCreditMethod} from './paypal-credit';\nimport {initPayPalPayLaterMethod} from './paypal-paylater';\nimport {initPayPalVenmoMethod} from './paypal-venmo';\nimport {initPayPalMethod} from './paypal-wallet';\nimport {captureSentryException} from '../../../../@shared/ts/sentry';\n\nexport default async function initPayPalPaymentIntegration(orderService: OrderService): Promise<void> {\n\tif (!Feature.enabled(FeatureFlag.PAYPAL_GATEWAYS)) {\n\t\treturn;\n\t}\n\n\tconst clientId = Feature.metadata<string>(FeatureFlag.PAYPAL_GATEWAYS, 'client_id');\n\tconst merchantId = Feature.metadata<string>(FeatureFlag.PAYPAL_GATEWAYS, 'merchant_id');\n\tconst partnerAttributionId = Feature.metadata<string>(FeatureFlag.PAYPAL_GATEWAYS, 'partner_attribution_id');\n\n\tif (!clientId || !merchantId || !partnerAttributionId) {\n\t\treturn;\n\t}\n\n\tconst gateways = registerPayPalGateways();\n\tsetupPayPalButtonRendering(gateways);\n\n\tconst presentmentCurrencies = new Set(['USD', 'AUD', 'BRL', 'CAD', 'CZK', 'DKK', 'EUR', 'HKD', 'HUF', 'ILS', 'JPY', 'MYR', 'MXN', 'TWD', 'NZD', 'NOK', 'PHP', 'PLN', 'GBP', 'RUB', 'SGD', 'SEK', 'CHF', 'THB']);\n\tlet previousCurrency = '';\n\tstore.subscribe(async () => {\n\t\tconst currentCurrency = MerchantConfiguration.currency.code();\n\t\tif (currentCurrency === previousCurrency) {\n\t\t\treturn;\n\t\t}\n\n\t\tpreviousCurrency = currentCurrency;\n\n\t\t// Reset all PayPal payment methods to there default state when the currency changes.\n\t\tfor (const [_, gateway] of Object.entries(gateways)) {\n\t\t\tgateway.reset();\n\t\t\tgateway.state = undefined;\n\t\t}\n\n\t\t// If the new currency is not a supported presentment currency then do not reinitialize payment methods.\n\t\tif (!presentmentCurrencies.has(currentCurrency)) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst paypal = await loadScript({\n\t\t\t\t'client-id': clientId,\n\t\t\t\t'merchant-id': merchantId,\n\t\t\t\t'data-partner-attribution-id': partnerAttributionId,\n\t\t\t\t'enable-funding': 'venmo',\n\t\t\t\tcurrency: MerchantConfiguration.currency.code(),\n\t\t\t\t'data-page-type': 'checkout',\n\t\t\t});\n\n\t\t\tif (!paypal) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait activatePayPalGateways(paypal, gateways, orderService);\n\t\t} catch (error) {\n\t\t\tcaptureSentryException(new Error('PayPal SDK failed to load'), {\n\t\t\t\terror,\n\t\t\t});\n\t\t}\n\t});\n}\n\nfunction registerPayPalGateways(): Record<string, PayPalGateway> {\n\tconst gatewayImplementations: Record<string, PayPalGateway> = {};\n\tconst gatewayConfigurations: Record<string, GatewayConfiguration> = {};\n\n\tif (Feature.enabled(FeatureFlag.PAYPAL_WALLET_GATEWAY)) {\n\t\tconst method = initPayPalMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tif (Feature.enabled(FeatureFlag.PAYPAL_VENMO_GATEWAY)) {\n\t\tconst method = initPayPalVenmoMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tif (Feature.enabled(FeatureFlag.PAYPAL_PAYLATER_GATEWAY)) {\n\t\tconst method = initPayPalPayLaterMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tif (Feature.enabled(FeatureFlag.PAYPAL_CREDIT_GATEWAY)) {\n\t\tconst method = initPayPalCreditMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tstore.dispatch(registerGatewayBatch(gatewayConfigurations));\n\n\treturn gatewayImplementations;\n}\n\nasync function activatePayPalGateways(paypal: PayPalNamespace, gateways: Record<string, PayPalGateway>, orderService: OrderService) {\n\tconst activations = [];\n\tfor (const [_, gateway] of Object.entries(gateways)) {\n\t\tif (gateway.activate) {\n\t\t\tactivations.push(gateway.activate(paypal, orderService));\n\t\t}\n\t}\n\n\tawait Promise.all(activations);\n}\n\nfunction paypalDescription(title: string, icon: string, description: string) {\n\treturn /* html */ `\n    <img style=\"display: block; text-align: left; height: 1.7rem; \" src=\"${icon}\">\n    <p style=\"text-align: left; margin: 0.5rem 0;\">${title} ${getLocaleText('selected for checkout.')}</p>\n    <hr>\n    <p style=\"text-align: left; margin: 0.5rem 0 0;\" class=\"muted\">${description}</p>`;\n}\n\n/**\n * Implementation type for a PayPal gateway\n */\ninterface PayPalGateway {\n\tstate?: {\n\t\tmountTarget: string;\n\t};\n\tconfig: GatewayConfiguration;\n\tactivate(paypal: PayPalNamespace, orderService: OrderService): Promise<void> | void;\n\treset(): void;\n\tattach(baseTarget: string): void;\n\tdetach(): void;\n}\n\ninterface PayPalPaymentData extends IPaymentData {\n\t'data': {\n\t\t'id': string;\n\t};\n}\n\nexport {\n\tpaypalDescription,\n\ttype PayPalGateway,\n\ttype PayPalPaymentData,\n};\n","import {type GatewayConfiguration} from '../../models/GatewayConfiguration';\nimport {paypalDescription, type PayPalGateway} from './paypal';\nimport paypalBadgeURL from '../../../img/badge/paypal.svg';\nimport paypalImageURL from '../../../img/marks/paypal.svg';\nimport {PayPalPaymentButton} from './class-paypal-payment';\nimport {type PayPalButtonsComponentOptions} from '@paypal/paypal-js';\nimport {FeatureFlag} from '../../../../@type/features';\nimport {Feature} from '../../reducers/environmentReducer';\nimport {render} from '../../reducers/rootReducer';\nimport {store} from '../../store';\n\nfunction initPayPalMethod(): PayPalGateway {\n\tlet buttonInstance: PayPalPaymentButton | null = null;\n\tlet buttonInstanceWaitingInterval: any;\n\n\tconst config: GatewayConfiguration = {\n\t\tname: Feature.metadata<string>(FeatureFlag.PAYPAL_WALLET_GATEWAY, 'title') ?? 'PayPal',\n\t\tgatewayId: 'peachpay_paypal_wallet',\n\t\tdescription: paypalDescription('PayPal', paypalImageURL, 'After selecting the PayPal button you will be prompted to complete your payment.'),\n\t\tassets: {\n\t\t\tbadge: {src: paypalBadgeURL},\n\t\t\ttitle: {src: paypalImageURL},\n\t\t},\n\t};\n\n\treturn {\n\t\tconfig,\n\t\tactivate(paypal, orderService) {\n\t\t\tbuttonInstance = new PayPalPaymentButton(paypal, orderService, {\n\t\t\t\tgatewayId: 'peachpay_paypal_wallet',\n\t\t\t\tfundingType: 'paypal',\n\t\t\t\tbuttonStyle: Feature.metadata<PayPalButtonsComponentOptions['style']>(FeatureFlag.PAYPAL_WALLET_GATEWAY, 'button_style') ?? undefined,\n\t\t\t});\n\t\t\tconfig.initialized = buttonInstance.isEligible();\n\t\t\tstore.dispatch(render());\n\t\t},\n\t\treset() {\n\t\t\tbuttonInstance?.unmount();\n\t\t\tbuttonInstance = null;\n\t\t\tconfig.initialized = false;\n\t\t\tstore.dispatch(render());\n\t\t},\n\t\tattach(selector) {\n\t\t\tclearInterval(buttonInstanceWaitingInterval);\n\t\t\tbuttonInstanceWaitingInterval = setInterval(() => {\n\t\t\t\tif (buttonInstance) {\n\t\t\t\t\tbuttonInstance.mount(selector);\n\t\t\t\t\tclearInterval(buttonInstanceWaitingInterval);\n\t\t\t\t}\n\t\t\t}, 200);\n\t\t},\n\t\tdetach() {\n\t\t\tbuttonInstance?.unmount();\n\t\t},\n\t};\n}\n\nexport {\n\tinitPayPalMethod,\n};\n","import {type GatewayConfiguration} from '../../models/GatewayConfiguration';\nimport {paypalDescription, type PayPalGateway} from './paypal';\nimport venmoBadgeURL from '../../../img/badge/venmo.svg';\nimport venmoImageURL from '../../../img/marks/venmo.svg';\nimport {type PayPalButtonsComponentOptions} from '@paypal/paypal-js';\nimport {FeatureFlag} from '../../../../@type/features';\nimport {Feature} from '../../reducers/environmentReducer';\nimport {PayPalPaymentButton} from './class-paypal-payment';\nimport {render} from '../../reducers/rootReducer';\nimport {store} from '../../store';\n\nfunction initPayPalVenmoMethod(): PayPalGateway {\n\tlet buttonInstance: PayPalPaymentButton | null = null;\n\n\tconst config: GatewayConfiguration = {\n\t\tname: Feature.metadata<string>(FeatureFlag.PAYPAL_VENMO_GATEWAY, 'title') ?? 'Venmo',\n\t\tgatewayId: 'peachpay_paypal_venmo',\n\t\tdescription: paypalDescription('Venmo', venmoImageURL, 'After selecting the Venmo button you will be prompted to complete your payment.'),\n\t\tassets: {\n\t\t\tbadge: {src: venmoBadgeURL},\n\t\t\ttitle: {src: venmoImageURL},\n\t\t},\n\t};\n\n\treturn {\n\t\tconfig,\n\t\tactivate(paypal, orderService) {\n\t\t\tbuttonInstance = new PayPalPaymentButton(paypal, orderService, {\n\t\t\t\tgatewayId: 'peachpay_paypal_venmo',\n\t\t\t\tfundingType: 'venmo',\n\t\t\t\tbuttonStyle: Feature.metadata<PayPalButtonsComponentOptions['style']>(FeatureFlag.PAYPAL_VENMO_GATEWAY, 'button_style') ?? undefined,\n\t\t\t});\n\t\t\tconfig.initialized = buttonInstance.isEligible();\n\t\t\tstore.dispatch(render());\n\t\t},\n\t\treset() {\n\t\t\tbuttonInstance?.unmount();\n\t\t\tbuttonInstance = null;\n\t\t\tconfig.initialized = false;\n\t\t\tstore.dispatch(render());\n\t\t},\n\t\tattach(selector) {\n\t\t\tbuttonInstance?.mount(selector);\n\t\t},\n\t\tdetach() {\n\t\t\tbuttonInstance?.unmount();\n\t\t},\n\t};\n}\n\nexport {\n\tinitPayPalVenmoMethod,\n};\n","import {type GatewayConfiguration} from '../../models/GatewayConfiguration';\nimport {paypalDescription, type PayPalGateway} from './paypal';\nimport paypalBadgeURL from '../../../img/badge/paypal.svg';\nimport paypalPaylaterImageURL from '../../../img/marks/paypal-paylater.svg';\nimport {type PayPalButtonsComponentOptions} from '@paypal/paypal-js';\nimport {FeatureFlag} from '../../../../@type/features';\nimport {Feature} from '../../reducers/environmentReducer';\nimport {PayPalPaymentButton} from './class-paypal-payment';\nimport {render} from '../../reducers/rootReducer';\nimport {store} from '../../store';\n\nfunction initPayPalPayLaterMethod(): PayPalGateway {\n\tlet buttonInstance: PayPalPaymentButton | null = null;\n\n\tconst config: GatewayConfiguration = {\n\t\tname: Feature.metadata<string>(FeatureFlag.PAYPAL_PAYLATER_GATEWAY, 'title') ?? 'PayPal Pay Later',\n\t\tgatewayId: 'peachpay_paypal_paylater',\n\t\tdescription: paypalDescription('PayPal Pay Later', paypalPaylaterImageURL, 'After selecting the PayPal Pay Later button you will be prompted to complete your payment.'),\n\t\tassets: {\n\t\t\tbadge: {src: paypalBadgeURL},\n\t\t\ttitle: {src: paypalPaylaterImageURL},\n\t\t},\n\t};\n\n\treturn {\n\t\tconfig,\n\t\tactivate(paypal, orderService) {\n\t\t\tbuttonInstance = new PayPalPaymentButton(paypal, orderService, {\n\t\t\t\tgatewayId: 'peachpay_paypal_paylater',\n\t\t\t\tfundingType: 'paylater',\n\t\t\t\tbuttonStyle: Feature.metadata<PayPalButtonsComponentOptions['style']>(FeatureFlag.PAYPAL_PAYLATER_GATEWAY, 'button_style') ?? undefined,\n\t\t\t});\n\t\t\tconfig.initialized = buttonInstance.isEligible();\n\t\t\tstore.dispatch(render());\n\t\t},\n\t\treset() {\n\t\t\tbuttonInstance?.unmount();\n\t\t\tbuttonInstance = null;\n\t\t\tconfig.initialized = false;\n\t\t\tstore.dispatch(render());\n\t\t},\n\t\tattach(selector) {\n\t\t\tbuttonInstance?.mount(selector);\n\t\t},\n\t\tdetach() {\n\t\t\tbuttonInstance?.unmount();\n\t\t},\n\t};\n}\n\nexport {\n\tinitPayPalPayLaterMethod,\n};\n","import {type GatewayConfiguration} from '../../models/GatewayConfiguration';\nimport {paypalDescription, type PayPalGateway} from './paypal';\n\nimport paypalBadgeURL from '../../../img/badge/paypal.svg';\nimport paypalCreditImageURL from '../../../img/marks/paypal.svg';\nimport {PayPalPaymentButton} from './class-paypal-payment';\nimport {type PayPalButtonsComponentOptions} from '@paypal/paypal-js';\nimport {FeatureFlag} from '../../../../@type/features';\nimport {Feature} from '../../reducers/environmentReducer';\nimport {store} from '../../store';\nimport {render} from '../../reducers/rootReducer';\n\nfunction initPayPalCreditMethod(): PayPalGateway {\n\tlet buttonInstance: PayPalPaymentButton | null = null;\n\n\tconst config: GatewayConfiguration = {\n\t\tname: Feature.metadata<string>(FeatureFlag.PAYPAL_CREDIT_GATEWAY, 'title') ?? 'PayPal Credit',\n\t\tgatewayId: 'peachpay_paypal_credit',\n\t\tdescription: paypalDescription('PayPal Credit', paypalCreditImageURL, 'After selecting the PayPal Credit button you will be prompted to complete your payment.'),\n\t\tassets: {\n\t\t\tbadge: {src: paypalBadgeURL},\n\t\t\ttitle: {src: paypalCreditImageURL},\n\t\t},\n\t};\n\n\treturn {\n\t\tconfig,\n\t\tactivate(paypal, orderService) {\n\t\t\tbuttonInstance = new PayPalPaymentButton(paypal, orderService, {\n\t\t\t\tgatewayId: 'peachpay_paypal_credit',\n\t\t\t\tfundingType: 'credit',\n\t\t\t\tbuttonStyle: Feature.metadata<PayPalButtonsComponentOptions['style']>(FeatureFlag.PAYPAL_CREDIT_GATEWAY, 'button_style') ?? undefined,\n\t\t\t});\n\t\t\tconfig.initialized = buttonInstance.isEligible();\n\t\t\tstore.dispatch(render());\n\t\t},\n\t\treset() {\n\t\t\tbuttonInstance?.unmount();\n\t\t\tbuttonInstance = null;\n\t\t\tconfig.initialized = false;\n\t\t\tstore.dispatch(render());\n\t\t},\n\t\tattach(selector) {\n\t\t\tbuttonInstance?.mount(selector);\n\t\t},\n\t\tdetach() {\n\t\t\tbuttonInstance?.unmount();\n\t\t},\n\t};\n}\n\nexport {\n\tinitPayPalCreditMethod,\n};\n"],"names":["processOptions","options","sdkBaseURL","merchantID","dataMerchantID","newMerchantID","newDataMerchantID","Array","isArray","length","toString","processMerchantID","_a","Object","keys","filter","key","reduce","accumulator","value","substring","dataAttributes","queryParams","url","concat","objectToQueryString","params","queryString","forEach","createScriptElement","attributes","newScript","document","createElement","src","setAttribute","loadScript","PromisePonyfill","getDefaultPromiseImplementation","validateArguments","window","resolve","namespace","existingWindowNamespace","getPayPalWindowNamespace","currentScript","querySelector","nextScript","currentScriptClone","cloneNode","dataset","uidAuto","isExactMatch","findScript","Error","reject","onSuccess","onError","onerror","onload","head","insertBefore","firstElementChild","insertScriptElement","defaultError","fetch","then","response","status","text","message","parseMessage","originalErrorText","split","replace","trim","parseErrorMessage","catch","err","loadCustomScript","newWindowNamespace","Promise","setupPayPalButtonRendering","gateways","store","gatewayId","mode","startsWith","$element","classList","remove","add","entries","sort","m1","state","mountTarget","gateway","newMountTarget","customButtonMountTarget","detach","config","attach","controlPayPalButtonMounts","paypal","orderService","this","fundingType","buttonStyle","isMounted","mountContainer","currentPaymentDetails","currentTransaction","button","createButtonComponent","isEligible","mount","selector","$container","insertAdjacentElement","render","unmount","Buttons","fundingSource","style","onClick","createOrder","_data","_actions","startTransaction","transactionError","transaction","errorMessage","placeOrder","orderError","orderResult","result","dataURL","URL","redirect","hash","data","complete","note","paymentData","JSON","parse","atob","decodeURIComponent","id","onApprove","actions","order_id","restart","approveURL","formData","FormData","append","method","body","json","success","order","get","paypalOrder","c","top","location","href","success_url","onCancel","paymentStatus","orderStatus","xhr","XMLHttpRequest","open","send","cancelOrder","cancel_url","error","initPayPalPaymentIntegration","clientId","merchantId","partnerAttributionId","gatewayImplementations","gatewayConfigurations","buttonInstanceWaitingInterval","buttonInstance","name","description","paypalDescription","assets","badge","title","activate","PayPalPaymentButton","undefined","initialized","reset","clearInterval","setInterval","initPayPalMethod","initPayPalVenmoMethod","initPayPalPayLaterMethod","initPayPalCreditMethod","registerPayPalGateways","presentmentCurrencies","Set","previousCurrency","currentCurrency","has","currency","activatePayPalGateways","activations","push","all","icon"],"sourceRoot":""}