{"version":3,"file":"795-d1639697e24a204833f0.js","mappings":"8qBAwFA,SAASA,EAAoBC,GACzB,IAAIC,EAAc,GAMlB,OALAC,OAAOC,KAAKH,GAAQI,SAAQ,SAAUC,GACP,IAAvBJ,EAAYK,SACZL,GAAe,KACnBA,GAAeI,EAAM,IAAML,EAAOK,EACtC,IACOJ,CACX,CACA,SAASM,EAAoBC,EAAKC,QACX,IAAfA,IAAyBA,EAAa,CAAC,GAC3C,IAAIC,EAAYC,SAASC,cAAc,UAQvC,OAPAF,EAAUG,IAAML,EAChBN,OAAOC,KAAKM,GAAYL,SAAQ,SAAUC,GACtCK,EAAUI,aAAaT,EAAKI,EAAWJ,IAC3B,mBAARA,GACAK,EAAUI,aAAa,QAASL,EAAW,kBAEnD,IACOC,CACX,CASA,SAASK,EAAWC,EAASC,GAIzB,QAHwB,IAApBA,IAA8BA,EAAkBC,SACpDC,EAAkBH,EAASC,GAEH,oBAAbN,SACP,OAAOM,EAAgBG,QAAQ,MACnC,IAAIC,EA9ER,SAAwBL,GACpB,IAAIM,EAAa,gCACbN,EAAQM,aACRA,EAAaN,EAAQM,kBACdN,EAAQM,YAEnB,IAAIC,EAAyBP,EACzBK,EAAKnB,OAAOC,KAAKoB,GAChBC,QAAO,SAAUnB,GAClB,YAA+C,IAAhCkB,EAAuBlB,IACF,OAAhCkB,EAAuBlB,IACS,KAAhCkB,EAAuBlB,EAC/B,IACKoB,QAAO,SAAUC,EAAarB,GAC/B,IAwBAsB,EAxBIC,EAAQL,EAAuBlB,GAAKwB,WAQxC,OAgBAF,EAAW,SAAUG,EAAOC,GAC5B,OAAQA,EAAe,IAAM,IAAMD,EAAME,aAC7C,EAxBgC,UAD5B3B,EAA2BA,EA0BpB4B,QAAQ,yBAA0BN,IAzBjCO,UAAU,EAAG,GACjBR,EAAYS,eAAe9B,GAAOuB,EAGlCF,EAAYU,YAAY/B,GAAOuB,EAE5BF,CACX,GAAG,CACCU,YAAa,CAAC,EACdD,eAAgB,CAAC,IACjBC,EAAcf,EAAGe,YAAaD,EAAiBd,EAAGc,eAMtD,OALIC,EAAY,iBACiC,IAA7CA,EAAY,eAAeC,QAAQ,OACnCF,EAAe,oBAAsBC,EAAY,eACjDA,EAAY,eAAiB,KAE1B,CACH5B,IAAK,GAAG8B,OAAOhB,EAAY,KAAKgB,OAAOvC,EAAoBqC,IAC3DD,eAAgBA,EAExB,CA0CaI,CAAevB,GAAUR,EAAMa,EAAGb,IAAK2B,EAAiBd,EAAGc,eAChEK,EAAYL,EAAe,mBAAqB,SAChDM,EAA0BC,EAAyBF,GAEvD,OA/GJ,SAAoBhC,EAAKC,GACrB,IAAIkC,EAAgBhC,SAASiC,cAAc,eAAgBN,OAAO9B,EAAK,OACvE,GAAsB,OAAlBmC,EACA,OAAO,KACX,IAAIE,EAAatC,EAAoBC,EAAKC,GAEtCqC,EAAqBH,EAAcI,YAGvC,UAFOD,EAAmBE,QAAQC,QAE9B/C,OAAOC,KAAK2C,EAAmBE,SAAS1C,SACxCJ,OAAOC,KAAK0C,EAAWG,SAAS1C,OAChC,OAAO,KAEX,IAAI4C,GAAe,EAOnB,OALAhD,OAAOC,KAAK2C,EAAmBE,SAAS5C,SAAQ,SAAUC,GAClDyC,EAAmBE,QAAQ3C,KAASwC,EAAWG,QAAQ3C,KACvD6C,GAAe,EAEvB,IACOA,EAAeP,EAAgB,IAC1C,CA0FQQ,CAAW3C,EAAK2B,IAAmBM,EAC5BxB,EAAgBG,QAAQqB,GAoBvC,SAA0BzB,EAASC,QACP,IAApBA,IAA8BA,EAAkBC,SACpDC,EAAkBH,EAASC,GAC3B,IAAIT,EAAMQ,EAAQR,IAAKC,EAAaO,EAAQP,WAC5C,GAAmB,iBAARD,GAAmC,IAAfA,EAAIF,OAC/B,MAAM,IAAI8C,MAAM,gBAEpB,QAA0B,IAAf3C,GAAoD,iBAAfA,EAC5C,MAAM,IAAI2C,MAAM,wCAEpB,OAAO,IAAInC,GAAgB,SAAUG,EAASiC,GAE1C,GAAwB,oBAAb1C,SACP,OAAOS,KA3HnB,SAA6BC,GACzB,IAAIb,EAAMa,EAAGb,IAAKC,EAAaY,EAAGZ,WAAY6C,EAAYjC,EAAGiC,UAAWC,EAAUlC,EAAGkC,QACjF7C,EAAYH,EAAoBC,EAAKC,GACzCC,EAAU8C,QAAUD,EACpB7C,EAAU+C,OAASH,EACnB3C,SAAS+C,KAAKC,aAAajD,EAAWC,SAAS+C,KAAKE,kBACxD,CAsHQC,CAAoB,CAChBrD,IAAKA,EACLC,WAAYA,EACZ6C,UAAW,WAAc,OAAOlC,GAAW,EAC3CmC,QAAS,WACL,IAAIO,EAAe,IAAIV,MAAM,eAAgBd,OAAO9B,EAAK,8FACzD,OAAO6C,EAAOS,EAClB,GAER,GACJ,CA1CWC,CAAiB,CACpBvD,IAAKA,EACLC,WAAY0B,GACblB,GAAiB+C,MAAK,WACrB,IAAIC,EAAqBvB,EAAyBF,GAClD,GAAIyB,EACA,OAAOA,EAEX,MAAM,IAAIb,MAAM,cAAcd,OAAOE,EAAW,sCACpD,GACJ,CAiCA,SAASE,EAAyBF,GAE9B,OAAO0B,OAAO1B,EAClB,CACA,SAASrB,EAAkBH,EAASC,GAChC,GAAuB,iBAAZD,GAAoC,OAAZA,EAC/B,MAAM,IAAIoC,MAAM,+BAEpB,QAA+B,IAApBnC,GACoB,mBAApBA,EACP,MAAM,IAAImC,MAAM,6CAExB,CAGA,I,gFClLA,SAASe,EAAiCC,GACzCC,EAAA,aAAgB,WA2BjB,IAAwCC,EAAmBC,EAAnBD,EAzBrC,uBAyBwDC,EAxBxD,2BA0BED,EAAUE,WAAW,qBAAsC,yBAAdF,GAAkD,aAATC,GAAuB,gBAAuBjE,OAAS,IAChJ,QAAO,6BAA6B,SAAAmE,GACnCA,EAASC,UAAUC,OAAO,OAC3B,KACA,QAAO,iCAAiC,SAAAF,GACvCA,EAASC,UAAUE,IAAI,OACxB,KACUN,EAAUE,WAAW,qBAAsC,yBAAdF,GAAyC,gBAAuBhE,OAAS,IAChI,QAAO,6BAA6B,SAAAmE,GACnCA,EAASC,UAAUE,IAAI,OACxB,KACA,QAAO,iCAAiC,SAAAH,GACvCA,EAASC,UAAUC,OAAO,OAC3B,OAEA,QAAO,6BAA6B,SAAAF,GACnCA,EAASC,UAAUE,IAAI,OACxB,KACA,QAAO,iCAAiC,SAAAH,GACvCA,EAASC,UAAUE,IAAI,OACxB,KAIF,SAAmCR,G,cAClC,IAAK,uBAAuCI,WAAW,qBAAmE,yBAA3C,uBAC9E,O,IAKD,IAA2B,eAAAtE,OAAO2E,QAAQT,GAAUU,MAAK,SAAC,EAAS,G,cAAT,gBAAIC,GAAF,KAAI,MAAG,gBAAG,KAAU,OAA8B,QAA7B,EAAqB,QAArB,EAAQ,QAAR,EAAP,KAAUC,aAAK,eAAEC,mBAAW,eAAE3E,cAAM,QAAI,IAAkC,QAA5B,EAAQ,QAAR,EAAAyE,EAAGC,aAAK,eAAEC,YAAY3E,cAAM,QAAI,E,KAAG,8BAAE,CAAlJ,0BAAI4E,GAAF,KAAS,MAChBA,EAAQF,QACZE,EAAQF,MAAQ,CACfC,YAAa,KAIf,IAAME,EAAiBC,IAMvB,GALIF,EAAQF,MAAMC,aAAeC,EAAQF,MAAMC,cAAgBE,IAC/C,QAAf,EAAAD,aAAO,EAAPA,EAASG,cAAM,iBACfH,EAAQF,MAAMC,YAAc,IAGzB,yBAA2CC,EAAQI,OAAOhB,UAAW,CACxE,GAAIY,EAAQF,MAAMC,YACjB,SAGc,QAAf,EAAAC,aAAO,EAAPA,EAASK,cAAM,gBAAGJ,GAElBD,EAAQF,MAAMC,YAAcE,C,KACtB,CACN,IAAKD,EAAQF,MAAMC,YAClB,SAGc,QAAf,EAAAC,aAAO,EAAPA,EAASG,cAAM,iBAEfH,EAAQF,MAAMC,YAAc,E,oGAG/B,CAtFEO,CAA0BpB,EAC3B,GACD,CAEA,SAASqB,EAAoCrB,GAC5CC,EAAA,aAAgB,YA8FjB,SAA6BqB,EAAuBpB,EAAmBqB,EAAiBC,GAEnFF,EAAYG,SAASvB,IAAuB,YAATqB,GACtC,QAAO,yBAAyB,SAAAlB,GAC/BA,EAASC,UAAUC,OAAO,OAC3B,KAEA,QAAO,yBAAyB,SAAAF,GAC/BA,EAASC,UAAUE,IAAI,OACxB,IAImB,YAAhBgB,GACH,QAAO,eAAe,SAAAnB,GACrBA,EAASC,UAAUE,IAAI,OACxB,KAEA,QAAO,eAAe,SAAAH,GACrBA,EAASC,UAAUC,OAAO,OAC3B,GAEF,CAnHEmB,CACC5F,OAAOC,KAAKiE,GACZ,uBACA,oBACA,4BAoHH,SAA6BG,GAEf,YAATA,GACH,QAAO,6BAA6B,SAAAE,GACnCA,EAASC,UAAUC,OAAO,OAC3B,KAEA,QAAO,6BAA6B,SAAAF,GACnCA,EAASC,UAAUE,IAAI,OACxB,IAIY,eAATL,GACH,QAAO,uBAAuB,SAAAE,GAC7BA,EAASC,UAAUC,OAAO,OAC3B,KAEA,QAAO,uBAAuB,SAAAF,GAC7BA,EAASC,UAAUE,IAAI,OACxB,IAIY,eAATL,GACH,QAAO,8BAA8B,SAAAE,GACpCA,EAASsB,WAAY,OAAc,aACpC,KAEA,QAAO,8BAA8B,SAAAtB,GACpCA,EAASsB,UAAY,WAAG,OAAc,OAAM,aAAI,OAAqB,cACtE,IAIY,aAATxB,GACH,QAAyB,eAAe,SAAAE,GACvCA,EAASuB,UAAW,CACrB,KAEA,QAAyB,eAAe,SAAAvB,GACvCA,EAASuB,UAAW,CACrB,GAEF,CA7JEC,CACC,2BAEF,GACD,CAuEA,SAASb,IACR,OAAI,UACI,wDAGD,uCACR,C,sHCjGA,aAcC,WAAYc,EAAyBC,EAA4BnF,GAKhEoF,KAAKF,OAASA,EACdE,KAAKD,aAAeA,EACpBC,KAAK9B,UAAYtD,EAAQsD,UACzB8B,KAAKC,YAAcrF,EAAQqF,YAC3BD,KAAKE,YAActF,EAAQsF,YAE3BF,KAAKG,WAAY,EACjBH,KAAKI,eAAiB,KAEtBJ,KAAKK,sBAAwB,KAC7BL,KAAKM,mBAAqB,KAE1BN,KAAKO,OAASP,KAAKQ,uBACpB,CA+ND,OA7NQ,YAAAC,WAAP,W,QACC,OAAgC,QAAzB,EAAW,QAAX,EAAAT,KAAKO,cAAM,eAAEE,oBAAY,QACjC,EAEO,YAAAC,MAAP,SAAaC,G,QACZ,IAAIX,KAAKG,UAAT,CAIA,IAAMS,GAAa,QAAID,GAClBC,IAIAZ,KAAKO,SACTP,KAAKO,OAASP,KAAKQ,yBAGhBR,KAAKI,eACW,QAAnB,EAAAJ,KAAKI,sBAAc,SAAE9B,UAAUC,OAAO,SAEtCyB,KAAKI,eAAiB7F,SAASC,cAAc,OAC7CoG,EAAWC,sBAAsB,YAAab,KAAKI,gBACxC,QAAX,EAAAJ,KAAKO,cAAM,SAAEO,OAAOd,KAAKI,gBAAgBW,OAAM,WAAY,KAG5Df,KAAKG,WAAY,E,CAClB,EAEO,YAAAa,QAAP,W,MACMhB,KAAKG,YAIS,QAAnB,EAAAH,KAAKI,sBAAc,SAAE7B,SACrByB,KAAKI,eAAiB,KACtBJ,KAAKO,OAAS,KACdP,KAAKG,WAAY,EAClB,EAEQ,YAAAK,sBAAR,W,UACQT,EAAgBC,KAAI,aACrBlB,EAAUkB,KAEhB,OA+KE,QA/KK,EAAoB,QAApB,EAAW,QAAX,EAAAA,KAAKF,cAAM,eAAEmB,eAAO,sBAAG,CAC7BC,cAAelB,KAAKC,YACpBkB,MAAOnB,KAAKE,YACZkB,QAAO,WACNnD,EAAA,YAAe,UAChB,EACMoD,YAAW,SAACC,EAAwBC,G,0IAEe,O,sBAAA,GAAMxB,EAAayB,iBAAiB1C,EAAQZ,Y,OACnG,OADM,EAAiD,SAAzCuD,EAAgB,QAAUC,EAAW,SAC/CD,IAAqBC,GAClBC,EAAeF,GAAmB,OAAeA,IAAoB,OAAc,oGACzF,QAA2BE,GAE3B1D,EAAA,YAAe,WACR,CAAP,EAAO,MAGRa,EAAQwB,mBAAqBoB,EAEoB,GAAM3B,EAAa6B,WAAW9C,EAAQwB,sB,OAEvF,OAFM,EAA2C,SAAnCuB,EAAU,QAAUC,EAAW,SAEzCD,IAAeC,GAAsC,YAAvBA,EAAYC,QAC7C9D,EAAA,YAAe,WACR,CAAP,EAAO,MAGF+D,EAAU,IAAIC,IAAIH,EAAYI,UAC9B,WAAeF,EAAQG,KAAKC,MAAM,KAAI,GAArC,OAAMC,EAAI,KACJ,kBAAT,GAA6BA,EAA7B,MACH,GAAMvD,EAAQwB,mBAAmBgC,SAAS,CACzCC,KAAM,uDAAyDT,EAAYI,a,cAsB7E,OANA,SAMA,IAAM,W,cAGN,OAHA,SAEAjE,EAAA,YAAe,WACR,CAAP,EAAO,I,OAXP,OAHMuE,EAAcC,KAAKC,MAAMC,KAAKC,mBAAmBP,KAEvDvD,EAAQuB,sBAAwBmC,EACzB,CAAP,EAAOA,EAAYH,KAAKQ,I,OAExB,O,WAAA,GAAgC,QAA1B,EAAA/D,EAAQwB,0BAAkB,eAAEgC,SAAS,CAC1CC,KAAM,kCAAmC,OAAe,M,yBAWrDO,UAAS,SAACxB,EAAsByB,G,6IACH,QAA7B,EAAAjE,EAAQuB,6BAAqB,eAAE2C,UAAhC,MACH,GAAgC,QAA1B,EAAAlE,EAAQwB,0BAAkB,eAAEgC,SAAS,CAC1CC,KAAM,8D,OAMP,OAPA,SAGAQ,EAAQE,UAIR,IAAM,W,OAGN,OAHA,SAEAhF,EAAA,YAAe,WACf,I,cAGKiF,EAAa,cAAgB,2BAAsC,sBAErE,MACH,GAAgC,QAA1B,EAAApE,EAAQwB,0BAAkB,eAAEgC,SAAS,CAC1CC,KAAM,iG,OAMP,OAPA,SAGAQ,EAAQE,UAIR,IAAM,W,OAGN,OAHA,SAEAhF,EAAA,YAAe,WACf,I,OAMgB,OAHXkF,EAAW,IAAIC,UACZC,OAAO,WAAYvE,EAAQuB,sBAAsB2C,UAEzC,GAAMM,MAAMJ,EAAY,CACxCK,OAAQ,OACRC,KAAML,K,OAFDM,EAAW,S,iBAMH,O,wBAAA,GAAMA,EAASC,Q,cAAtBA,EAAO,UACHC,QAAN,OACH,GAAgC,QAA1B,EAAA7E,EAAQwB,0BAAkB,eAAEgC,SAAS,CAC1CC,KAAMmB,EAAKE,W,QAMZ,OAPA,SAGAb,EAAQE,UAIR,IAAM,W,QAGN,OAHA,SAEAhF,EAAA,YAAe,WACf,I,6BAGmB,O,WAAA,GAAmB,QAAb,EAAA8E,EAAQc,aAAK,eAAEC,O,cACb,cAAxBC,OADEA,EAAc,eACL,EAAXA,EAAaC,SAAiD,eAAxBD,aAAW,EAAXA,EAAaC,QAAnD,QACH/F,EAAA,YAAe,SAAc,OAAc,oCAC3C,GAAgC,QAA1B,EAAAa,EAAQwB,0BAAkB,eAAEgC,SAAS,CAC1CC,KAAM,0CAAkC,OAAe,Q,QAMxD,OAPA,SAGAQ,EAAQE,UAIR,IAAM,W,QAGN,OAHA,SAEAhF,EAAA,YAAe,WACf,I,oCAIEH,OAAOmG,IACVnG,OAAOmG,IAAIC,SAASC,KAAOrF,EAAQuB,sBAAsB+D,YAEzDrB,EAAQb,SAASpD,EAAQuB,sBAAsB+D,a,YAG3CC,SAAQ,SAAC/C,EAAgCC,G,qHACzCzC,EAAQuB,sBAAT,MACH,GAAgC,QAA1B,EAAAvB,EAAQwB,0BAAkB,eAAEgC,SAAS,CAC1CgC,cAAe,WACfC,YAAa,UACbhC,KAAM,8F,OAKP,OARA,SAQA,IAAM,W,OAGN,OAHA,SAEAtE,EAAA,YAAe,WACf,I,OAGD,SAAiC,QAA3B,EAAAa,aAAO,EAAPA,EAASwB,0BAAkB,eAAEgC,SAAS,CAC3CgC,cAAe,WACfC,YAAa,c,cAFd,SA2BJ,SAAqBnK,GACpB,IACC,IAAMoK,EAAM,IAAIC,eAChBD,EAAIE,KAAK,MAAOtK,GAChBoK,EAAIG,M,CACH,S,CAGH,CA9BIC,CAAY9F,EAAQuB,sBAAsBwE,YAE1C5G,EAAA,YAAe,W,YAEVd,QAAO,SAAC2H,G,4GACb,SAAgC,QAA1B,EAAAhG,EAAQwB,0BAAkB,eAAEgC,SAAS,CAC1CC,MAAM,OAAeuC,M,OAQtB,OATA,SAIAhG,EAAQwB,mBAAqB,KAC7BxB,EAAQuB,sBAAwB,KAIhC,IAAM,W,cAAN,SAEApC,EAAA,YAAe,W,qBAEf,QAAI,IACP,EACD,EA/PA,G,mLCcA,aAUC,WAAmB6B,GAAnB,I,MAAA,OAEC,GADAE,KAAKF,OAASA,GACTE,KAAKF,OACT,MAAM,IAAI9C,MAAM,gCAIjB,IAAM+H,EAAc/E,KAGpBA,KAAKgF,WAIH,QAJgB,EAAsB,QAAtB,KAAAhF,KAAKF,QAAOmF,kBAAU,sBAAG,CAC1C5D,YAAa,uFAAY,SAAA0D,EAAY1D,c,QACrCyB,UAAW,SAAMT,GAAI,4EAAI,SAAA0C,EAAYjC,UAAUT,G,QAC/ClF,QAAS,SAAM2H,GAAK,4EAAI,SAAAC,EAAY5H,QAAQ2H,G,iBAC3C,QAAI,KAEN9E,KAAKkF,YAAc,KACnBlF,KAAKmF,YAAc,KACnBnF,KAAKoF,SAAW,KAEhBpF,KAAKqF,eAAiB,IACvB,CA2XD,OAzXQ,YAAAnH,UAAP,WACC,MAAO,sBACR,EAEO,YAAAuC,WAAP,W,QACC,OAAoC,QAA7B,EAAe,QAAf,EAAAT,KAAKgF,kBAAU,eAAEvE,oBAAY,QACrC,EAEO,YAAAN,UAAP,W,MACC,MAAgE,UAA3B,QAA9B,WAAI,kCAA0B,eAAEvD,QAAmB,UAC3D,EAEO,YAAA8D,MAAP,W,kBACC,IAAKV,KAAKS,aACT,MAAM,IAAIzD,MAAM,UAAGgD,KAAK9B,YAAW,6DAIpC,IAAM6G,EAAc/E,KAEdsF,EAAc,CACnBC,QAAO,SAAClD,GACP0C,EAAYQ,QAAQlD,EACrB,EACAmD,SAAQ,SAACnD,GACR0C,EAAYS,SAASnD,EACtB,EACAoD,OAAM,SAACpD,GACN0C,EAAYU,OAAOpD,EACpB,EACAqD,qBAAoB,SAACrD,GACpB0C,EAAYW,qBAAqBrD,EAClC,GAIDrC,KAAKkF,YAAyD,QAA3C,EAAe,QAAf,EAAAlF,KAAKgF,kBAAU,eAAEW,YAAY,CAACL,YAAW,WAAE,QAAI,KAClE,IAAMM,GAAuB,QAAI,0BAC7B5F,KAAKkF,aAAeU,IACvBA,EAAqBjG,UAAY,GACjCK,KAAKkF,YAAYpE,OAAO8E,IAIzB5F,KAAKmF,YAAyD,QAA3C,EAAe,QAAf,EAAAnF,KAAKgF,kBAAU,eAAEa,YAAY,CAACP,YAAW,WAAE,QAAI,KAClE,IAAMQ,GAAuB,QAAI,0BAC7B9F,KAAKmF,aAAeW,IACvBA,EAAqBnG,UAAY,GACjCK,KAAKmF,YAAYrE,OAAOgF,IAIzB9F,KAAKoF,SAAmD,QAAxC,EAAe,QAAf,EAAApF,KAAKgF,kBAAU,eAAEe,SAAS,CAACT,YAAW,WAAE,QAAI,KAC5D,IAAMU,GAAoB,QAAI,uBAC1BhG,KAAKoF,UAAYY,IACpBA,EAAkBrG,UAAY,GAC9BK,KAAKoF,SAAStE,OAAOkF,IAGQ,QAA9B,WAAI,kCAA0B,SAAEtL,aAAa,kBAAmB,OACjE,EAKO,YAAAuL,OAAP,SAAcZ,GAAd,WACCrF,KAAKqF,eAAiBA,EAEjBrF,KAAKG,YAKVkF,EAAea,kBAAkBlG,KAAK9B,aACpCN,MAAK,iBAAM,OAAe,QAAf,IAAKoH,kBAAU,eAAEiB,QAAQ,IACpClF,OAAM,SAAO+D,GAAyB,2C,8DAEtC,GADIlB,GAAU,OAAc,oGAEtB,2BADEkB,EAAMlB,QAGZA,GAAU,OAAc,oFAMxBuC,QAAQrB,MAAMA,GAIhB,SAAMO,EAAee,oBAAoB,CAAC7D,KAAMqB,K,cAAhD,SACAyB,EAAegB,kBAAkBzC,GACjCyB,EAAeiB,c,cAvBhBH,QAAQrB,MAAM,sCAyBhB,EAMc,YAAAzD,YAAd,W,gHACOgE,EAAiBrF,KAAKqF,e,iBAGZ,O,sBAAA,GAAMA,EAAekB,YAA+B,W,OAEnE,MAAO,CAAP,EAAOxE,OAFDA,EAAS,eAEF,EAANA,EAAQM,KAAKQ,I,OAIpB,O,WAFAsD,QAAQrB,MAAM,GAEd,GAAMO,EAAee,oBAAoB,CACxC9B,cAAe,cACfC,YAAa,iBACbhC,MAAM,OAAe,M,OAMtB,OATA,SAMA8C,EAAegB,mBAAkB,OAAc,mEAC/ChB,EAAeiB,cAER,CAAP,EAAO,I,yBAQK,YAAAxD,UAAd,SAAwBxB,G,6HACjB+D,EAAiBrF,KAAKqF,gBAEtBnC,EAAamC,EAAemB,gBAAgB,2BAA6B,sBAC3E,OACG7E,GAAe,OAAc,kEAEnC,GAAM0D,EAAee,oBAAoB,CAAC7D,KAAMZ,M,OAIhD,OAJA,SACA0D,EAAegB,kBAAkB1E,GACjC0D,EAAeiB,cAEf,I,OAMuB,OAHlBnD,EAAW,IAAIC,UACZC,OAAO,WAAYgC,EAAeoB,cAEnB,IAAM,EAAAC,EAAA,IAAaxD,EAAY,CACtDK,OAAQ,OACRC,KAAML,K,cAFD,EAAkB,SAAjBpB,EAAM,UAAO,SAKNA,EAAV,OACGJ,GAAe,OAAc,mEAEnC,GAAM0D,EAAee,oBAAoB,CAAC7D,KAAMZ,M,OAAhD,SACA0D,EAAegB,kBAAkB1E,GACjC0D,EAAeiB,c,wBAGhBjB,EAAesB,kB,YAQF,YAAAxJ,QAAd,SAAsByJ,G,gGAOd,YAAArB,QAAR,SAAgBlD,G,UACf,OAAQA,EAAKwE,WACZ,IAAK,UAE2B,QAA3B,EAAAxE,EAAKyE,OAAOC,uBAAe,eAAEC,oBAChChH,KAAKiH,kBAAkB,OAAQ,2BAE/BjH,KAAKiH,kBAAkB,QAAS,wBAGjC,MAGD,IAAK,UAE2B,QAA3B,EAAA5E,EAAKyE,OAAOI,uBAAe,eAAEF,oBAChChH,KAAKiH,kBAAkB,OAAQ,+BAE/BjH,KAAKiH,kBAAkB,QAAS,4BAGjC,MAGD,IAAK,OAEwB,QAAxB,EAAA5E,EAAKyE,OAAOK,oBAAY,eAAEH,oBAC7BhH,KAAKiH,kBAAkB,OAAQ,4BAE/BjH,KAAKiH,kBAAkB,QAAS,0BAMpC,EAKQ,YAAAzB,SAAR,SAAiBnD,G,oBAChB,OAAQA,EAAKwE,WACZ,IAAK,UAE2B,QAA3B,EAAAxE,EAAKyE,OAAOC,uBAAe,eAAEC,oBAChChH,KAAKiH,kBAAkB,OAAQ,2BAE/BjH,KAAKiH,kBAAkB,QAAS,yBAGF,QAA3B,EAAA5E,EAAKyE,OAAOC,uBAAe,eAAEK,WAChCpH,KAAKiH,kBAAkB,SACP,QAAhB,EAAAjH,KAAKmF,mBAAW,SAAEkC,MAAM,UACtBtG,OAAM,WAAY,KAGrB,MAGD,IAAK,UAE2B,QAA3B,EAAAsB,EAAKyE,OAAOI,uBAAe,eAAEF,oBAChChH,KAAKiH,kBAAkB,OAAQ,+BAE/BjH,KAAKiH,kBAAkB,QAAS,6BAGF,QAA3B,EAAA5E,EAAKyE,OAAOI,uBAAe,eAAEE,WAChCpH,KAAKiH,kBAAkB,SACV,QAAb,EAAAjH,KAAKoF,gBAAQ,SAAEiC,MAAM,OACnBtG,OAAM,WAAY,KAGrB,MAGD,IAAK,OAEwB,QAAxB,EAAAsB,EAAKyE,OAAOK,oBAAY,eAAEH,oBAC7BhH,KAAKiH,kBAAkB,QAAS,4BAEhCjH,KAAKiH,kBAAkB,QAAS,2BAGL,QAAxB,EAAA5E,EAAKyE,OAAOK,oBAAY,eAAEC,UAC7BpH,KAAKiH,kBAAkB,SAM3B,EAKQ,YAAAxB,OAAR,SAAepD,G,iBACkB,QAA3B,EAAAA,EAAKyE,OAAOC,uBAAe,eAAEK,UAUF,QAA3B,EAAA/E,EAAKyE,OAAOI,uBAAe,eAAEE,UAUL,QAAxB,EAAA/E,EAAKyE,OAAOK,oBAAY,eAAEC,SAU/BpH,KAAKiH,kBAAkB,UATM,QAAxB,EAAA5E,EAAKyE,OAAOK,oBAAY,eAAEH,oBAC7BhH,KAAKiH,kBAAkB,QAAS,6BAEhCjH,KAAKiH,kBAAkB,QAAS,2BAbF,QAA3B,EAAA5E,EAAKyE,OAAOI,uBAAe,eAAEF,oBAChChH,KAAKiH,kBAAkB,QAAS,+BAEhCjH,KAAKiH,kBAAkB,QAAS,6BAbF,QAA3B,EAAA5E,EAAKyE,OAAOC,uBAAe,eAAEC,oBAChChH,KAAKiH,kBAAkB,QAAS,2BAEhCjH,KAAKiH,kBAAkB,QAAS,uBA2BnC,EAKQ,YAAAvB,qBAAR,SAA6BrD,G,sBAC5B,OAAgC,QAA3B,EAAAA,EAAKyE,OAAOC,uBAAe,eAAEK,UAaF,QAA3B,EAAA/E,EAAKyE,OAAOI,uBAAe,eAAEE,UAaL,QAAxB,EAAA/E,EAAKyE,OAAOK,oBAAY,eAAEC,cAa3B/E,EAAKiF,aACRtH,KAAKiH,kBAAkB,YAbK,QAAxB,EAAA5E,EAAKyE,OAAOK,oBAAY,eAAEH,oBAC7BhH,KAAKiH,kBAAkB,QAAS,6BAEhCjH,KAAKiH,kBAAkB,QAAS,+BAGpB,QAAb,EAAAjH,KAAKoF,gBAAQ,SAAEiC,MAAM,OACnBtG,OAAM,WAAY,QApBW,QAA3B,EAAAsB,EAAKyE,OAAOI,uBAAe,eAAEF,oBAChChH,KAAKiH,kBAAkB,QAAS,+BAEhCjH,KAAKiH,kBAAkB,QAAS,iCAGjB,QAAhB,EAAAjH,KAAKmF,mBAAW,SAAEkC,MAAM,UACtBtG,OAAM,WAAY,QApBW,QAA3B,EAAAsB,EAAKyE,OAAOC,uBAAe,eAAEC,oBAChChH,KAAKiH,kBAAkB,QAAS,2BAEhCjH,KAAKiH,kBAAkB,QAAS,6BAGjB,QAAhB,EAAAjH,KAAKkF,mBAAW,SAAEmC,MAAM,UACtBtG,OAAM,WAAY,KAkCtB,EAKQ,YAAAkG,kBAAR,SAA0BM,EAAkC3D,GAC3D,IAAM4D,GAAkB,QAAI,0BACtBC,GAAgB,QAAI,+BAE1B,GAAKD,GAAoBC,EAAzB,CAIA,GAAa,UAATF,IAAqB3D,EAIxB,OAHA4D,EAAgBlJ,UAAUE,IAAI,aAC9BiJ,EAAcC,YAAc,IAK7BF,EAAgBlJ,UAAUC,OAAO,QACjCkJ,EAAcC,YAAc9D,EAEf,SAAT2D,EACHC,EAAgBlJ,UAAUC,OAAO,SACd,UAATgJ,GACVC,EAAgBlJ,UAAUE,IAAI,Q,CAEhC,EACD,EA1ZA,G,4CCPe,SAAemJ,EAA6B5H,G,0GAC1D,OAAK,aAAgB,6BAIf6H,EAAW,cAAgB,2BAAsC,aACjEC,EAAa,cAAgB,2BAAsC,eACnEC,EAAuB,cAAgB,2BAAsC,0BAE9EF,GAAaC,GAAeC,GAI3BC,EAgGP,WACC,IAAMC,EAA8D,CAAC,EAC/DC,EAA8D,CAAC,EAErE,GAAI,aAAgB,kCAAoC,CACvD,IAAM1E,EC1HR,W,MAEK2E,EADAC,EAA6C,KAG3CjJ,EAA+B,CACpCkJ,KAA0E,QAApE,gBAAgB,iCAA4C,gBAAQ,QAAI,SAC9ElK,UAAW,yBACXmK,YAAa,EAAkB,SAAU,GAAgB,OAAc,qFACvEC,OAAQ,CACPC,MAAO,CAAC9N,IAAK,GACb+N,MAAO,CAAC/N,IAAK,KAIf,MAAO,CACNyE,OAAM,EACNuJ,SAAQ,SAAC3I,EAAQC,G,MAChBoI,EAAiB,IAAIO,EAAoB5I,EAAQC,EAAc,CAC9D7B,UAAW,yBACX+B,YAAa,SACbC,YAAwH,QAA3G,gBAAgB,iCAA4E,uBAAe,aAAIyI,IAE7HzJ,EAAO0J,YAAcT,EAAe1H,aACpCxC,EAAA,YAAe,SAChB,EACA4K,MAAK,WACJV,SAAAA,EAAgBnH,UAChBmH,EAAiB,KACjBjJ,EAAO0J,aAAc,EACrB3K,EAAA,YAAe,SAChB,EACAkB,OAAM,SAACwB,GACNmI,cAAcZ,GACdA,EAAgCa,aAAY,WACvCZ,IACHA,EAAezH,MAAMC,GACrBmI,cAAcZ,GAEhB,GAAG,IACJ,EACAjJ,OAAM,WACLkJ,SAAAA,EAAgBnH,SACjB,EAEF,CD8EiBgI,GACfhB,EAAuBzE,EAAOrE,OAAOhB,WAAaqF,EAClD0E,EAAsB1E,EAAOrE,OAAOhB,WAAaqF,EAAOrE,M,CAGzD,GAAI,aAAgB,iCAAmC,CAChDqE,EEhIR,W,MACK4E,EAA6C,KAE3CjJ,EAA+B,CACpCkJ,KAAyE,QAAnE,gBAAgB,gCAA2C,gBAAQ,QAAI,QAC7ElK,UAAW,wBACXmK,YAAa,EAAkB,QAAS,GAAe,OAAc,oFACrEC,OAAQ,CACPC,MAAO,CAAC9N,IAAK,GACb+N,MAAO,CAAC/N,IAAK,KAIf,MAAO,CACNyE,OAAM,EACNuJ,SAAQ,SAAC3I,EAAQC,G,MAChBoI,EAAiB,IAAIO,EAAoB5I,EAAQC,EAAc,CAC9D7B,UAAW,wBACX+B,YAAa,QACbC,YAAuH,QAA1G,gBAAgB,gCAA2E,uBAAe,aAAIyI,IAE5HzJ,EAAO0J,YAAcT,EAAe1H,aACpCxC,EAAA,YAAe,SAChB,EACA4K,MAAK,WACJV,SAAAA,EAAgBnH,UAChBmH,EAAiB,KACjBjJ,EAAO0J,aAAc,EACrB3K,EAAA,YAAe,SAChB,EACAkB,OAAM,SAACwB,GACNwH,SAAAA,EAAgBzH,MAAMC,EACvB,EACA1B,OAAM,WACLkJ,SAAAA,EAAgBnH,SACjB,EAEF,CF2FiBiI,GACfjB,EAAuBzE,EAAOrE,OAAOhB,WAAaqF,EAClD0E,EAAsB1E,EAAOrE,OAAOhB,WAAaqF,EAAOrE,M,CAGzD,GAAI,aAAgB,oCAAsC,CACnDqE,EGtIR,W,MACK4E,EAA6C,KAE3CjJ,EAA+B,CACpCkJ,KAA4E,QAAtE,gBAAgB,mCAA8C,gBAAQ,QAAI,mBAChFlK,UAAW,2BACXmK,YAAa,EAAkB,mBAAoB,GAAwB,OAAc,+FACzFC,OAAQ,CACPC,MAAO,CAAC9N,IAAK,GACb+N,MAAO,CAAC/N,IAAK,KAIf,MAAO,CACNyE,OAAM,EACNuJ,SAAQ,SAAC3I,EAAQC,G,MAChBoI,EAAiB,IAAIO,EAAoB5I,EAAQC,EAAc,CAC9D7B,UAAW,2BACX+B,YAAa,WACbC,YAA0H,QAA7G,gBAAgB,mCAA8E,uBAAe,aAAIyI,IAE/HzJ,EAAO0J,YAAcT,EAAe1H,aACpCxC,EAAA,YAAe,SAChB,EACA4K,MAAK,WACJV,SAAAA,EAAgBnH,UAChBmH,EAAiB,KACjBjJ,EAAO0J,aAAc,EACrB3K,EAAA,YAAe,SAChB,EACAkB,OAAM,SAACwB,GACNwH,SAAAA,EAAgBzH,MAAMC,EACvB,EACA1B,OAAM,WACLkJ,SAAAA,EAAgBnH,SACjB,EAEF,CHiGiBkI,GACflB,EAAuBzE,EAAOrE,OAAOhB,WAAaqF,EAClD0E,EAAsB1E,EAAOrE,OAAOhB,WAAaqF,EAAOrE,M,CAGzD,GAAI,aAAgB,kCAAoC,CACjDqE,EI3IR,W,MACK4E,EAA6C,KAE3CjJ,EAA+B,CACpCkJ,KAA0E,QAApE,gBAAgB,iCAA4C,gBAAQ,QAAI,gBAC9ElK,UAAW,yBACXmK,YAAa,EAAkB,gBAAiB,GAAsB,OAAc,4FACpFC,OAAQ,CACPC,MAAO,CAAC9N,IAAK,GACb+N,MAAO,CAAC/N,IAAK,KAIf,MAAO,CACNyE,OAAM,EACNuJ,SAAQ,SAAC3I,EAAQC,G,MAChBoI,EAAiB,IAAIO,EAAoB5I,EAAQC,EAAc,CAC9D7B,UAAW,yBACX+B,YAAa,SACbC,YAAwH,QAA3G,gBAAgB,iCAA4E,uBAAe,aAAIyI,IAE7HzJ,EAAO0J,YAAcT,EAAe1H,aACpCxC,EAAA,YAAe,SAChB,EACA4K,MAAK,WACJV,SAAAA,EAAgBnH,UAChBmH,EAAiB,KACjBjJ,EAAO0J,aAAc,EACrB3K,EAAA,YAAe,SAChB,EACAkB,OAAM,SAACwB,GACNwH,SAAAA,EAAgBzH,MAAMC,EACvB,EACA1B,OAAM,WACLkJ,SAAAA,EAAgBnH,SACjB,EAEF,CJsGiBmI,GACfnB,EAAuBzE,EAAOrE,OAAOhB,WAAaqF,EAClD0E,EAAsB1E,EAAOrE,OAAOhB,WAAaqF,EAAOrE,M,CAKzD,OAFAjB,EAAA,YAAe,QAAqBgK,IAE7BD,CACR,CA/H8BoB,GACvBC,EAgFP,WACC,IAAMrB,EAAwD,CAAC,EACzDC,EAA8D,CAAC,EAErE,GAAI,aAAgB,gCAAkC,CACrD,IAAM1E,EK3GR,W,MACK+F,EAAiC,KAE/BpK,EAA+B,CACpCkJ,KAAwE,QAAlE,gBAAgB,+BAA0C,gBAAQ,QAAI,OAC5ElK,UAAW,uBACXmK,YAgCM,0EAGH,OAAc,iDAAgD,icAlCjEC,OAAQ,CACPE,MAAO,CAAC/N,IAAK,GACb8N,MAAO,CAAC9N,IAAK,KAIf,MAAO,CACNyE,OAAM,EACAuJ,SAAQ,SAAC3I,G,+EAEd,OADAwJ,EAAO,IAAIC,EAAkBzJ,IACnBW,cAOV6I,EAAK5I,Q,MANJ4I,EAAO,KACPpK,EAAO0J,aAAc,EACrB3K,EAAA,YAAe,UACf,I,QAKFgI,OAAM,SAACZ,GACDiE,EAKLA,EAAKrD,OAAOZ,GAJXc,QAAQrB,MAAM,qEAKhB,EAEF,CLwEiB0E,GACfxB,EAAuBzE,EAAOrE,OAAOhB,WAAaqF,EAClD0E,EAAsB1E,EAAOrE,OAAOhB,WAAaqF,EAAOrE,M,CAKzD,OAFAjB,EAAA,YAAe,QAAqBgK,IAE7BD,CACR,CA7FiCyB,GAEhC1L,EAAiCgK,GACjC1I,EAAoCgK,GAE9BK,EAAwB,IAAIC,IAAI,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,QACpMC,EAAmB,GACvB3L,EAAA,aAAgB,sD,8EAEf,IADM4L,EAAkB,wBACAD,EACvB,UAGDA,EAAmBC,E,IAGnB,IAA2B,WAAA/P,OAAO2E,QAAQsJ,IAAqB,8BAApD,sBAAE,MAAEjJ,EAAO,MACb+J,QACR/J,EAAQF,WAAQ+J,C,kGAIjB,IAAKe,EAAsBI,IAAID,GAC9B,U,iBAIe,O,sBAAA,GAAMlP,EAAW,CAC/BiN,SAAQ,EACRC,WAAU,EACVkC,yBAA0BjC,EAC1BkC,cAAe,QACfC,SAAU,qBACVC,aAAc,WACdC,WAAY,CAAC,UAAW,kB,OAGzB,OAVMrK,EAAS,UAcf,GAAMsK,EAAmCtK,EAAQiI,EAAsBhI,IAHtE,I,OAID,OADA,SACA,GAAMsK,EAAsCvK,EAAQuJ,I,cAApD,S,gCAEA,OAAuB,IAAIrM,MAAM,6BAA8B,CAC9D8H,MAAK,I,iCAKFwF,EAAU,SAACC,GAEhB,IADmC,UACnC,CAIA,IAAMC,EAAUD,EAAME,OAEtB,GADgBD,aAAO,EAAPA,EAASE,QAA2B,UACpD,CAIA,IAAMxM,EAAY,uBACZY,EAAUuK,EAAwBnL,GACnCY,IAILb,EAAA,YAAe,WAEfa,EAAQmH,QAAO,QAAoClG,I,EACpD,GAEA,QAAoB,eAAe,SAAA4K,GAClCA,EAAIC,iBAAiB,SAAS,SAAAL,GAC7BD,EAAQC,EACT,GACD,I,KAjFC,KARA,G,OA4IF,SAAeH,EAAmCtK,EAAyB9B,EAA+C+B,G,wHACnH8K,EAAc,G,IACpB,IAA2B,WAAA/Q,OAAO2E,QAAQT,IAAS,8BAAxC,sBAAE,MAAEc,EAAO,MACT2J,UACXoC,EAAYC,KAAKhM,EAAQ2J,SAAS3I,EAAQC,G,kGAI5C,SAAMjF,QAAQiQ,IAAIF,I,cAAlB,S,WAGD,SAAeR,EAAsCvK,EAAyB9B,G,wHACvE6M,EAAc,G,IACpB,IAA2B,WAAA/Q,OAAO2E,QAAQT,IAAS,8BAAxC,sBAAE,MAAEc,EAAO,MACT2J,UACXoC,EAAYC,KAAKhM,EAAQ2J,SAAS3I,G,kGAIpC,SAAMhF,QAAQiQ,IAAIF,I,cAAlB,S,WAGD,SAAS,EAAkBrC,EAAewC,EAAc3C,GACvD,MAAkB,qFACwD2C,EAAI,kEAC1BxC,EAAK,aAAI,OAAc,0BAAyB,8FAEhCH,EAAW,OAChF,C","sources":["webpack://peachpay-for-woocommerce/./node_modules/@paypal/paypal-js/dist/esm/paypal-js.js","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/paypal/button.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/paypal/class-paypal-payment.ts","webpack://peachpay-for-woocommerce/./frontend/native-checkout/ts/paypal/class-paypal-card-payment.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/paypal/paypal.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/paypal/paypal-wallet.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/paypal/paypal-venmo.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/paypal/paypal-paylater.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/paypal/paypal-credit.ts","webpack://peachpay-for-woocommerce/./frontend/express-checkout/ts/payment/paypal/paypal-card.ts"],"sourcesContent":["/*!\n * paypal-js v7.0.3 (2023-09-19T14:17:47.731Z)\n * Copyright 2020-present, PayPal, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction findScript(url, attributes) {\n    var currentScript = document.querySelector(\"script[src=\\\"\".concat(url, \"\\\"]\"));\n    if (currentScript === null)\n        return null;\n    var nextScript = createScriptElement(url, attributes);\n    // ignore the data-uid-auto attribute that gets auto-assigned to every script tag\n    var currentScriptClone = currentScript.cloneNode();\n    delete currentScriptClone.dataset.uidAuto;\n    // check if the new script has the same number of data attributes\n    if (Object.keys(currentScriptClone.dataset).length !==\n        Object.keys(nextScript.dataset).length) {\n        return null;\n    }\n    var isExactMatch = true;\n    // check if the data attribute values are the same\n    Object.keys(currentScriptClone.dataset).forEach(function (key) {\n        if (currentScriptClone.dataset[key] !== nextScript.dataset[key]) {\n            isExactMatch = false;\n        }\n    });\n    return isExactMatch ? currentScript : null;\n}\nfunction insertScriptElement(_a) {\n    var url = _a.url, attributes = _a.attributes, onSuccess = _a.onSuccess, onError = _a.onError;\n    var newScript = createScriptElement(url, attributes);\n    newScript.onerror = onError;\n    newScript.onload = onSuccess;\n    document.head.insertBefore(newScript, document.head.firstElementChild);\n}\nfunction processOptions(options) {\n    var sdkBaseUrl = \"https://www.paypal.com/sdk/js\";\n    if (options.sdkBaseUrl) {\n        sdkBaseUrl = options.sdkBaseUrl;\n        delete options.sdkBaseUrl;\n    }\n    var optionsWithStringIndex = options;\n    var _a = Object.keys(optionsWithStringIndex)\n        .filter(function (key) {\n        return (typeof optionsWithStringIndex[key] !== \"undefined\" &&\n            optionsWithStringIndex[key] !== null &&\n            optionsWithStringIndex[key] !== \"\");\n    })\n        .reduce(function (accumulator, key) {\n        var value = optionsWithStringIndex[key].toString();\n        key = camelCaseToKebabCase(key);\n        if (key.substring(0, 4) === \"data\") {\n            accumulator.dataAttributes[key] = value;\n        }\n        else {\n            accumulator.queryParams[key] = value;\n        }\n        return accumulator;\n    }, {\n        queryParams: {},\n        dataAttributes: {},\n    }), queryParams = _a.queryParams, dataAttributes = _a.dataAttributes;\n    if (queryParams[\"merchant-id\"] &&\n        queryParams[\"merchant-id\"].indexOf(\",\") !== -1) {\n        dataAttributes[\"data-merchant-id\"] = queryParams[\"merchant-id\"];\n        queryParams[\"merchant-id\"] = \"*\";\n    }\n    return {\n        url: \"\".concat(sdkBaseUrl, \"?\").concat(objectToQueryString(queryParams)),\n        dataAttributes: dataAttributes,\n    };\n}\nfunction camelCaseToKebabCase(str) {\n    var replacer = function (match, indexOfMatch) {\n        return (indexOfMatch ? \"-\" : \"\") + match.toLowerCase();\n    };\n    return str.replace(/[A-Z]+(?![a-z])|[A-Z]/g, replacer);\n}\nfunction objectToQueryString(params) {\n    var queryString = \"\";\n    Object.keys(params).forEach(function (key) {\n        if (queryString.length !== 0)\n            queryString += \"&\";\n        queryString += key + \"=\" + params[key];\n    });\n    return queryString;\n}\nfunction createScriptElement(url, attributes) {\n    if (attributes === void 0) { attributes = {}; }\n    var newScript = document.createElement(\"script\");\n    newScript.src = url;\n    Object.keys(attributes).forEach(function (key) {\n        newScript.setAttribute(key, attributes[key]);\n        if (key === \"data-csp-nonce\") {\n            newScript.setAttribute(\"nonce\", attributes[\"data-csp-nonce\"]);\n        }\n    });\n    return newScript;\n}\n\n/**\n * Load the Paypal JS SDK script asynchronously.\n *\n * @param {Object} options - used to configure query parameters and data attributes for the JS SDK.\n * @param {PromiseConstructor} [PromisePonyfill=window.Promise] - optional Promise Constructor ponyfill.\n * @return {Promise<Object>} paypalObject - reference to the global window PayPal object.\n */\nfunction loadScript(options, PromisePonyfill) {\n    if (PromisePonyfill === void 0) { PromisePonyfill = Promise; }\n    validateArguments(options, PromisePonyfill);\n    // resolve with null when running in Node or Deno\n    if (typeof document === \"undefined\")\n        return PromisePonyfill.resolve(null);\n    var _a = processOptions(options), url = _a.url, dataAttributes = _a.dataAttributes;\n    var namespace = dataAttributes[\"data-namespace\"] || \"paypal\";\n    var existingWindowNamespace = getPayPalWindowNamespace(namespace);\n    // resolve with the existing global paypal namespace when a script with the same params already exists\n    if (findScript(url, dataAttributes) && existingWindowNamespace) {\n        return PromisePonyfill.resolve(existingWindowNamespace);\n    }\n    return loadCustomScript({\n        url: url,\n        attributes: dataAttributes,\n    }, PromisePonyfill).then(function () {\n        var newWindowNamespace = getPayPalWindowNamespace(namespace);\n        if (newWindowNamespace) {\n            return newWindowNamespace;\n        }\n        throw new Error(\"The window.\".concat(namespace, \" global variable is not available.\"));\n    });\n}\n/**\n * Load a custom script asynchronously.\n *\n * @param {Object} options - used to set the script url and attributes.\n * @param {PromiseConstructor} [PromisePonyfill=window.Promise] - optional Promise Constructor ponyfill.\n * @return {Promise<void>} returns a promise to indicate if the script was successfully loaded.\n */\nfunction loadCustomScript(options, PromisePonyfill) {\n    if (PromisePonyfill === void 0) { PromisePonyfill = Promise; }\n    validateArguments(options, PromisePonyfill);\n    var url = options.url, attributes = options.attributes;\n    if (typeof url !== \"string\" || url.length === 0) {\n        throw new Error(\"Invalid url.\");\n    }\n    if (typeof attributes !== \"undefined\" && typeof attributes !== \"object\") {\n        throw new Error(\"Expected attributes to be an object.\");\n    }\n    return new PromisePonyfill(function (resolve, reject) {\n        // resolve with undefined when running in Node or Deno\n        if (typeof document === \"undefined\")\n            return resolve();\n        insertScriptElement({\n            url: url,\n            attributes: attributes,\n            onSuccess: function () { return resolve(); },\n            onError: function () {\n                var defaultError = new Error(\"The script \\\"\".concat(url, \"\\\" failed to load. Check the HTTP status code and response body in DevTools to learn more.\"));\n                return reject(defaultError);\n            },\n        });\n    });\n}\nfunction getPayPalWindowNamespace(namespace) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return window[namespace];\n}\nfunction validateArguments(options, PromisePonyfill) {\n    if (typeof options !== \"object\" || options === null) {\n        throw new Error(\"Expected an options object.\");\n    }\n    if (typeof PromisePonyfill !== \"undefined\" &&\n        typeof PromisePonyfill !== \"function\") {\n        throw new Error(\"Expected PromisePonyfill to be a function.\");\n    }\n}\n\n// replaced with the package.json version at build time\nvar version = \"7.0.3\";\n\nexport { loadCustomScript, loadScript, version };\n","import {$qsAll, isMobile} from '../../../../@shared/ts/dom';\nimport {type ModalPage, type LoadingMode} from '../../models/IEnvironment';\nimport {DefaultCart} from '../../reducers/cartReducer';\nimport {Environment} from '../../reducers/environmentReducer';\nimport {PaymentConfiguration} from '../../reducers/paymentConfigurationReducer';\nimport {store} from '../../store';\nimport {formatCurrencyString} from '../../util/currency';\nimport {getLocaleText} from '../../util/translation';\nimport {type PayPalGateway, type PayPalButtonGateway} from './paypal';\n\nfunction setupPayPalHostedButtonRendering(gateways: Record<string, PayPalButtonGateway>) {\n\tstore.subscribe(() => {\n\t\trenderHostedButtonDisplayState(\n\t\t\tPaymentConfiguration.selectedGateway(),\n\t\t\tEnvironment.modalUI.loadingMode(),\n\t\t);\n\t\tcontrolHostedButtonMounts(gateways);\n\t});\n}\n\nfunction setupPayPalNonHostedButtonRendering(gateways: Record<string, PayPalGateway>) {\n\tstore.subscribe(() => {\n\t\trenderButtonDisplay(\n\t\t\tObject.keys(gateways),\n\t\t\tPaymentConfiguration.selectedGateway(),\n\t\t\tEnvironment.modalUI.page(),\n\t\t\tEnvironment.modalUI.loadingMode(),\n\t\t);\n\n\t\trenderButtonLoading(\n\t\t\tEnvironment.modalUI.loadingMode(),\n\t\t);\n\t});\n}\n\n/**\n * Renders the paypal hosted button loading state.\n */\nfunction renderHostedButtonDisplayState(gatewayId: string, mode: LoadingMode) {\n\t// Enable/Disable button\n\tif (gatewayId.startsWith('peachpay_paypal_') && (gatewayId !== 'peachpay_paypal_card') && mode === 'finished' && DefaultCart.contents().length > 0) {\n\t\t$qsAll('.paypal-pay-btn-container', $element => {\n\t\t\t$element.classList.remove('hide');\n\t\t});\n\t\t$qsAll('.paypal-pay-spinner-container', $element => {\n\t\t\t$element.classList.add('hide');\n\t\t});\n\t} else if (gatewayId.startsWith('peachpay_paypal_') && (gatewayId !== 'peachpay_paypal_card') && DefaultCart.contents().length > 0) {\n\t\t$qsAll('.paypal-pay-btn-container', $element => {\n\t\t\t$element.classList.add('hide');\n\t\t});\n\t\t$qsAll('.paypal-pay-spinner-container', $element => {\n\t\t\t$element.classList.remove('hide');\n\t\t});\n\t} else {\n\t\t$qsAll('.paypal-pay-btn-container', $element => {\n\t\t\t$element.classList.add('hide');\n\t\t});\n\t\t$qsAll('.paypal-pay-spinner-container', $element => {\n\t\t\t$element.classList.add('hide');\n\t\t});\n\t}\n}\n\nfunction controlHostedButtonMounts(gateways: Record<string, PayPalButtonGateway>) {\n\tif (!PaymentConfiguration.selectedGateway().startsWith('peachpay_paypal_') && (PaymentConfiguration.selectedGateway() !== 'peachpay_paypal_card')) {\n\t\treturn;\n\t}\n\n\t// Sorting the methods makes sure the last active method is always detached before the new method is\n\t// attached because they may share some containers.\n\tfor (const [_, gateway] of Object.entries(gateways).sort(([_, m1], [__, m2]) => (m2.state?.mountTarget?.length ?? 0) - (m1.state?.mountTarget.length ?? 0))) {\n\t\tif (!gateway.state) {\n\t\t\tgateway.state = {\n\t\t\t\tmountTarget: '',\n\t\t\t};\n\t\t}\n\n\t\tconst newMountTarget = customHostedButtonMountTarget();\n\t\tif (gateway.state.mountTarget && gateway.state.mountTarget !== newMountTarget) {\n\t\t\tgateway?.detach?.();\n\t\t\tgateway.state.mountTarget = '';\n\t\t}\n\n\t\tif (PaymentConfiguration.selectedGateway() === gateway.config.gatewayId) {\n\t\t\tif (gateway.state.mountTarget) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tgateway?.attach?.(newMountTarget);\n\n\t\t\tgateway.state.mountTarget = newMountTarget;\n\t\t} else {\n\t\t\tif (!gateway.state.mountTarget) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tgateway?.detach?.();\n\n\t\t\tgateway.state.mountTarget = '';\n\t\t}\n\t}\n}\n\nfunction customHostedButtonMountTarget(): string {\n\tif (isMobile()) {\n\t\treturn '#mobile-customer-pay-button .paypal-pay-btn-container';\n\t}\n\n\treturn '#pay-button .paypal-pay-btn-container';\n}\n\n/**\n * Renders the paypal non hosted button display state.\n */\nfunction renderButtonDisplay(gatewayList: string[], gatewayId: string, page: ModalPage, loadingMode: LoadingMode) {\n\t// Show/hide PayPal non hosted button container\n\tif (gatewayList.includes(gatewayId) && page === 'payment') {\n\t\t$qsAll('.paypal-btn-container', $element => {\n\t\t\t$element.classList.remove('hide');\n\t\t});\n\t} else {\n\t\t$qsAll('.paypal-btn-container', $element => {\n\t\t\t$element.classList.add('hide');\n\t\t});\n\t}\n\n\t// Hide/Show button\n\tif (loadingMode === 'loading') {\n\t\t$qsAll('.paypal-btn', $element => {\n\t\t\t$element.classList.add('hide');\n\t\t});\n\t} else {\n\t\t$qsAll('.paypal-btn', $element => {\n\t\t\t$element.classList.remove('hide');\n\t\t});\n\t}\n}\n\n/**\n * Renders the PayPal non hosted button loading state.\n */\nfunction renderButtonLoading(mode: LoadingMode) {\n\t// Show/hide the external spinner\n\tif (mode === 'loading') {\n\t\t$qsAll('.paypal-spinner-container', $element => {\n\t\t\t$element.classList.remove('hide');\n\t\t});\n\t} else {\n\t\t$qsAll('.paypal-spinner-container', $element => {\n\t\t\t$element.classList.add('hide');\n\t\t});\n\t}\n\n\t// Show/hide the internal spinner\n\tif (mode === 'processing') {\n\t\t$qsAll('.paypal-btn-spinner', $element => {\n\t\t\t$element.classList.remove('hide');\n\t\t});\n\t} else {\n\t\t$qsAll('.paypal-btn-spinner', $element => {\n\t\t\t$element.classList.add('hide');\n\t\t});\n\t}\n\n\t// Show/hide processing message\n\tif (mode === 'processing') {\n\t\t$qsAll('.paypal-btn > .button-text', $element => {\n\t\t\t$element.innerHTML = getLocaleText('Processing');\n\t\t});\n\t} else {\n\t\t$qsAll('.paypal-btn > .button-text', $element => {\n\t\t\t$element.innerHTML = `${getLocaleText('Pay')} ${formatCurrencyString(DefaultCart.total())}`;\n\t\t});\n\t}\n\n\t// Enable/disable the PayPal non hosted button\n\tif (mode === 'finished') {\n\t\t$qsAll<HTMLInputElement>('.paypal-btn', $element => {\n\t\t\t$element.disabled = false;\n\t\t});\n\t} else {\n\t\t$qsAll<HTMLInputElement>('.paypal-btn', $element => {\n\t\t\t$element.disabled = true;\n\t\t});\n\t}\n}\n\nexport {\n\tsetupPayPalHostedButtonRendering,\n\tsetupPayPalNonHostedButtonRendering,\n};\n","import {setOrderError} from './../../reducers/peachPayOrderReducer';\nimport {startModalProcessing, stopModalLoading} from './../../reducers/environmentReducer';\nimport {type Transaction, type OrderService, displayPaymentErrorMessage, requestCartCalculation} from './../order';\nimport {type PayPalNamespace, type PayPalButtonsComponent, type CreateOrderData, type CreateOrderActions, type OnApproveData, type OnApproveActions, type FUNDING_SOURCE, type PayPalButtonsComponentOptions, type OnCancelledActions} from '@paypal/paypal-js';\nimport {$qs} from '../../../../@shared/ts/dom';\nimport {getErrorString} from '../../../../@shared/ts/error';\nimport {FeatureFlag} from '../../../../@type/features';\nimport {Feature} from '../../reducers/environmentReducer';\nimport {type PayPalPaymentData} from './paypal';\nimport {store} from '../../store';\nimport {getLocaleText} from '../../util/translation';\nimport {type IResponse} from '../../../../@type/response';\n\nclass PayPalPaymentButton {\n\tprivate readonly paypal: PayPalNamespace;\n\tprivate readonly orderService: OrderService;\n\tprivate readonly gatewayId: string;\n\tprivate readonly buttonStyle: PayPalButtonsComponentOptions['style'];\n\tprivate readonly fundingType: FUNDING_SOURCE;\n\n\tprivate button: PayPalButtonsComponent | null;\n\tprivate mountContainer: HTMLDivElement | null;\n\tprivate isMounted: boolean;\n\n\tprivate currentPaymentDetails: PayPalPaymentData | null;\n\tprivate currentTransaction: Transaction | null;\n\n\tconstructor(paypal: PayPalNamespace, orderService: OrderService, options: {\n\t\tgatewayId: string;\n\t\tfundingType: FUNDING_SOURCE;\n\t\tbuttonStyle: PayPalButtonsComponentOptions['style'];\n\t}) {\n\t\tthis.paypal = paypal;\n\t\tthis.orderService = orderService;\n\t\tthis.gatewayId = options.gatewayId;\n\t\tthis.fundingType = options.fundingType;\n\t\tthis.buttonStyle = options.buttonStyle;\n\n\t\tthis.isMounted = false;\n\t\tthis.mountContainer = null;\n\n\t\tthis.currentPaymentDetails = null;\n\t\tthis.currentTransaction = null;\n\n\t\tthis.button = this.createButtonComponent();\n\t}\n\n\tpublic isEligible(): boolean {\n\t\treturn this.button?.isEligible() ?? false;\n\t}\n\n\tpublic mount(selector: string) {\n\t\tif (this.isMounted) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst $container = $qs(selector);\n\t\tif (!$container) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.button) {\n\t\t\tthis.button = this.createButtonComponent();\n\t\t}\n\n\t\tif (this.mountContainer) {\n\t\t\tthis.mountContainer?.classList.remove('hide');\n\t\t} else {\n\t\t\tthis.mountContainer = document.createElement('div');\n\t\t\t$container.insertAdjacentElement('beforeend', this.mountContainer);\n\t\t\tthis.button?.render(this.mountContainer).catch(() => { /**/});\n\t\t}\n\n\t\tthis.isMounted = true;\n\t}\n\n\tpublic unmount() {\n\t\tif (!this.isMounted) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.mountContainer?.remove();\n\t\tthis.mountContainer = null;\n\t\tthis.button = null;\n\t\tthis.isMounted = false;\n\t}\n\n\tprivate createButtonComponent(): PayPalButtonsComponent | null {\n\t\tconst {orderService} = this;\n\t\tconst gateway = this;\n\t\t// eslint-disable-next-line new-cap\n\t\treturn this.paypal?.Buttons?.({\n\t\t\tfundingSource: this.fundingType,\n\t\t\tstyle: this.buttonStyle,\n\t\t\tonClick() {\n\t\t\t\tstore.dispatch(startModalProcessing());\n\t\t\t},\n\t\t\tasync createOrder(_data: CreateOrderData, _actions: CreateOrderActions) {\n\t\t\t\ttry {\n\t\t\t\t\tconst {error: transactionError, result: transaction} = await orderService.startTransaction(gateway.gatewayId);\n\t\t\t\t\tif (transactionError || !transaction) {\n\t\t\t\t\t\tconst errorMessage = transactionError ? getErrorString(transactionError) : getLocaleText('An unknown error occured while starting the transaction. Please refresh the page and try again.');\n\t\t\t\t\t\tdisplayPaymentErrorMessage(errorMessage);\n\n\t\t\t\t\t\tstore.dispatch(stopModalLoading());\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\n\t\t\t\t\tgateway.currentTransaction = transaction;\n\n\t\t\t\t\tconst {error: orderError, result: orderResult} = await orderService.placeOrder(gateway.currentTransaction);\n\n\t\t\t\t\tif (orderError || !orderResult || orderResult.result !== 'success') {\n\t\t\t\t\t\tstore.dispatch(stopModalLoading());\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\n\t\t\t\t\tconst dataURL = new URL(orderResult.redirect);\n\t\t\t\t\tconst [name, data] = dataURL.hash.split('=');\n\t\t\t\t\tif (name !== '#payment_data' || !data) {\n\t\t\t\t\t\tawait gateway.currentTransaction.complete({\n\t\t\t\t\t\t\tnote: 'Failed to retrieve paypal payment details from url: ' + orderResult.redirect,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// Any failure after an order risks invalid nonces in the case of a user being logged in. To prevent\n\t\t\t\t\t\t// possible problems we will get a new cart calculation.\n\t\t\t\t\t\tawait requestCartCalculation();\n\n\t\t\t\t\t\tstore.dispatch(stopModalLoading());\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\n\t\t\t\t\tconst paymentData = JSON.parse(atob(decodeURIComponent(data))) as PayPalPaymentData;\n\n\t\t\t\t\tgateway.currentPaymentDetails = paymentData;\n\t\t\t\t\treturn paymentData.data.id;\n\t\t\t\t} catch (error) {\n\t\t\t\t\tawait gateway.currentTransaction?.complete({\n\t\t\t\t\t\tnote: 'Failed creating paypal order: ' + getErrorString(error),\n\t\t\t\t\t});\n\n\t\t\t\t\t// Any failure after an order risks invalid nonces in the case of a user being logged in. To prevent\n\t\t\t\t\t// possible problems we will get a new cart calculation.\n\t\t\t\t\tawait requestCartCalculation();\n\n\t\t\t\t\tstore.dispatch(stopModalLoading());\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t},\n\t\t\tasync onApprove(_data: OnApproveData, actions: OnApproveActions) {\n\t\t\t\tif (!gateway.currentPaymentDetails?.order_id) {\n\t\t\t\t\tawait gateway.currentTransaction?.complete({\n\t\t\t\t\t\tnote: 'Failed approving paypal order: \"Missing payment details\"',\n\t\t\t\t\t});\n\t\t\t\t\tactions.restart();\n\n\t\t\t\t\t// Any failure after an order risks invalid nonces in the case of a user being logged in. To prevent\n\t\t\t\t\t// possible problems we will get a new cart calculation.\n\t\t\t\t\tawait requestCartCalculation();\n\n\t\t\t\t\tstore.dispatch(stopModalLoading());\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst approveURL = Feature.metadata<string>(FeatureFlag.PAYPAL_GATEWAYS, 'approve_order_url');\n\n\t\t\t\tif (!approveURL) {\n\t\t\t\t\tawait gateway.currentTransaction?.complete({\n\t\t\t\t\t\tnote: 'Failed approving paypal order: \"Missing required approve URL or approve URL security nonce\"',\n\t\t\t\t\t});\n\t\t\t\t\tactions.restart();\n\n\t\t\t\t\t// Any failure after an order risks invalid nonces in the case of a user being logged in. To prevent\n\t\t\t\t\t// possible problems we will get a new cart calculation.\n\t\t\t\t\tawait requestCartCalculation();\n\n\t\t\t\t\tstore.dispatch(stopModalLoading());\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst formData = new FormData();\n\t\t\t\tformData.append('order_id', gateway.currentPaymentDetails.order_id);\n\n\t\t\t\tconst response = await fetch(approveURL, {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\tbody: formData,\n\t\t\t\t});\n\n\t\t\t\ttry {\n\t\t\t\t\tconst json = await response.json() as IResponse<void>;\n\t\t\t\t\tif (!json.success) {\n\t\t\t\t\t\tawait gateway.currentTransaction?.complete({\n\t\t\t\t\t\t\tnote: json.message,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tactions.restart();\n\n\t\t\t\t\t\t// Any failure after an order risks invalid nonces in the case of a user being logged in. To prevent\n\t\t\t\t\t\t// possible problems we will get a new cart calculation.\n\t\t\t\t\t\tawait requestCartCalculation();\n\n\t\t\t\t\t\tstore.dispatch(stopModalLoading());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconst paypalOrder = await actions.order?.get();\n\t\t\t\t\tif (paypalOrder?.status !== 'APPROVED' && paypalOrder?.status !== 'COMPLETED') {\n\t\t\t\t\t\tstore.dispatch(setOrderError(getLocaleText('PayPal order failed to finish.')));\n\t\t\t\t\t\tawait gateway.currentTransaction?.complete({\n\t\t\t\t\t\t\tnote: `PayPal order failed to finish: ${getErrorString(error)}`,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tactions.restart();\n\n\t\t\t\t\t\t// Any failure after an order risks invalid nonces in the case of a user being logged in. To prevent\n\t\t\t\t\t\t// possible problems we will get a new cart calculation.\n\t\t\t\t\t\tawait requestCartCalculation();\n\n\t\t\t\t\t\tstore.dispatch(stopModalLoading());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (window.top) {\n\t\t\t\t\twindow.top.location.href = gateway.currentPaymentDetails.success_url;\n\t\t\t\t} else {\n\t\t\t\t\tactions.redirect(gateway.currentPaymentDetails.success_url);\n\t\t\t\t}\n\t\t\t},\n\t\t\tasync onCancel(_data: Record<string, unknown>, _actions: OnCancelledActions) {\n\t\t\t\tif (!gateway.currentPaymentDetails) {\n\t\t\t\t\tawait gateway.currentTransaction?.complete({\n\t\t\t\t\t\tpaymentStatus: 'CANCELED',\n\t\t\t\t\t\torderStatus: 'unknown',\n\t\t\t\t\t\tnote: 'Payment canceled by customer. Order status \"unknown\" because of missing payment details.',\n\t\t\t\t\t});\n\n\t\t\t\t\t// Any failure after an order risks invalid nonces in the case of a user being logged in. To prevent\n\t\t\t\t\t// possible problems we will get a new cart calculation.\n\t\t\t\t\tawait requestCartCalculation();\n\n\t\t\t\t\tstore.dispatch(stopModalLoading());\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tawait gateway?.currentTransaction?.complete({\n\t\t\t\t\tpaymentStatus: 'CANCELED',\n\t\t\t\t\torderStatus: 'canceled',\n\t\t\t\t});\n\n\t\t\t\tcancelOrder(gateway.currentPaymentDetails.cancel_url);\n\n\t\t\t\tstore.dispatch(stopModalLoading());\n\t\t\t},\n\t\t\tasync onError(error: Record<string, unknown>) {\n\t\t\t\tawait gateway.currentTransaction?.complete({\n\t\t\t\t\tnote: getErrorString(error),\n\t\t\t\t});\n\n\t\t\t\tgateway.currentTransaction = null;\n\t\t\t\tgateway.currentPaymentDetails = null;\n\n\t\t\t\t// Any failure after an order risks invalid nonces in the case of a user being logged in. To prevent\n\t\t\t\t// possible problems we will get a new cart calculation.\n\t\t\t\tawait requestCartCalculation();\n\n\t\t\t\tstore.dispatch(stopModalLoading());\n\t\t\t},\n\t\t}) ?? null;\n\t}\n}\n\nfunction cancelOrder(url: string) {\n\ttry {\n\t\tconst xhr = new XMLHttpRequest();\n\t\txhr.open('GET', url);\n\t\txhr.send();\n\t} catch {\n\t\t// Do no harm\n\t}\n}\n\nexport {\n\tPayPalPaymentButton,\n};\n","\nimport {type HostedFieldsHandler, type HostedFieldsEvent, type PayPalHostedFieldsComponent, type HostedFieldsHostedFieldsFieldData, type PayPalHostedFieldsComponentOptions, type PayPalNamespace, type OnApproveActions, type OnApproveData} from '@paypal/paypal-js';\nimport {$qs} from '../../../@shared/ts/dom';\nimport {maybeFetchWP} from '../../../@shared/ts/maybe';\nimport {FeatureFlag} from '../../../@type/features';\nimport {getErrorString} from '../../../@shared/ts/error';\nimport {type PayPalPaymentData} from '../../../express-checkout/ts/payment/paypal/paypal';\nimport {getLocaleText} from '../../../express-checkout/ts/util/translation';\nimport {type PaymentAttempt} from '../../../@shared/ts/paymentAttempt';\n\n// PayPal types from the \"@paypal/paypal-js\" library are incorrect/out of date so we need to override a few of them here.\nexport type HostedFieldRender = (targetContainer: string | HTMLElement) => void;\ntype HostedField = (HostedFieldsHandler & {render: HostedFieldRender});\ntype HostedFieldsComponent = (PayPalHostedFieldsComponent & {\n\tNameField: (options: unknown) => HostedField;\n\tNumberField: (options: unknown) => HostedField;\n\tExpiryField: (options: unknown) => HostedField;\n\tCVVField: (options: unknown) => HostedField;\n\tsubmit: () => Promise<unknown>;\n});\ntype PayPalInstance = PayPalNamespace & {\n\tCardFields?: (\n\t\toptions?: PayPalHostedFieldsComponentOptions & {onApprove: (data: OnApproveData, actions: OnApproveActions) => void}\n\t) => HostedFieldsComponent;\n};\ntype HostedFieldEvent = HostedFieldsEvent & {isFormValid: boolean} & {fields: {cardNumberField?: HostedFieldsHostedFieldsFieldData; cardExpiryField?: HostedFieldsHostedFieldsFieldData; cardCvvField?: HostedFieldsHostedFieldsFieldData}};\n\nclass PayPalCardPayment {\n\tprivate readonly paypal: PayPalInstance | null;\n\tprivate readonly cardFields: HostedFieldsComponent | null;\n\n\tprivate numberField: HostedField | null;\n\tprivate expiryField: HostedField | null;\n\tprivate cvvField: HostedField | null;\n\n\tprivate paymentAttempt: PaymentAttempt | null;\n\n\tpublic constructor(paypal: PayPalInstance) {\n\t\tthis.paypal = paypal;\n\t\tif (!this.paypal) {\n\t\t\tthrow new Error('PayPal instance is not valid');\n\t\t}\n\n\t\t// Since JS is funky and the \"this\" value is relative inside arrow functions we assign it to a variable which is captured in the following callbacks\n\t\tconst cardPayment = this;\n\n\t\t// eslint-disable-next-line new-cap\n\t\tthis.cardFields = this.paypal.CardFields?.({\n\t\t\tcreateOrder: async () => cardPayment.createOrder(),\n\t\t\tonApprove: async data => cardPayment.onApprove(data),\n\t\t\tonError: async error => cardPayment.onError(error),\n\t\t}) ?? null;\n\n\t\tthis.numberField = null;\n\t\tthis.expiryField = null;\n\t\tthis.cvvField = null;\n\n\t\tthis.paymentAttempt = null;\n\t}\n\n\tpublic gatewayId() {\n\t\treturn 'peachpay_paypal_card';\n\t}\n\n\tpublic isEligible() {\n\t\treturn this.cardFields?.isEligible() ?? false;\n\t}\n\n\tpublic isMounted() {\n\t\treturn $qs('#pp-paypal-card-element')?.dataset['isMounted'] === 'true';\n\t}\n\n\tpublic mount() {\n\t\tif (!this.isEligible()) {\n\t\t\tthrow new Error(`${this.gatewayId()} is not eligible for this checkout. Element not mounted.`);\n\t\t}\n\n\t\t// Since JS is funky and the \"this\" value is relative inside arrow functions we assign it to a variable which is captured in the following callbacks\n\t\tconst cardPayment = this;\n\n\t\tconst inputEvents = {\n\t\t\tonFocus(data: HostedFieldEvent) {\n\t\t\t\tcardPayment.onFocus(data);\n\t\t\t},\n\t\t\tonChange(data: HostedFieldEvent) {\n\t\t\t\tcardPayment.onChange(data);\n\t\t\t},\n\t\t\tonBlur(data: HostedFieldEvent) {\n\t\t\t\tcardPayment.onBlur(data);\n\t\t\t},\n\t\t\tonInputSubmitRequest(data: HostedFieldEvent) {\n\t\t\t\tcardPayment.onInputSubmitRequest(data);\n\t\t\t},\n\t\t};\n\n\t\t// eslint-disable-next-line new-cap\n\t\tthis.numberField = this.cardFields?.NumberField({inputEvents}) ?? null;\n\t\tconst numberFieldContainer = $qs('#pp-paypal-card-number');\n\t\tif (this.numberField && numberFieldContainer) {\n\t\t\tnumberFieldContainer.innerHTML = '';\n\t\t\tthis.numberField.render(numberFieldContainer);\n\t\t}\n\n\t\t// eslint-disable-next-line new-cap\n\t\tthis.expiryField = this.cardFields?.ExpiryField({inputEvents}) ?? null;\n\t\tconst expiryFieldContainer = $qs('#pp-paypal-card-expiry');\n\t\tif (this.expiryField && expiryFieldContainer) {\n\t\t\texpiryFieldContainer.innerHTML = '';\n\t\t\tthis.expiryField.render(expiryFieldContainer);\n\t\t}\n\n\t\t// eslint-disable-next-line new-cap\n\t\tthis.cvvField = this.cardFields?.CVVField({inputEvents}) ?? null;\n\t\tconst cvvFieldContainer = $qs('#pp-paypal-card-cvv');\n\t\tif (this.cvvField && cvvFieldContainer) {\n\t\t\tcvvFieldContainer.innerHTML = '';\n\t\t\tthis.cvvField.render(cvvFieldContainer);\n\t\t}\n\n\t\t$qs('#pp-paypal-card-element')?.setAttribute('data-is-mounted', 'true');\n\t}\n\n\t/**\n     * Used to submit the checkout for PayPal card payments.\n     */\n\tpublic submit(paymentAttempt: PaymentAttempt) {\n\t\tthis.paymentAttempt = paymentAttempt;\n\n\t\tif (!this.isMounted()) {\n\t\t\tconsole.error('PayPal card element is not mounted.');\n\t\t\treturn;\n\t\t}\n\n\t\tpaymentAttempt.createTransaction(this.gatewayId())\n\t\t\t.then(() => this.cardFields?.submit()/* If card submitting(Tokenizing) is successful then the method \"createOrder\" is called */)\n\t\t\t.catch(async (error: {message?: string}) => {\n\t\t\t\tlet message = getLocaleText('An error occurred while validating your card. Please check your card number or try another card.');\n\t\t\t\tswitch (error.message) {\n\t\t\t\t\tcase 'INELIGIBLE_CARD_VENDOR':\n\t\t\t\t\t{\n\t\t\t\t\t\tmessage = getLocaleText('Your card is not eligible for this payment method. Please try another card.');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t{\n\t\t\t\t\t\tconsole.error(error);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tawait paymentAttempt.completeTransaction({note: message});\n\t\t\t\tpaymentAttempt.setPaymentMessage(message);\n\t\t\t\tpaymentAttempt.stopLoading();\n\t\t\t});\n\t}\n\n\t/**\n     * Called by PayPal after a customer requests to submit the payment. This method is responsible\n     * for creating the paypal order.\n     */\n\tprivate async createOrder() {\n\t\tconst paymentAttempt = this.paymentAttempt!;\n\n\t\ttry {\n\t\t\tconst result = await paymentAttempt.submitOrder<PayPalPaymentData>('paypal');\n\n\t\t\treturn result?.data.id;\n\t\t} catch (error: unknown) {\n\t\t\tconsole.error(error);\n\n\t\t\tawait paymentAttempt.completeTransaction({\n\t\t\t\tpaymentStatus: 'unperformed',\n\t\t\t\torderStatus: 'creationfailed',\n\t\t\t\tnote: getErrorString(error),\n\t\t\t});\n\n\t\t\tpaymentAttempt.setPaymentMessage(getLocaleText('An error occurred while creating your order. Please try again.'));\n\t\t\tpaymentAttempt.stopLoading();\n\n\t\t\treturn '';\n\t\t}\n\t}\n\n\t/**\n     * Called by PayPal after the customer successfully completes any prompts like 3D secure.\n     * This method is responsible for capturing the order payment.\n     */\n\tprivate async onApprove(_data: {orderID: string}) {\n\t\tconst paymentAttempt = this.paymentAttempt!;\n\n\t\tconst approveURL = paymentAttempt.featureMetadata(FeatureFlag.PAYPAL_GATEWAYS, 'approve_order_url');\n\t\tif (!approveURL) {\n\t\t\tconst errorMessage = getLocaleText('Missing required dependencies to Capture/Confirm PayPal order.');\n\n\t\t\tawait paymentAttempt.completeTransaction({note: errorMessage});\n\t\t\tpaymentAttempt.setPaymentMessage(errorMessage);\n\t\t\tpaymentAttempt.stopLoading();\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst formData = new FormData();\n\t\tformData.append('order_id', paymentAttempt.getOrderId());\n\n\t\tconst {result, error} = await maybeFetchWP(approveURL, {\n\t\t\tmethod: 'POST',\n\t\t\tbody: formData,\n\t\t});\n\n\t\tif (error || !result) {\n\t\t\tconst errorMessage = getLocaleText('An error occurred while capturing your order. Please try again.');\n\n\t\t\tawait paymentAttempt.completeTransaction({note: errorMessage});\n\t\t\tpaymentAttempt.setPaymentMessage(errorMessage);\n\t\t\tpaymentAttempt.stopLoading();\n\t\t}\n\n\t\tpaymentAttempt.redirectSuccess();\n\t}\n\n\t/**\n     * Called by PayPal after any API errors. This method can be used for presenting a message\n     * to the customer. If errors make it here they are not fixable at this point and the customer must attempt\n     * payment again.\n     */\n\tprivate async onError(_error: unknown) {\n\t\t// console.error(error);\n\t}\n\n\t/**\n     * Called by PayPal when the customer focuses any of the hosted card fields.\n     */\n\tprivate onFocus(data: HostedFieldEvent) {\n\t\tswitch (data.emittedBy as unknown as string) {\n\t\t\tcase 'number':\n\t\t\t{\n\t\t\t\tif (data.fields.cardNumberField?.isPotentiallyValid) {\n\t\t\t\t\tthis.setElementMessage('info', 'Enter your card number.');\n\t\t\t\t} else {\n\t\t\t\t\tthis.setElementMessage('error', 'Invalid card number.');\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase 'expiry':\n\t\t\t{\n\t\t\t\tif (data.fields.cardExpiryField?.isPotentiallyValid) {\n\t\t\t\t\tthis.setElementMessage('info', 'Enter your expiration date.');\n\t\t\t\t} else {\n\t\t\t\t\tthis.setElementMessage('error', 'Invalid expiration date.');\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase 'cvv':\n\t\t\t{\n\t\t\t\tif (data.fields.cardCvvField?.isPotentiallyValid) {\n\t\t\t\t\tthis.setElementMessage('info', 'Enter the security code.');\n\t\t\t\t} else {\n\t\t\t\t\tthis.setElementMessage('error', 'Invalid security code.');\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n     * Called by PayPal when the customer changes any of the hosted card fields.\n     */\n\tprivate onChange(data: HostedFieldEvent) {\n\t\tswitch (data.emittedBy as unknown as string) {\n\t\t\tcase 'number':\n\t\t\t{\n\t\t\t\tif (data.fields.cardNumberField?.isPotentiallyValid) {\n\t\t\t\t\tthis.setElementMessage('info', 'Enter your card number.');\n\t\t\t\t} else {\n\t\t\t\t\tthis.setElementMessage('error', 'Invalid card number.');\n\t\t\t\t}\n\n\t\t\t\tif (data.fields.cardNumberField?.isValid) {\n\t\t\t\t\tthis.setElementMessage('clear');\n\t\t\t\t\tthis.expiryField?.focus('expiry')\n\t\t\t\t\t\t.catch(() => {/* */});\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase 'expiry':\n\t\t\t{\n\t\t\t\tif (data.fields.cardExpiryField?.isPotentiallyValid) {\n\t\t\t\t\tthis.setElementMessage('info', 'Enter your expiration date.');\n\t\t\t\t} else {\n\t\t\t\t\tthis.setElementMessage('error', 'Invalid expiration date.');\n\t\t\t\t}\n\n\t\t\t\tif (data.fields.cardExpiryField?.isValid) {\n\t\t\t\t\tthis.setElementMessage('clear');\n\t\t\t\t\tthis.cvvField?.focus('cvv')\n\t\t\t\t\t\t.catch(() => {/* */});\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase 'cvv':\n\t\t\t{\n\t\t\t\tif (data.fields.cardCvvField?.isPotentiallyValid) {\n\t\t\t\t\tthis.setElementMessage('error', 'Enter the security code.');\n\t\t\t\t} else {\n\t\t\t\t\tthis.setElementMessage('error', 'Invalid security code.');\n\t\t\t\t}\n\n\t\t\t\tif (data.fields.cardCvvField?.isValid) {\n\t\t\t\t\tthis.setElementMessage('clear');\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n     * Called by PayPal when the customer blurs any of the hosted card fields.\n     */\n\tprivate onBlur(data: HostedFieldEvent) {\n\t\tif (!data.fields.cardNumberField?.isValid) {\n\t\t\tif (data.fields.cardNumberField?.isPotentiallyValid) {\n\t\t\t\tthis.setElementMessage('error', 'Incomplete card number.');\n\t\t\t} else {\n\t\t\t\tthis.setElementMessage('error', 'Invalid card number.');\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (!data.fields.cardExpiryField?.isValid) {\n\t\t\tif (data.fields.cardExpiryField?.isPotentiallyValid) {\n\t\t\t\tthis.setElementMessage('error', 'Incomplete expiration date.');\n\t\t\t} else {\n\t\t\t\tthis.setElementMessage('error', 'Invalid expiration date.');\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (!data.fields.cardCvvField?.isValid) {\n\t\t\tif (data.fields.cardCvvField?.isPotentiallyValid) {\n\t\t\t\tthis.setElementMessage('error', 'Incomplete security code.');\n\t\t\t} else {\n\t\t\t\tthis.setElementMessage('error', 'Invalid security code.');\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setElementMessage('clear');\n\t}\n\n\t/**\n     * Called by PayPal when the customer attempts to submit(Press enter) in any of the hosted card fields.\n     */\n\tprivate onInputSubmitRequest(data: HostedFieldEvent) {\n\t\tif (!data.fields.cardNumberField?.isValid) {\n\t\t\tif (data.fields.cardNumberField?.isPotentiallyValid) {\n\t\t\t\tthis.setElementMessage('error', 'Incomplete card number.');\n\t\t\t} else {\n\t\t\t\tthis.setElementMessage('error', 'Invalid card number.');\n\t\t\t}\n\n\t\t\tthis.numberField?.focus('number')\n\t\t\t\t.catch(() => {/* */});\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (!data.fields.cardExpiryField?.isValid) {\n\t\t\tif (data.fields.cardExpiryField?.isPotentiallyValid) {\n\t\t\t\tthis.setElementMessage('error', 'Incomplete expiration date.');\n\t\t\t} else {\n\t\t\t\tthis.setElementMessage('error', 'Invalid expiration date.');\n\t\t\t}\n\n\t\t\tthis.expiryField?.focus('expiry')\n\t\t\t\t.catch(() => {/* */});\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (!data.fields.cardCvvField?.isValid) {\n\t\t\tif (data.fields.cardCvvField?.isPotentiallyValid) {\n\t\t\t\tthis.setElementMessage('error', 'Incomplete security code.');\n\t\t\t} else {\n\t\t\t\tthis.setElementMessage('error', 'Invalid security code.');\n\t\t\t}\n\n\t\t\tthis.cvvField?.focus('cvv')\n\t\t\t\t.catch(() => {/* */});\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (data.isFormValid) {\n\t\t\tthis.setElementMessage('clear');\n\t\t}\n\t}\n\n\t/**\n     * Called by PayPal when the customer attempts to submit(Press enter) in any of the hosted card fields.\n     */\n\tprivate setElementMessage(type: 'info' | 'error' | 'clear', message?: string) {\n\t\tconst statusContainer = $qs('#pp-paypal-card-status');\n\t\tconst statusMessage = $qs('#pp-paypal-card-status span');\n\n\t\tif (!statusContainer || !statusMessage) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (type === 'clear' || !message) {\n\t\t\tstatusContainer.classList.add('hide');\n\t\t\tstatusMessage.textContent = '';\n\n\t\t\treturn;\n\t\t}\n\n\t\tstatusContainer.classList.remove('hide');\n\t\tstatusMessage.textContent = message;\n\n\t\tif (type === 'info') {\n\t\t\tstatusContainer.classList.remove('error');\n\t\t} else if (type === 'error') {\n\t\t\tstatusContainer.classList.add('error');\n\t\t}\n\t}\n}\n\nexport {PayPalCardPayment};\n","import {MerchantConfiguration} from './../../reducers/merchantConfigurationReducer';\nimport {loadScript, type PayPalNamespace} from '@paypal/paypal-js';\nimport {FeatureFlag} from '../../../../@type/features';\nimport {type GatewayConfiguration} from '../../models/GatewayConfiguration';\nimport {Feature, startModalProcessing} from '../../reducers/environmentReducer';\nimport {PaymentConfiguration, registerGatewayBatch} from '../../reducers/paymentConfigurationReducer';\nimport {store} from '../../store';\nimport {getLocaleText} from '../../util/translation';\nimport {createExpressCheckoutPaymentAttempt, type OrderService} from '../order';\nimport {setupPayPalHostedButtonRendering, setupPayPalNonHostedButtonRendering} from './button';\nimport {initPayPalCreditMethod} from './paypal-credit';\nimport {initPayPalPayLaterMethod} from './paypal-paylater';\nimport {initPayPalVenmoMethod} from './paypal-venmo';\nimport {initPayPalWalletMethod} from './paypal-wallet';\nimport {initPayPalCardMethod} from './paypal-card';\nimport {captureSentryException} from '../../../../@shared/ts/sentry';\nimport {type PaymentAttempt, type PaymentData} from '../../../../@shared/ts/paymentAttempt';\nimport {$qsAll} from '../../../../@shared/ts/dom';\nimport {checkRequiredFields} from '../../features/additionalFields';\n\nexport default async function initPayPalPaymentIntegration(orderService: OrderService): Promise<void> {\n\tif (!Feature.enabled(FeatureFlag.PAYPAL_GATEWAYS)) {\n\t\treturn;\n\t}\n\n\tconst clientId = Feature.metadata<string>(FeatureFlag.PAYPAL_GATEWAYS, 'client_id');\n\tconst merchantId = Feature.metadata<string>(FeatureFlag.PAYPAL_GATEWAYS, 'merchant_id');\n\tconst partnerAttributionId = Feature.metadata<string>(FeatureFlag.PAYPAL_GATEWAYS, 'partner_attribution_id');\n\n\tif (!clientId || !merchantId || !partnerAttributionId) {\n\t\treturn;\n\t}\n\n\tconst hostedButtonGateways = registerPayPalHostedButtonGateways();\n\tconst nonHostedButtonGateways = registerPayPalNonHostedButtonGateways();\n\n\tsetupPayPalHostedButtonRendering(hostedButtonGateways);\n\tsetupPayPalNonHostedButtonRendering(nonHostedButtonGateways);\n\n\tconst presentmentCurrencies = new Set(['USD', 'AUD', 'BRL', 'CAD', 'CZK', 'DKK', 'EUR', 'HKD', 'HUF', 'ILS', 'JPY', 'MYR', 'MXN', 'TWD', 'NZD', 'NOK', 'PHP', 'PLN', 'GBP', 'RUB', 'SGD', 'SEK', 'CHF', 'THB']);\n\tlet previousCurrency = '';\n\tstore.subscribe(async () => {\n\t\tconst currentCurrency = MerchantConfiguration.currency.code();\n\t\tif (currentCurrency === previousCurrency) {\n\t\t\treturn;\n\t\t}\n\n\t\tpreviousCurrency = currentCurrency;\n\n\t\t// Reset all PayPal payment methods to there default state when the currency changes.\n\t\tfor (const [_, gateway] of Object.entries(hostedButtonGateways)) {\n\t\t\tgateway.reset();\n\t\t\tgateway.state = undefined;\n\t\t}\n\n\t\t// If the new currency is not a supported presentment currency then do not reinitialize payment methods.\n\t\tif (!presentmentCurrencies.has(currentCurrency)) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst paypal = await loadScript({\n\t\t\t\tclientId,\n\t\t\t\tmerchantId,\n\t\t\t\tdataPartnerAttributionId: partnerAttributionId,\n\t\t\t\tenableFunding: 'venmo',\n\t\t\t\tcurrency: MerchantConfiguration.currency.code(),\n\t\t\t\tdataPageType: 'checkout',\n\t\t\t\tcomponents: ['buttons', 'card-fields'],\n\t\t\t});\n\n\t\t\tif (!paypal) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait activatePayPalHostedButtonGateways(paypal, hostedButtonGateways, orderService);\n\t\t\tawait activatePayPalNonHostedButtonGateways(paypal, nonHostedButtonGateways);\n\t\t} catch (error) {\n\t\t\tcaptureSentryException(new Error('PayPal SDK failed to load'), {\n\t\t\t\terror,\n\t\t\t});\n\t\t}\n\t});\n\n\tconst confirm = (event: MouseEvent) => {\n\t\tconst requiredFieldsVerification = checkRequiredFields();\n\t\tif (!requiredFieldsVerification) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst $target = event.target as HTMLElement | null;\n\t\tconst $button = $target?.closest<HTMLButtonElement>('button');\n\t\tif (!$button) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst gatewayId = PaymentConfiguration.selectedGateway();\n\t\tconst gateway = nonHostedButtonGateways[gatewayId];\n\t\tif (!gateway) {\n\t\t\treturn;\n\t\t}\n\n\t\tstore.dispatch(startModalProcessing());\n\n\t\tgateway.submit(createExpressCheckoutPaymentAttempt(orderService));\n\t};\n\n\t$qsAll<HTMLElement>('.paypal-btn', $el => {\n\t\t$el.addEventListener('click', event => {\n\t\t\tconfirm(event);\n\t\t});\n\t});\n}\n\nfunction registerPayPalNonHostedButtonGateways(): Record<string, PayPalGateway> {\n\tconst gatewayImplementations: Record<string, PayPalGateway> = {};\n\tconst gatewayConfigurations: Record<string, GatewayConfiguration> = {};\n\n\tif (Feature.enabled(FeatureFlag.PAYPAL_CARD_GATEWAY)) {\n\t\tconst method = initPayPalCardMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tstore.dispatch(registerGatewayBatch(gatewayConfigurations));\n\n\treturn gatewayImplementations;\n}\n\nfunction registerPayPalHostedButtonGateways(): Record<string, PayPalButtonGateway> {\n\tconst gatewayImplementations: Record<string, PayPalButtonGateway> = {};\n\tconst gatewayConfigurations: Record<string, GatewayConfiguration> = {};\n\n\tif (Feature.enabled(FeatureFlag.PAYPAL_WALLET_GATEWAY)) {\n\t\tconst method = initPayPalWalletMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tif (Feature.enabled(FeatureFlag.PAYPAL_VENMO_GATEWAY)) {\n\t\tconst method = initPayPalVenmoMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tif (Feature.enabled(FeatureFlag.PAYPAL_PAYLATER_GATEWAY)) {\n\t\tconst method = initPayPalPayLaterMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tif (Feature.enabled(FeatureFlag.PAYPAL_CREDIT_GATEWAY)) {\n\t\tconst method = initPayPalCreditMethod();\n\t\tgatewayImplementations[method.config.gatewayId] = method;\n\t\tgatewayConfigurations[method.config.gatewayId] = method.config;\n\t}\n\n\tstore.dispatch(registerGatewayBatch(gatewayConfigurations));\n\n\treturn gatewayImplementations;\n}\n\nasync function activatePayPalHostedButtonGateways(paypal: PayPalNamespace, gateways: Record<string, PayPalButtonGateway>, orderService: OrderService) {\n\tconst activations = [];\n\tfor (const [_, gateway] of Object.entries(gateways)) {\n\t\tif (gateway.activate) {\n\t\t\tactivations.push(gateway.activate(paypal, orderService));\n\t\t}\n\t}\n\n\tawait Promise.all(activations);\n}\n\nasync function activatePayPalNonHostedButtonGateways(paypal: PayPalNamespace, gateways: Record<string, PayPalGateway>) {\n\tconst activations = [];\n\tfor (const [_, gateway] of Object.entries(gateways)) {\n\t\tif (gateway.activate) {\n\t\t\tactivations.push(gateway.activate(paypal));\n\t\t}\n\t}\n\n\tawait Promise.all(activations);\n}\n\nfunction paypalDescription(title: string, icon: string, description: string) {\n\treturn /* html */ `\n    <img style=\"display: block; text-align: left; height: 1.7rem; \" src=\"${icon}\">\n    <p style=\"text-align: left; margin: 0.5rem 0;\">${title} ${getLocaleText('selected for checkout.')}</p>\n    <hr>\n    <p style=\"text-align: left; margin: 0.5rem 0 0;\" class=\"muted\">${description}</p>`;\n}\n\n/**\n * Implementation type for a PayPal gateway\n */\ninterface PayPalButtonGateway {\n\tstate?: {\n\t\tmountTarget: string;\n\t};\n\tconfig: GatewayConfiguration;\n\tactivate(paypal: PayPalNamespace, orderService: OrderService): Promise<void> | void;\n\treset(): void;\n\tattach(baseTarget: string): void;\n\tdetach(): void;\n}\n\ninterface PayPalGateway {\n\tconfig: GatewayConfiguration;\n\tactivate(paypal: PayPalNamespace): Promise<void> | void;\n\tsubmit(paymentAttempt: PaymentAttempt): void;\n}\n\ninterface PayPalPaymentData extends PaymentData {\n\t'data': {\n\t\t'id': string;\n\t};\n}\n\nexport {\n\tpaypalDescription,\n\ttype PayPalButtonGateway,\n\ttype PayPalPaymentData,\n\ttype PayPalGateway,\n};\n","import {type GatewayConfiguration} from '../../models/GatewayConfiguration';\nimport {paypalDescription, type PayPalButtonGateway} from './paypal';\nimport paypalBadgeURL from '../../../img/badge/paypal.svg';\nimport paypalImageURL from '../../../img/marks/paypal.svg';\nimport {PayPalPaymentButton} from './class-paypal-payment';\nimport {type PayPalButtonsComponentOptions} from '@paypal/paypal-js';\nimport {FeatureFlag} from '../../../../@type/features';\nimport {Feature} from '../../reducers/environmentReducer';\nimport {render} from '../../reducers/rootReducer';\nimport {store} from '../../store';\nimport {getLocaleText} from '../../util/translation';\n\nfunction initPayPalWalletMethod(): PayPalButtonGateway {\n\tlet buttonInstance: PayPalPaymentButton | null = null;\n\tlet buttonInstanceWaitingInterval: any;\n\n\tconst config: GatewayConfiguration = {\n\t\tname: Feature.metadata<string>(FeatureFlag.PAYPAL_WALLET_GATEWAY, 'title') ?? 'PayPal',\n\t\tgatewayId: 'peachpay_paypal_wallet',\n\t\tdescription: paypalDescription('PayPal', paypalImageURL, getLocaleText('After selecting the PayPal button you will be prompted to complete your payment.')),\n\t\tassets: {\n\t\t\tbadge: {src: paypalBadgeURL},\n\t\t\ttitle: {src: paypalImageURL},\n\t\t},\n\t};\n\n\treturn {\n\t\tconfig,\n\t\tactivate(paypal, orderService) {\n\t\t\tbuttonInstance = new PayPalPaymentButton(paypal, orderService, {\n\t\t\t\tgatewayId: 'peachpay_paypal_wallet',\n\t\t\t\tfundingType: 'paypal',\n\t\t\t\tbuttonStyle: Feature.metadata<PayPalButtonsComponentOptions['style']>(FeatureFlag.PAYPAL_WALLET_GATEWAY, 'button_style') ?? undefined,\n\t\t\t});\n\t\t\tconfig.initialized = buttonInstance.isEligible();\n\t\t\tstore.dispatch(render());\n\t\t},\n\t\treset() {\n\t\t\tbuttonInstance?.unmount();\n\t\t\tbuttonInstance = null;\n\t\t\tconfig.initialized = false;\n\t\t\tstore.dispatch(render());\n\t\t},\n\t\tattach(selector) {\n\t\t\tclearInterval(buttonInstanceWaitingInterval);\n\t\t\tbuttonInstanceWaitingInterval = setInterval(() => {\n\t\t\t\tif (buttonInstance) {\n\t\t\t\t\tbuttonInstance.mount(selector);\n\t\t\t\t\tclearInterval(buttonInstanceWaitingInterval);\n\t\t\t\t}\n\t\t\t}, 200);\n\t\t},\n\t\tdetach() {\n\t\t\tbuttonInstance?.unmount();\n\t\t},\n\t};\n}\n\nexport {\n\tinitPayPalWalletMethod,\n};\n","import {type GatewayConfiguration} from '../../models/GatewayConfiguration';\nimport {paypalDescription, type PayPalButtonGateway} from './paypal';\nimport venmoBadgeURL from '../../../img/badge/venmo.svg';\nimport venmoImageURL from '../../../img/marks/venmo.svg';\nimport {type PayPalButtonsComponentOptions} from '@paypal/paypal-js';\nimport {FeatureFlag} from '../../../../@type/features';\nimport {Feature} from '../../reducers/environmentReducer';\nimport {PayPalPaymentButton} from './class-paypal-payment';\nimport {render} from '../../reducers/rootReducer';\nimport {store} from '../../store';\nimport {getLocaleText} from '../../util/translation';\n\nfunction initPayPalVenmoMethod(): PayPalButtonGateway {\n\tlet buttonInstance: PayPalPaymentButton | null = null;\n\n\tconst config: GatewayConfiguration = {\n\t\tname: Feature.metadata<string>(FeatureFlag.PAYPAL_VENMO_GATEWAY, 'title') ?? 'Venmo',\n\t\tgatewayId: 'peachpay_paypal_venmo',\n\t\tdescription: paypalDescription('Venmo', venmoImageURL, getLocaleText('After selecting the Venmo button you will be prompted to complete your payment.')),\n\t\tassets: {\n\t\t\tbadge: {src: venmoBadgeURL},\n\t\t\ttitle: {src: venmoImageURL},\n\t\t},\n\t};\n\n\treturn {\n\t\tconfig,\n\t\tactivate(paypal, orderService) {\n\t\t\tbuttonInstance = new PayPalPaymentButton(paypal, orderService, {\n\t\t\t\tgatewayId: 'peachpay_paypal_venmo',\n\t\t\t\tfundingType: 'venmo',\n\t\t\t\tbuttonStyle: Feature.metadata<PayPalButtonsComponentOptions['style']>(FeatureFlag.PAYPAL_VENMO_GATEWAY, 'button_style') ?? undefined,\n\t\t\t});\n\t\t\tconfig.initialized = buttonInstance.isEligible();\n\t\t\tstore.dispatch(render());\n\t\t},\n\t\treset() {\n\t\t\tbuttonInstance?.unmount();\n\t\t\tbuttonInstance = null;\n\t\t\tconfig.initialized = false;\n\t\t\tstore.dispatch(render());\n\t\t},\n\t\tattach(selector) {\n\t\t\tbuttonInstance?.mount(selector);\n\t\t},\n\t\tdetach() {\n\t\t\tbuttonInstance?.unmount();\n\t\t},\n\t};\n}\n\nexport {\n\tinitPayPalVenmoMethod,\n};\n","import {type GatewayConfiguration} from '../../models/GatewayConfiguration';\nimport {paypalDescription, type PayPalButtonGateway} from './paypal';\nimport paypalBadgeURL from '../../../img/badge/paypal.svg';\nimport paypalPaylaterImageURL from '../../../img/marks/paypal-paylater.svg';\nimport {type PayPalButtonsComponentOptions} from '@paypal/paypal-js';\nimport {FeatureFlag} from '../../../../@type/features';\nimport {Feature} from '../../reducers/environmentReducer';\nimport {PayPalPaymentButton} from './class-paypal-payment';\nimport {render} from '../../reducers/rootReducer';\nimport {store} from '../../store';\nimport {getLocaleText} from '../../util/translation';\n\nfunction initPayPalPayLaterMethod(): PayPalButtonGateway {\n\tlet buttonInstance: PayPalPaymentButton | null = null;\n\n\tconst config: GatewayConfiguration = {\n\t\tname: Feature.metadata<string>(FeatureFlag.PAYPAL_PAYLATER_GATEWAY, 'title') ?? 'PayPal Pay Later',\n\t\tgatewayId: 'peachpay_paypal_paylater',\n\t\tdescription: paypalDescription('PayPal Pay Later', paypalPaylaterImageURL, getLocaleText('After selecting the PayPal Pay Later button you will be prompted to complete your payment.')),\n\t\tassets: {\n\t\t\tbadge: {src: paypalBadgeURL},\n\t\t\ttitle: {src: paypalPaylaterImageURL},\n\t\t},\n\t};\n\n\treturn {\n\t\tconfig,\n\t\tactivate(paypal, orderService) {\n\t\t\tbuttonInstance = new PayPalPaymentButton(paypal, orderService, {\n\t\t\t\tgatewayId: 'peachpay_paypal_paylater',\n\t\t\t\tfundingType: 'paylater',\n\t\t\t\tbuttonStyle: Feature.metadata<PayPalButtonsComponentOptions['style']>(FeatureFlag.PAYPAL_PAYLATER_GATEWAY, 'button_style') ?? undefined,\n\t\t\t});\n\t\t\tconfig.initialized = buttonInstance.isEligible();\n\t\t\tstore.dispatch(render());\n\t\t},\n\t\treset() {\n\t\t\tbuttonInstance?.unmount();\n\t\t\tbuttonInstance = null;\n\t\t\tconfig.initialized = false;\n\t\t\tstore.dispatch(render());\n\t\t},\n\t\tattach(selector) {\n\t\t\tbuttonInstance?.mount(selector);\n\t\t},\n\t\tdetach() {\n\t\t\tbuttonInstance?.unmount();\n\t\t},\n\t};\n}\n\nexport {\n\tinitPayPalPayLaterMethod,\n};\n","import {type GatewayConfiguration} from '../../models/GatewayConfiguration';\nimport {paypalDescription, type PayPalButtonGateway} from './paypal';\n\nimport paypalBadgeURL from '../../../img/badge/paypal.svg';\nimport paypalCreditImageURL from '../../../img/marks/paypal.svg';\nimport {PayPalPaymentButton} from './class-paypal-payment';\nimport {type PayPalButtonsComponentOptions} from '@paypal/paypal-js';\nimport {FeatureFlag} from '../../../../@type/features';\nimport {Feature} from '../../reducers/environmentReducer';\nimport {store} from '../../store';\nimport {render} from '../../reducers/rootReducer';\nimport {getLocaleText} from '../../util/translation';\n\nfunction initPayPalCreditMethod(): PayPalButtonGateway {\n\tlet buttonInstance: PayPalPaymentButton | null = null;\n\n\tconst config: GatewayConfiguration = {\n\t\tname: Feature.metadata<string>(FeatureFlag.PAYPAL_CREDIT_GATEWAY, 'title') ?? 'PayPal Credit',\n\t\tgatewayId: 'peachpay_paypal_credit',\n\t\tdescription: paypalDescription('PayPal Credit', paypalCreditImageURL, getLocaleText('After selecting the PayPal Credit button you will be prompted to complete your payment.')),\n\t\tassets: {\n\t\t\tbadge: {src: paypalBadgeURL},\n\t\t\ttitle: {src: paypalCreditImageURL},\n\t\t},\n\t};\n\n\treturn {\n\t\tconfig,\n\t\tactivate(paypal, orderService) {\n\t\t\tbuttonInstance = new PayPalPaymentButton(paypal, orderService, {\n\t\t\t\tgatewayId: 'peachpay_paypal_credit',\n\t\t\t\tfundingType: 'credit',\n\t\t\t\tbuttonStyle: Feature.metadata<PayPalButtonsComponentOptions['style']>(FeatureFlag.PAYPAL_CREDIT_GATEWAY, 'button_style') ?? undefined,\n\t\t\t});\n\t\t\tconfig.initialized = buttonInstance.isEligible();\n\t\t\tstore.dispatch(render());\n\t\t},\n\t\treset() {\n\t\t\tbuttonInstance?.unmount();\n\t\t\tbuttonInstance = null;\n\t\t\tconfig.initialized = false;\n\t\t\tstore.dispatch(render());\n\t\t},\n\t\tattach(selector) {\n\t\t\tbuttonInstance?.mount(selector);\n\t\t},\n\t\tdetach() {\n\t\t\tbuttonInstance?.unmount();\n\t\t},\n\t};\n}\n\nexport {\n\tinitPayPalCreditMethod,\n};\n","import {type GatewayConfiguration} from '../../models/GatewayConfiguration';\nimport {type PayPalGateway} from './paypal';\nimport {FeatureFlag} from '../../../../@type/features';\nimport {Feature} from '../../reducers/environmentReducer';\nimport {getLocaleText} from '../../util/translation';\nimport {type PayPalNamespace} from '@paypal/paypal-js';\nimport {PayPalCardPayment} from '../../../../native-checkout/ts/paypal/class-paypal-card-payment';\nimport {render} from '../../reducers/rootReducer';\nimport {store} from '../../store';\nimport cardBadgeURL from '../../../img/badge/card.svg';\nimport cardImageURL from '../../../img/marks/credit-card-regular.svg';\n\nfunction initPayPalCardMethod(): PayPalGateway {\n\tlet card: PayPalCardPayment | null = null;\n\n\tconst config: GatewayConfiguration = {\n\t\tname: Feature.metadata<string>(FeatureFlag.PAYPAL_CARD_GATEWAY, 'title') ?? 'Card',\n\t\tgatewayId: 'peachpay_paypal_card',\n\t\tdescription: paypalDescription(),\n\t\tassets: {\n\t\t\ttitle: {src: cardImageURL},\n\t\t\tbadge: {src: cardBadgeURL},\n\t\t},\n\t};\n\n\treturn {\n\t\tconfig,\n\t\tasync activate(paypal: PayPalNamespace) {\n\t\t\tcard = new PayPalCardPayment(paypal);\n\t\t\tif (!card.isEligible()) {\n\t\t\t\tcard = null;\n\t\t\t\tconfig.initialized = false;\n\t\t\t\tstore.dispatch(render());\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcard.mount();\n\t\t},\n\t\tsubmit(paymentAttempt) {\n\t\t\tif (!card) {\n\t\t\t\tconsole.error('PayPal card payment not initialized for submitting payment attempt');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcard.submit(paymentAttempt);\n\t\t},\n\t};\n}\n\nfunction paypalDescription() {\n\treturn `\n\t<div>\n\t\t<p style=\"text-align: left; margin: 0;\">\n\t\t\t${getLocaleText('Pay securely using your credit or debit card.')}\n\t\t<p>\n\t\t<div id=\"pp-paypal-card-element\" data-is-mounted=\"false\">\n\t\t\t<div id=\"pp-paypal-card-number\">\n\t\t\t</div>\n\t\t\t<div id=\"pp-paypal-card-expiry\">\n\t\t\t</div>\n\t\t\t<div id=\"pp-paypal-card-cvv\">\n\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"pp-paypal-card-status\" class=\"hide\" style=\"display:flex;align-items:center;justify-content:center;gap:4px;\">\n\t\t\t<i class=\"pp-icon-info\"></i>\n\t\t\t<span></span>\n\t\t</div>\n\t</div>`;\n}\n\nexport {\n\tinitPayPalCardMethod,\n};\n"],"names":["objectToQueryString","params","queryString","Object","keys","forEach","key","length","createScriptElement","url","attributes","newScript","document","createElement","src","setAttribute","loadScript","options","PromisePonyfill","Promise","validateArguments","resolve","_a","sdkBaseUrl","optionsWithStringIndex","filter","reduce","accumulator","replacer","value","toString","match","indexOfMatch","toLowerCase","replace","substring","dataAttributes","queryParams","indexOf","concat","processOptions","namespace","existingWindowNamespace","getPayPalWindowNamespace","currentScript","querySelector","nextScript","currentScriptClone","cloneNode","dataset","uidAuto","isExactMatch","findScript","Error","reject","onSuccess","onError","onerror","onload","head","insertBefore","firstElementChild","insertScriptElement","defaultError","loadCustomScript","then","newWindowNamespace","window","setupPayPalHostedButtonRendering","gateways","store","gatewayId","mode","startsWith","$element","classList","remove","add","entries","sort","m1","state","mountTarget","gateway","newMountTarget","customHostedButtonMountTarget","detach","config","attach","controlHostedButtonMounts","setupPayPalNonHostedButtonRendering","gatewayList","page","loadingMode","includes","renderButtonDisplay","innerHTML","disabled","renderButtonLoading","paypal","orderService","this","fundingType","buttonStyle","isMounted","mountContainer","currentPaymentDetails","currentTransaction","button","createButtonComponent","isEligible","mount","selector","$container","insertAdjacentElement","render","catch","unmount","Buttons","fundingSource","style","onClick","createOrder","_data","_actions","startTransaction","transactionError","transaction","errorMessage","placeOrder","orderError","orderResult","result","dataURL","URL","redirect","hash","split","data","complete","note","paymentData","JSON","parse","atob","decodeURIComponent","id","onApprove","actions","order_id","restart","approveURL","formData","FormData","append","fetch","method","body","response","json","success","message","order","get","paypalOrder","status","top","location","href","success_url","onCancel","paymentStatus","orderStatus","xhr","XMLHttpRequest","open","send","cancelOrder","cancel_url","error","cardPayment","cardFields","CardFields","numberField","expiryField","cvvField","paymentAttempt","inputEvents","onFocus","onChange","onBlur","onInputSubmitRequest","NumberField","numberFieldContainer","ExpiryField","expiryFieldContainer","CVVField","cvvFieldContainer","submit","createTransaction","console","completeTransaction","setPaymentMessage","stopLoading","submitOrder","featureMetadata","getOrderId","maybe","redirectSuccess","_error","emittedBy","fields","cardNumberField","isPotentiallyValid","setElementMessage","cardExpiryField","cardCvvField","isValid","focus","isFormValid","type","statusContainer","statusMessage","textContent","initPayPalPaymentIntegration","clientId","merchantId","partnerAttributionId","hostedButtonGateways","gatewayImplementations","gatewayConfigurations","buttonInstanceWaitingInterval","buttonInstance","name","description","assets","badge","title","activate","PayPalPaymentButton","undefined","initialized","reset","clearInterval","setInterval","initPayPalWalletMethod","initPayPalVenmoMethod","initPayPalPayLaterMethod","initPayPalCreditMethod","registerPayPalHostedButtonGateways","nonHostedButtonGateways","card","PayPalCardPayment","initPayPalCardMethod","registerPayPalNonHostedButtonGateways","presentmentCurrencies","Set","previousCurrency","currentCurrency","has","dataPartnerAttributionId","enableFunding","currency","dataPageType","components","activatePayPalHostedButtonGateways","activatePayPalNonHostedButtonGateways","confirm","event","$target","target","closest","$el","addEventListener","activations","push","all","icon"],"sourceRoot":""}